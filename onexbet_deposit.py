#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1xBet Cash API
–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏ —Å—É–º–º—É - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
"""

import hashlib
import json
import requests
from datetime import datetime, timezone

class OneXBetDeposit:
    def __init__(self):
        # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.hash_key = "a5cce17876708d9a3506b41ecf1f68dfc1658e9521d48c5a227340f24b99bfe8"
        self.cashierpass = "wGiFTLJ3"
        self.login = "kurbanaevb"
        self.cashdesk_id = 1343871
        self.base_url = "https://partners.servcul.com/CashdeskBotAPI"
    
    def get_timestamp(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ"""
        now = datetime.now(timezone.utc)
        return now.strftime("%Y.%m.%d %H:%M:%S")
    
    def generate_signature(self, method, user_id=None, summa=None, code=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è 1xBet API"""
        dt = self.get_timestamp()
        lng = "ru"              
        
        if method == "balance":
            # –î–ª—è –±–∞–ª–∞–Ω—Å–∞: SHA256(hash={0}&cashierpass={1}&dt={2})
            step1 = f"hash={self.hash_key}&cashierpass={self.cashierpass}&dt={dt}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(dt={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"dt={dt}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
        elif method == "search":
            # –î–ª—è –ø–æ–∏—Å–∫–∞: SHA256(hash={0}&userid={1}&cashdeskid={2})
            step1 = f"hash={self.hash_key}&userid={user_id}&cashdeskid={self.cashdesk_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(userid={0}&cashierpass={1}&hash={2})
            step2 = f"userid={user_id}&cashierpass={self.cashierpass}&hash={self.hash_key}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
        elif method == "deposit":
            # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: SHA256(hash={0}&lng={1}&userid={2}) - userid —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã!
            step1 = f"hash={self.hash_key}&lng={lng}&userid={user_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(summa={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"summa={summa}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
            print(f"üîç DEBUG - Step1: {step1}")
            print(f"üîç DEBUG - Step1 Hash: {step1_hash}")
            print(f"üîç DEBUG - Step2: {step2}")
            print(f"üîç DEBUG - Step2 Hash: {step2_hash}")
            print(f"üîç DEBUG - Final String: {final_string}")
            print(f"üîç DEBUG - Signature: {signature}")
            
        elif method == "payout":
            # –î–ª—è –≤—ã–ø–ª–∞—Ç—ã: SHA256(hash={0}&lng={1}&userid={2}) - userid —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã!
            step1 = f"hash={self.hash_key}&lng={lng}&userid={user_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(code={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"code={code}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
        
        return signature
    
    def generate_confirm(self, user_id, method_hash):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å confirm –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return hashlib.md5(f"{user_id}:{method_hash}".encode()).hexdigest()
    
    def generate_confirm_deposit(self, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å confirm –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)"""
        # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: confirm = MD5(userId:hash)
        return hashlib.md5(f"{user_id}:{self.hash_key}".encode()).hexdigest()
    
    def check_balance(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã"""
        try:
            dt = self.get_timestamp()
            signature = self.generate_signature("balance")
            
            # –î–ª—è –±–∞–ª–∞–Ω—Å–∞ confirm = MD5(cashdeskId:hash)
            confirm = hashlib.md5(f"{self.cashdesk_id}:{self.hash_key}".encode()).hexdigest()
            
            url = f"{self.base_url}/Cashdesk/{self.cashdesk_id}/Balance?confirm={confirm}&dt={dt}"
            headers = {'sign': signature}
            
            print(f"üîó URL: {url}")
            print(f"‚è∞ –í—Ä–µ–º—è: {dt}")
            print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:20]}...")
            
            response = requests.get(url, headers=headers, timeout=30)
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£–°–ü–ï–•! –ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã:")
                print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {data.get('Balance', 'N/A')}")
                print(f"   üìä –õ–∏–º–∏—Ç: {data.get('Limit', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê! {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False
    
    def search_player(self, user_id):
        """–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞"""
        try:
            signature = self.generate_signature("search", user_id)
            confirm = self.generate_confirm(user_id, self.hash_key)
            
            url = f"{self.base_url}/Users/{user_id}?confirm={confirm}&cashdeskId={self.cashdesk_id}"
            headers = {'sign': signature}
            
            print(f"üîó URL: {url}")
            print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:20]}...")
            
            response = requests.get(url, headers=headers, timeout=30)
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£–°–ü–ï–•! –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω:")
                print(f"   üÜî ID: {data.get('userId', 'N/A')}")
                print(f"   üë§ –ò–º—è: {data.get('name', 'N/A')}")
                print(f"   üí± –í–∞–ª—é—Ç–∞: {data.get('currencyId', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê! {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False
    
    def deposit_player(self, user_id, summa):
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        try:
            signature = self.generate_signature("deposit", user_id, summa)
            confirm = self.generate_confirm_deposit(user_id)
            
            url = f"{self.base_url}/Deposit/{user_id}/Add"
            headers = {'sign': signature, 'Content-Type': 'application/json'}
            
            request_body = {
                "cashdeskId": self.cashdesk_id,
                "lng": "ru",
                "summa": float(summa),
                "confirm": confirm
            }
            
            print(f"üîó URL: {url}")
            print(f"üìù –ó–∞–ø—Ä–æ—Å: {json.dumps(request_body, separators=(',', ':'))}")
            print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:20]}...")
            print(f"üîç DEBUG - Confirm: {confirm}")
            print(f"üîç DEBUG - User ID: {user_id}")
            print(f"üîç DEBUG - Hash Key: {self.hash_key[:20]}...")
            
            response = requests.post(url, headers=headers, json=request_body, timeout=30)
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£–°–ü–ï–•! –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:")
                print(f"   üí∞ –°—É–º–º–∞: {data.get('summa', 'N/A')}")
                print(f"   ‚úÖ –£—Å–ø–µ—Ö: {data.get('success', 'N/A')}")
                print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê! {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
           
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False

def main():
    print("üé∞ 1XBET CASH - –ü–û–ü–û–õ–ù–ï–ù–ò–ï –°–ß–ï–¢–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    onexbet = OneXBetDeposit()
    
    while True:
        try:
            print(f"\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print(f"1. üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã")
            print(f"2. üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞")
            print(f"3. üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞")
            print(f"4. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\nüéØ –í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
            
            if choice == "1":
                print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã...")
                onexbet.check_balance()
                
            elif choice == "2":
                user_id = input("üÜî ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
                if user_id:
                    print(f"\nüîÑ –ò—â–µ–º –∏–≥—Ä–æ–∫–∞...")
                    onexbet.search_player(user_id)
                else:
                    print("‚ùå ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    
            elif choice == "3":
                user_id = input("üÜî ID –∏–≥—Ä–æ–∫–∞: ").strip()
                if not user_id:
                    print("‚ùå ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue
                
                summa_str = input("üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ").strip()
                if not summa_str:
                    print("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                    continue
                
                try:
                    summa = float(summa_str)
                    if summa <= 0:
                        print("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                        continue
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
                    continue
                
                print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...")
                print(f"   üë§ –ò–≥—Ä–æ–∫: {user_id}")
                print(f"   üí∞ –°—É–º–º–∞: {summa}")
                
                success = onexbet.deposit_player(user_id, summa)
                
                if success:
                    print(f"\nüéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                else:
                    print(f"\nüí• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
                    
            elif choice == "4":
                print(f"\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print(f"\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            continue
    
    print(f"\nüéØ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 1xBet Cash API!")

if __name__ == "__main__":
    main()
