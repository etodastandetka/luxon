"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤
"""

import json
import logging
import requests
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils import timezone
from .models import BankNotification, AutoDepositRequest, PlayerBalance
from .auto_deposit_models import BankNotification as BankNotificationModel, AutoDepositRequest

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

class AutoDepositProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def process_bank_notification(self, notification_data):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–∞–Ω–∫–∞ –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        
        Args:
            notification_data (dict): –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            bank_name = notification_data.get('bank_name', 'Unknown Bank')
            amount = float(notification_data.get('amount', 0))
            transaction_id = notification_data.get('transaction_id', '')
            notification_text = notification_data.get('notification_text', '')
            device_id = notification_data.get('device_id', '')
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {bank_name}, —Å—É–º–º–∞: {amount}, ID: {transaction_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            if transaction_id and BankNotificationModel.objects.filter(transaction_id=transaction_id).exists():
                self.logger.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return {"status": "already_processed", "message": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"}
            
            # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—É–º–º–µ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            player_balance = self.find_player_by_amount(amount)
            
            if not player_balance:
                self.logger.warning(f"–ò–≥—Ä–æ–∫ —Å —Å—É–º–º–æ–π {amount} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"status": "player_not_found", "message": f"–ò–≥—Ä–æ–∫ —Å —Å—É–º–º–æ–π {amount} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            success = self.deposit_to_player(player_balance, amount, transaction_id, bank_name)
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                self.send_telegram_notification(player_balance.user_id, amount, bank_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
                self.save_notification(notification_data, player_balance.user_id, amount)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                self.mark_as_auto_deposited(player_balance.user_id, amount)
                
                self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {player_balance.user_id} –Ω–∞ {amount}")
                return {
                    "status": "success", 
                    "message": f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}",
                    "player_id": player_balance.user_id,
                    "amount": amount,
                    "auto_deposited": True
                }
            else:
                return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"}
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {"status": "error", "message": str(e)}
    
    def find_player_by_amount(self, amount):
        """
        –ò—â–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–π —Å—É–º–º–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            amount (float): –°—É–º–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            PlayerBalance: –ù–∞–π–¥–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–ª–∏ None
        """
        try:
            # –ò—â–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
            deposit_request = AutoDepositRequest.objects.filter(
                amount=amount,
                status='pending'
            ).first()
            
            if deposit_request:
                return PlayerBalance.objects.filter(user_id=deposit_request.user_id).first()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –±–ª–∏–∑–∫–æ–π —Å—É–º–º–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.01)
            deposit_request = AutoDepositRequest.objects.filter(
                amount__gte=amount - 0.01,
                amount__lte=amount + 0.01,
                status='pending'
            ).first()
            
            if deposit_request:
                return PlayerBalance.objects.filter(user_id=deposit_request.user_id).first()
                
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞: {e}")
            return None
    
    def deposit_to_player(self, player_balance, amount, transaction_id, bank_name):
        """
        –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        
        Args:
            player_balance (PlayerBalance): –û–±—ä–µ–∫—Ç –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
            amount (float): –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            transaction_id (str): ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            bank_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            player_balance.balance += amount
            player_balance.last_updated = timezone.now()
            player_balance.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∫ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
            deposit_request = AutoDepositRequest.objects.filter(
                user_id=player_balance.user_id,
                amount=amount,
                status='pending'
            ).first()
            
            if deposit_request:
                deposit_request.status = 'auto_completed'
                deposit_request.transaction_id = transaction_id
                deposit_request.bank_name = bank_name
                deposit_request.completed_at = timezone.now()
                deposit_request.save()
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False
    
    def send_telegram_notification(self, user_id, amount, bank_name):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ Telegram
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            amount (float): –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            bank_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        """
        try:
            message = f"""
üéâ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!**

üí∞ **–°—É–º–º–∞:** {amount} KGS
üè¶ **–ë–∞–Ω–∫:** {bank_name}
‚è∞ **–í—Ä–µ–º—è:** {timezone.now().strftime('%H:%M:%S')}

–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
            """.strip()
            
            url = f"{TELEGRAM_API_URL}/sendMessage"
            data = {
                'chat_id': user_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def save_notification(self, notification_data, user_id, amount):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            notification_data (dict): –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount (float): –°—É–º–º–∞
        """
        try:
            BankNotificationModel.objects.create(
                user_id=user_id,
                bank_name=notification_data.get('bank_name', ''),
                amount=amount,
                transaction_id=notification_data.get('transaction_id', ''),
                notification_text=notification_data.get('notification_text', ''),
                source_app=notification_data.get('source_app', ''),
                device_id=notification_data.get('device_id', ''),
                processed_at=timezone.now()
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def mark_as_auto_deposited(self, user_id, amount):
        """
        –ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount (float): –°—É–º–º–∞
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: pending/ completed)
            deposit_request = AutoDepositRequest.objects.filter(
                user_id=user_id,
                amount=amount,
                status__in=['pending','completed']
            ).order_by('-created_at').first()
            
            if deposit_request:
                deposit_request.status = 'auto_completed'
                deposit_request.completed_at = timezone.now()
                deposit_request.save()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                PlayerBalance.objects.filter(user_id=user_id).update(
                    last_auto_deposit=timezone.now(),
                    auto_deposited=True
                )
                
                self.logger.info(f"–ó–∞—è–≤–∫–∞ {deposit_request.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    
    def check_auto_deposit_status(self, user_id, amount):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount (float): –°—É–º–º–∞
            
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recent_auto_deposits = PlayerBalance.objects.filter(
                user_id=user_id,
                last_auto_deposit__gte=timezone.now() - timezone.timedelta(minutes=10),
                auto_deposited=True
            ).first()
            
            if recent_auto_deposits:
                return {
                    'auto_deposited': True,
                    'last_deposit': recent_auto_deposits.last_auto_deposit.isoformat(),
                    'balance': recent_auto_deposits.balance
                }
            else:
                return {
                    'auto_deposited': False,
                    'balance': 0
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return {'auto_deposited': False, 'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
processor = AutoDepositProcessor()

@csrf_exempt
@require_http_methods(["POST"])
def receive_bank_notification(request):
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        data = json.loads(request.body)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        result = processor.process_bank_notification(data)
        
        return JsonResponse(result)
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        return JsonResponse({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"}, status=400)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def get_player_balance(request, user_id):
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
    """
    try:
        player_balance = PlayerBalance.objects.filter(user_id=user_id).first()
        
        if player_balance:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            auto_status = processor.check_auto_deposit_status(user_id, 0)
            
            return JsonResponse({
                "user_id": user_id,
                "balance": player_balance.balance,
                "last_updated": player_balance.last_updated.isoformat(),
                "auto_deposited": auto_status.get('auto_deposited', False),
                "last_auto_deposit": auto_status.get('last_deposit'),
            })
        else:
            return JsonResponse({"error": "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return JsonResponse({"error": str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def check_auto_deposit_status(request, user_id):
    """
    API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        amount = float(request.GET.get('amount', 0))
        status = processor.check_auto_deposit_status(user_id, amount)
        
        return JsonResponse(status)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return JsonResponse({"error": str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def manual_deposit(request):
    """
    API endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    """
    try:
        data = json.loads(request.body)
        user_id = data.get('user_id')
        amount = float(data.get('amount', 0))
        bank_name = data.get('bank_name', 'Manual')
        
        if not user_id or amount <= 0:
            return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}, status=400)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        photo_url = data.get('photo_url', '')
        username = data.get('username', '')
        
        deposit_request = AutoDepositRequest.objects.create(
            user_id=user_id,
            amount=amount,
            bank_name=bank_name,
            request_type='deposit',
            status='pending',
            photo_url=photo_url,
            username=username
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        player_balance, created = PlayerBalance.objects.get_or_create(
            user_id=user_id,
            defaults={'balance': 0.0}
        )
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        player_balance.balance += amount
        player_balance.last_updated = timezone.now()
        player_balance.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        processor.send_telegram_notification(user_id, amount, bank_name)
        
        return JsonResponse({
            "status": "success",
            "message": f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}",
            "new_balance": player_balance.balance
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return JsonResponse({"error": str(e)}, status=500)
