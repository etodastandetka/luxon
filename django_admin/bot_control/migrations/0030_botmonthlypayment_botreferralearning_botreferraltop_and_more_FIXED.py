# Generated by Django - manually fixed to handle missing indexes
# This migration creates all PostgreSQL models and handles index renaming safely

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def safe_rename_index_if_exists(apps, schema_editor, model_name, old_index_name, new_index_name):
    """Безопасно переименовывает индекс только если он существует"""
    try:
        with schema_editor.connection.cursor() as cursor:
            if schema_editor.connection.vendor == 'sqlite':
                # Для SQLite проверяем существование индекса
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='index' AND name=?
                """, [old_index_name])
                index_exists = cursor.fetchone() is not None
                
                if index_exists:
                    # В SQLite нельзя переименовать индекс, нужно удалить и создать заново
                    cursor.execute(f"DROP INDEX IF EXISTS {old_index_name}")
                    # Новый индекс будет создан через state_operations
            else:
                # Для PostgreSQL
                cursor.execute("""
                    SELECT indexname FROM pg_indexes 
                    WHERE schemaname = 'public' AND indexname = %s
                """, [old_index_name])
                index_exists = cursor.fetchone() is not None
                
                if index_exists:
                    try:
                        cursor.execute(f'ALTER INDEX IF EXISTS "{old_index_name}" RENAME TO "{new_index_name}"')
                    except Exception:
                        # Если переименование не удалось, просто пропускаем
                        pass
    except Exception:
        # Если что-то пошло не так, просто пропускаем переименование
        pass


def fix_botreferral_indexes(apps, schema_editor):
    """Безопасно переименовывает индексы BotReferral, если они существуют"""
    # Старые имена из миграции 0027 (state_operations)
    old_referrer_idx = 'referrals_referrer_idx'
    old_referred_idx = 'referrals_referred_idx'
    
    # Новые имена, которые Django генерирует автоматически
    new_referrer_idx = 'referrals_referre_f47e8e_idx'
    new_referred_idx = 'referrals_referre_e2a62f_idx'
    
    safe_rename_index_if_exists(apps, schema_editor, 'botreferral', old_referrer_idx, new_referrer_idx)
    safe_rename_index_if_exists(apps, schema_editor, 'botreferral', old_referred_idx, new_referred_idx)


def reverse_fix_indexes(apps, schema_editor):
    """Обратная миграция"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('bot_control', '0029_merge_0024_0028'),
    ]

    operations = [
        # Сначала безопасно обрабатываем переименование индексов BotReferral
        migrations.SeparateDatabaseAndState(
            state_operations=[
                # В состоянии Django обновляем имена индексов
                migrations.AlterIndexTogether(
                    name='botreferral',
                    index_together=set(),
                ),
            ],
            database_operations=[
                migrations.RunPython(
                    fix_botreferral_indexes,
                    reverse_fix_indexes,
                ),
            ],
        ),
        
        # Создаем все новые модели
        migrations.CreateModel(
            name='BotMonthlyPayment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('position', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='monthly_payments', to='bot_control.botuser')),
            ],
            options={
                'db_table': 'monthly_payments',
                'verbose_name': 'Месячная выплата',
                'verbose_name_plural': 'Месячные выплаты',
            },
        ),
        migrations.CreateModel(
            name='BotReferralEarning',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('commission_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bookmaker', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('referrer', models.ForeignKey(db_column='referrer_id', on_delete=django.db.models.deletion.CASCADE, related_name='referral_earnings', to='bot_control.botuser')),
                ('referred', models.ForeignKey(db_column='referred_id', on_delete=django.db.models.deletion.CASCADE, related_name='earnings_generated', to='bot_control.botuser')),
            ],
            options={
                'db_table': 'referral_earnings',
                'verbose_name': 'Реферальный заработок',
                'verbose_name_plural': 'Реферальные заработки',
            },
        ),
        migrations.CreateModel(
            name='BotReferralTop',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_referrals', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='referral_top_entry', to='bot_control.botuser')),
            ],
            options={
                'db_table': 'referral_top',
                'ordering': ['-total_earnings'],
                'verbose_name': 'Топ реферал',
                'verbose_name_plural': 'Топ рефералов',
            },
        ),
        migrations.CreateModel(
            name='BotRequisite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.TextField()),
                ('is_active', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'requisites',
                'verbose_name': 'Реквизит',
                'verbose_name_plural': 'Реквизиты',
            },
        ),
        migrations.CreateModel(
            name='BotSetting',
            fields=[
                ('key', models.CharField(db_column='key', max_length=100, primary_key=True, serialize=False)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bot_settings',
                'verbose_name': 'Настройка бота (SQLite)',
                'verbose_name_plural': 'Настройки бота (SQLite)',
            },
        ),
        migrations.CreateModel(
            name='BotTopPayment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('position', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='top_payments', to='bot_control.botuser')),
            ],
            options={
                'db_table': 'top_payments',
                'verbose_name': 'Выплата топ рефералу',
                'verbose_name_plural': 'Выплаты топ рефералам',
            },
        ),
        migrations.CreateModel(
            name='BotUserData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data_type', models.CharField(db_index=True, max_length=255)),
                ('data_value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_data', to='bot_control.botuser')),
            ],
            options={
                'db_table': 'user_data',
                'verbose_name': 'Данные пользователя',
                'verbose_name_plural': 'Данные пользователей',
            },
        ),
        # Обновляем Meta опции для существующих моделей
        migrations.AlterModelOptions(
            name='bottransaction',
            options={'ordering': ['-created_at'], 'verbose_name': 'Транзакция', 'verbose_name_plural': 'Транзакции'},
        ),
        migrations.AlterModelOptions(
            name='botuser',
            options={'verbose_name': 'Пользователь бота', 'verbose_name_plural': 'Пользователи бота'},
        ),
        # Обновляем индексы BotReferral
        migrations.RemoveIndex(
            model_name='botreferral',
            name='referrals_referrer_idx',
        ),
        migrations.RemoveIndex(
            model_name='botreferral',
            name='referrals_referred_idx',
        ),
        migrations.AddIndex(
            model_name='botreferral',
            index=models.Index(fields=['referrer'], name='referrals_referre_f47e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='botreferral',
            index=models.Index(fields=['referred'], name='referrals_referre_e2a62f_idx'),
        ),
        # Добавляем индексы для новых моделей
        migrations.AddIndex(
            model_name='botrequisite',
            index=models.Index(fields=['is_active'], name='requisites_is_acti_5c7461_idx'),
        ),
        migrations.AddConstraint(
            model_name='botrequisite',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('is_active',), name='unique_active_requisite'),
        ),
        migrations.AddIndex(
            model_name='botreferralearning',
            index=models.Index(fields=['referrer', 'status'], name='referral_ea_referre_5e56af_idx'),
        ),
        migrations.AddIndex(
            model_name='botreferralearning',
            index=models.Index(fields=['referred'], name='referral_ea_referre_c3a3ab_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='botuserdata',
            unique_together={('user', 'data_type')},
        ),
    ]

