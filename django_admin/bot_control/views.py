from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
import json
import sqlite3
import requests
import os
from datetime import datetime
from .qr_api import api_get_qr_hashes, api_add_qr_hash, api_toggle_qr_hash, api_delete_qr_hash
from .models import BotConfiguration
from .models import TransactionLog
from django.db.models import Q, Sum, Count
from django.conf import settings
import subprocess
import sys
from .models import BankSettings, QRHash, BankWallet
from datetime import datetime, date
from typing import Dict, Any

def format_chart_date(date_string):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM"""
    try:
        date_obj = datetime.strptime(date_string, '%Y-%m-%d')
        return date_obj.strftime('%d.%m')
    except:
        return date_string


def broadcast_message(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return render(request, 'bot_control/broadcast.html')

def bot_management(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º - –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ"""
    return render(request, 'bot_control/bot_management.html')

def statistics(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return render(request, 'bot_control/statistics_mobile.html')


@csrf_exempt
def api_export_statistics(request):
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
    try:
        from bot_control.auto_deposit_models import AutoDepositRequest
        import csv
        from django.http import HttpResponse
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        date_from = request.GET.get('date_from')
        date_to = request.GET.get('date_to')
        bookmaker = request.GET.get('bookmaker')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        queryset = AutoDepositRequest.objects.all()
        
        if date_from:
            queryset = queryset.filter(created_at__gte=date_from)
        if date_to:
            queryset = queryset.filter(created_at__lte=date_to)
        if bookmaker:
            queryset = queryset.filter(bookmaker=bookmaker)
        
        # –°–æ–∑–¥–∞–µ–º CSV –æ—Ç–≤–µ—Ç
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="statistics_export.csv"'
        
        writer = csv.writer(response)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['ID', 'User ID', 'Username', 'Bookmaker', 'Account ID', 'Amount', 'Bank', 'Status', 'Created At', 'Updated At'])
        
        # –î–∞–Ω–Ω—ã–µ
        for req in queryset:
            writer.writerow([
                req.id,
                req.user_id,
                req.username,
                req.bookmaker,
                req.account_id,
                req.amount,
                req.bank,
                req.status,
                req.created_at.strftime('%Y-%m-%d %H:%M:%S') if req.created_at else '',
                req.updated_at.strftime('%Y-%m-%d %H:%M:%S') if req.updated_at else ''
            ])
        
        return response
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@csrf_exempt
def api_get_bot_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ (–¥–ª—è Next.js)"""
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return JsonResponse({
            'success': True,
            'data': {
                'is_active': True,
                'maintenance_message': 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'deposits_enabled': True,
                'withdrawals_enabled': True,
                'channel_subscription_required': False,
                'channel_username': '',
                'enabled_deposit_banks': ['mbank', 'bakai', 'balance', 'demir', 'omoney', 'megapay'],
                'enabled_withdrawal_banks': ['kompanion', 'odengi', 'bakai', 'balance', 'megapay', 'mbank']
            }
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@csrf_exempt
def api_save_bot_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ (–¥–ª—è Next.js)"""
    try:
        if request.method != 'POST':
            return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
        
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
        return JsonResponse({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


def bank_report(request):
    """–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º: –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –±–∞–Ω–∫–∞–º –∏ —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π.

    GET:
      - start: YYYY-MM-DD
      - end: YYYY-MM-DD
      - bank: –∫–æ–¥ –±–∞–Ω–∫–∞ (—Ñ–∏–ª—å—Ç—Ä)
    """
    start = (request.GET.get('start') or '').strip()
    end = (request.GET.get('end') or '').strip()
    bank_filter = (request.GET.get('bank') or '').strip()

    qs = TransactionLog.objects.all()
    if start:
        qs = qs.filter(timestamp__date__gte=start)
    if end:
        qs = qs.filter(timestamp__date__lte=end)
    if bank_filter:
        qs = qs.filter(bank__iexact=bank_filter)

    # –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –±–∞–Ω–∫–∞–º
    by_bank = (
        qs.values('bank')
          .annotate(total_amount=Sum('amount'), cnt=Count('id'))
          .order_by('bank')
    )
    total_amount = qs.aggregate(total=Sum('amount'))['total'] or 0
    total_count = qs.count()

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    items = list(qs.order_by('-timestamp')[:200])

    ctx = {
        'filters': {'start': start, 'end': end, 'bank': bank_filter},
        'by_bank': by_bank,
        'total_amount': float(total_amount),
        'total_count': total_count,
        'items': items,
    }
    return render(request, 'bot_control/bank_report.html', ctx)

@csrf_exempt
def api_bank_settings_list(request):
    """GET: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ –∏ –∏—Ö —Ñ–ª–∞–≥–æ–≤ (deposit/withdraw) –¥–ª—è UI."""
    if request.method != 'GET':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        items = [
            {
                'id': b.id,
                'bank_code': b.bank_code,
                'bank_name': b.bank_name,
                'is_enabled_deposit': bool(b.is_enabled_deposit),
                'is_enabled_withdraw': bool(b.is_enabled_withdraw),
            }
            for b in BankSettings.objects.all().order_by('bank_name')
        ]
        return JsonResponse({'success': True, 'banks': items})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)


@csrf_exempt
def api_bank_settings_toggle(request, bank_id: int):
    """POST: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ deposit/withdraw —É –±–∞–Ω–∫–∞.
    Body: { setting: 'deposit'|'withdraw', enabled: bool }
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        data = json.loads(request.body or '{}')
        setting = (data.get('setting') or '').strip()
        enabled = bool(data.get('enabled', True))
        b = BankSettings.objects.get(id=int(bank_id))
        if setting == 'deposit':
            b.is_enabled_deposit = enabled
        elif setting == 'withdraw':
            b.is_enabled_withdraw = enabled
        else:
            return JsonResponse({'success': False, 'error': 'invalid setting'}, status=400)
        b.save(update_fields=['is_enabled_deposit', 'is_enabled_withdraw', 'updated_at'])

        # –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞–µ–º–æ—Å—Ç—å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –±–∞–Ω–∫–∞ b,
        # –æ—Ç–∫–ª—é—á–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Demirbank (QRHash) –∏ –∫–æ—à–µ–ª—å–∫–∏ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤
        try:
            if setting == 'deposit' and enabled:
                from .models import BankWallet, QRHash, BankSettings
                # –í—ã–∫–ª—é—á–∏–º –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö
                BankSettings.objects.exclude(id=b.id).update(is_enabled_deposit=False)
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ QR Demirbank
                QRHash.objects.filter(is_active=True).update(is_active=False)
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤
                BankWallet.objects.exclude(bank_code=b.bank_code).update(is_active=False)
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —á–µ—Ä–µ–∑ Django ORM
                try:
                    from bot_control.models import BotRequisite
                    BotRequisite.objects.filter(is_active=True).update(is_active=False)
                except Exception:
                    pass
        except Exception:
            pass

        return JsonResponse({'success': True})
    except BankSettings.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'not found'}, status=404)
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

def payments_history(request):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–∑ Android-—Ö—É–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ä—É—á–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞.

    URL: /payments/
    GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: bank, status, start, end, q
    POST: { id, status } ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    """
    # Handle status change
    if request.method == 'POST':
        try:
            tid = int(request.POST.get('id') or 0)
            new_status = (request.POST.get('status') or '').strip()
            if tid and new_status in ('received', 'processed', 'error'):
                TransactionLog.objects.filter(id=tid).update(status=new_status)
        except Exception:
            pass

    # Filters
    bank = (request.GET.get('bank') or '').strip()
    status = (request.GET.get('status') or '').strip()
    start = (request.GET.get('start') or '').strip()
    end = (request.GET.get('end') or '').strip()
    query = (request.GET.get('q') or '').strip()

    qs = TransactionLog.objects.all().order_by('-created_at')
    if bank:
        qs = qs.filter(bank__iexact=bank)
    if status:
        qs = qs.filter(status=status)
    if start:
        qs = qs.filter(timestamp__date__gte=start)
    if end:
        qs = qs.filter(timestamp__date__lte=end)
    if query:
        qs = qs.filter(Q(raw_message__icontains=query) | Q(bank__icontains=query))

    # Simple pagination
    try:
        page = max(1, int(request.GET.get('page') or 1))
    except Exception:
        page = 1
    page_size = 50
    total = qs.count()
    items = list(qs[(page-1)*page_size: page*page_size])

    ctx = {
        'items': items,
        'total': total,
        'page': page,
        'page_size': page_size,
        'filters': {
            'bank': bank,
            'status': status,
            'start': start,
            'end': end,
            'q': query,
        }
    }
    return render(request, 'bot_control/payments.html', ctx)


def bank_management(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤–Ω–∏–∑—É"""
    # –ì—Ä—É–ø–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ –±–∞–Ω–∫–∞–º –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –±–ª–æ–∫–∞
    wallets = BankWallet.objects.all().order_by('bank_code', '-is_main', '-is_active', '-created_at')
    groups = {
        'mbank': [w for w in wallets if w.bank_code == 'mbank'],
        'bakai': [w for w in wallets if w.bank_code == 'bakai'],
        'optima': [w for w in wallets if w.bank_code == 'optima'],
    }
    qrhash = QRHash.objects.all().order_by('-is_main', '-is_active', '-created_at')
    return render(request, 'bot_control/bank_management.html', {
        'groups': groups,
        'qrhash': qrhash,
    })


def wallets_management(request):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ –±–∞–Ω–∫–æ–≤ (MBank/Bakai/Optima). –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –î–µ–º–∏—Ä–±–∞–Ω–∫–∞ (QRHash)."""
    message = None
    error = None
    
    if request.method == 'POST':
        action = request.POST.get('action')
        try:
            if action == 'create_wallet':
                bank_code = (request.POST.get('bank_code') or '').strip()
                account_name = (request.POST.get('account_name') or '').strip()
                hash_value = (request.POST.get('hash_value') or '').strip()
                is_active = bool(request.POST.get('is_active'))
                is_main = bool(request.POST.get('is_main'))
                if not bank_code or not account_name or not hash_value:
                    raise ValueError('–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–µ—à')
                w = BankWallet.objects.create(
                    bank_code=bank_code,
                    account_name=account_name,
                    hash_value=hash_value,
                    is_active=is_active,
                    is_main=is_main,
                )
                if is_main:
                    BankWallet.objects.filter(bank_code=bank_code, is_main=True).exclude(id=w.id).update(is_main=False)
                message = '–ö–æ—à–µ–ª—ë–∫ –¥–æ–±–∞–≤–ª–µ–Ω'
            elif action == 'toggle_active':
                wid = int(request.POST.get('id') or 0)
                w = BankWallet.objects.get(id=wid)
                w.is_active = not w.is_active
                w.save()
                message = '–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω—ë–Ω'
            elif action == 'set_main':
                wid = int(request.POST.get('id') or 0)
                w = BankWallet.objects.get(id=wid)
                BankWallet.objects.filter(bank_code=w.bank_code, is_main=True).exclude(id=w.id).update(is_main=False)
                w.is_main = True
                w.save()
                message = '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª—ë–∫ –≤—ã–±—Ä–∞–Ω'
            elif action == 'toggle_active_qr':
                qid = int(request.POST.get('id') or 0)
                q = QRHash.objects.get(id=qid)
                q.is_active = not q.is_active
                q.save(update_fields=['is_active','updated_at']) if hasattr(q, 'updated_at') else q.save()
                message = '–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Demirbank) –∏–∑–º–µ–Ω—ë–Ω'
            elif action == 'set_main_qr':
                qid = int(request.POST.get('id') or 0)
                q = QRHash.objects.get(id=qid)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ main –≤ QRHash
                QRHash.objects.filter(is_main=True).exclude(id=q.id).update(is_main=False)
                q.is_main = True
                q.save(update_fields=['is_main','updated_at']) if hasattr(q, 'updated_at') else q.save()
                message = '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª—ë–∫ Demirbank –≤—ã–±—Ä–∞–Ω'
        except Exception as e:
            error = str(e)

    wallets = BankWallet.objects.all().order_by('bank_code', '-is_main', '-is_active', '-created_at')
    groups = {
        'mbank': [w for w in wallets if w.bank_code == 'mbank'],
        'bakai': [w for w in wallets if w.bank_code == 'bakai'],
        'optima': [w for w in wallets if w.bank_code == 'optima'],
    }
    qrhash = QRHash.objects.all().order_by('-is_main', '-is_active', '-created_at')
    return render(request, 'bot_control/wallets.html', {
        'groups': groups,
        'qrhash': qrhash,
        'message': message,
        'error': error,
    })

# ===== API –¥–ª—è BankWallet (MBank/Bakai/Optima) =====
@csrf_exempt
def api_bank_wallets(request):
    """GET: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –±–∞–Ω–∫–æ–≤.

    –û—Ç–≤–µ—Ç: { success, items: [ {id, bank_code, account_name, hash_value, is_active, is_main, created_at} ] }
    """
    if request.method != 'GET':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        items = [
            {
                'id': w.id,
                'bank_code': w.bank_code,
                'account_name': w.account_name,
                'hash_value': w.hash_value,
                'is_active': bool(w.is_active),
                'is_main': bool(w.is_main),
                'created_at': w.created_at.isoformat(),
            }
            for w in BankWallet.objects.all().order_by('bank_code', '-is_main', '-is_active', '-created_at')
        ]
        return JsonResponse({'success': True, 'items': items, 'count': len(items)})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@csrf_exempt
def api_bank_wallets_create(request):
    """POST: —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫ –±–∞–Ω–∫–∞.
    Body: { bank_code: mbank|optima|bakai, account_name: str, hash_value: str, is_active?:bool, is_main?:bool }
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        data = json.loads(request.body or '{}')
        bank_code = str(data.get('bank_code') or '').strip()
        account_name = str(data.get('account_name') or '').strip()
        hash_value = str(data.get('hash_value') or '').strip()
        is_active = bool(data.get('is_active', True))
        is_main = bool(data.get('is_main', False))
        if bank_code not in ('mbank','optima','bakai'):
            return JsonResponse({'success': False, 'error': 'bank_code –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å mbank|optima|bakai'}, status=400)
        if not account_name or not hash_value:
            return JsonResponse({'success': False, 'error': '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ hash'}, status=400)
        w = BankWallet.objects.create(
            bank_code=bank_code,
            account_name=account_name,
            hash_value=hash_value,
            is_active=is_active,
            is_main=is_main,
        )
        if is_main:
            BankWallet.objects.filter(bank_code=bank_code, is_main=True).exclude(id=w.id).update(is_main=False)
        return JsonResponse({'success': True, 'id': w.id})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@csrf_exempt
def api_bank_wallets_toggle(request, wid: int):
    """POST: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞."""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        w = BankWallet.objects.get(id=wid)
        w.is_active = not w.is_active
        w.save(update_fields=['is_active','updated_at'])

        # –ï—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ –≤–∫–ª—é—á–∏–ª–∏ ‚Äî –¥–µ–ª–∞–µ–º –µ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –≤—ã–∫–ª—é—á–∞–µ–º Demirbank
        if w.is_active:
            try:
                from .models import BankWallet as BW2, QRHash as Q2
                BW2.objects.exclude(id=w.id).update(is_active=False)
                Q2.objects.filter(is_active=True).update(is_active=False)
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —á–µ—Ä–µ–∑ Django ORM
                try:
                    from bot_control.models import BotRequisite
                    BotRequisite.objects.filter(is_active=True).update(is_active=False)
                except Exception:
                    pass
            except Exception:
                pass

        return JsonResponse({'success': True, 'is_active': bool(w.is_active)})
    except BankWallet.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'Not found'}, status=404)
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@csrf_exempt
def api_bank_wallets_set_main(request, wid: int):
    """POST: —Å–¥–µ–ª–∞—Ç—å –∫–æ—à–µ–ª—ë–∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞."""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        w = BankWallet.objects.get(id=wid)
        BankWallet.objects.filter(bank_code=w.bank_code, is_main=True).exclude(id=w.id).update(is_main=False)
        w.is_main = True
        w.save(update_fields=['is_main','updated_at'])
        return JsonResponse({'success': True})
    except BankWallet.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'Not found'}, status=404)
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@csrf_exempt
def api_bank_wallets_delete(request, wid: int):
    """DELETE: —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª—ë–∫."""
    if request.method != 'DELETE':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        BankWallet.objects.filter(id=wid).delete()
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)


@csrf_exempt
def api_request_status(request, request_id: int):
    """–¢–∞–±–ª–∏—Ü–∞ requests –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É"""
    if request.method != 'GET':
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    return JsonResponse({'success': False, 'error': 'Requests table no longer exists'}, status=404)

def _parse_period(request):
    """–ß–∏—Ç–∞–µ—Ç ?start=YYYY-MM-DD&end=YYYY-MM-DD, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (start_date, end_date) –∏–ª–∏ (None, None)."""
    fmt = '%Y-%m-%d'
    start_s = request.GET.get('start')
    end_s = request.GET.get('end')
    start_d = None
    end_d = None
    try:
        if start_s:
            start_d = datetime.strptime(start_s, fmt).date()
        if end_s:
            end_d = datetime.strptime(end_s, fmt).date()
    except Exception:
        start_d, end_d = None, None
    return start_d, end_d

def _read_platform_stats(conn, bookmaker_key: str, start_d: date = None, end_d: date = None) -> Dict[str, Any]:
    from bot_control.models import Request
    from django.db.models import Sum, Count
    from django.utils import timezone
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Django ORM
    filters = {'bookmaker': bookmaker_key}
    
    if start_d:
        filters['created_at__date__gte'] = start_d
    if end_d:
        filters['created_at__date__lte'] = end_d
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests —á–µ—Ä–µ–∑ Django ORM
    deposit_stats = Request.objects.filter(
        request_type='deposit',
        **filters
    ).aggregate(
        total_amount=Sum('amount'),
        total_count=Count('id')
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–≤–æ–¥–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests —á–µ—Ä–µ–∑ Django ORM
    withdrawal_stats = Request.objects.filter(
        request_type='withdraw',
        **filters
    ).aggregate(
        total_amount=Sum('amount'),
        total_count=Count('id')
    )
    
    return {
        'deposits_sum': float(deposit_stats['total_amount'] or 0),
        'deposits_count': int(deposit_stats['total_count'] or 0),
        'withdrawals_sum': float(withdrawal_stats['total_amount'] or 0),
        'withdrawals_count': int(withdrawal_stats['total_count'] or 0)
    }

def _get_cashdesk_balance_xbet(cfg: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Å—Å—ã 1xbet —á–µ—Ä–µ–∑ CashdeskAPI"""
    try:
        from bot_control.cashdesk_api import CashdeskAPI
        api = CashdeskAPI(
            casino='1xbet',
            hash_key=cfg.get('hash', ''),
            cashierpass=cfg.get('cashierpass', ''),
            login=cfg.get('login', ''),
            cashdeskid=int(cfg.get('cashdeskid') or 0)
        )
        result = api.get_balance()
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é {'Balance': ..., 'Limit': ...} –∏–ª–∏ {'Balance': 0, 'Limit': 0} –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if isinstance(result, dict) and 'Balance' in result:
            return {
                'balance': float(result.get('Balance') or 0),
                'limit': float(result.get('Limit') or 0)
            }
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error getting 1xbet balance: {e}", exc_info=True)
    return {'balance': 0, 'limit': 0}

def _get_cashdesk_balance_mostbet(cfg: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã Mostbet —á–µ—Ä–µ–∑ MostbetAPI (–ª–∏–º–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ API)"""
    try:
        from bot_control.mostbet_api import MostbetAPI
        api = MostbetAPI(
            api_key=cfg.get('api_key', ''),
            secret=cfg.get('secret', ''),
            cashpoint_id=int(cfg.get('cashpoint_id') or 0)
        )
        result = api.get_balance()
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é {'balance': ..., 'currency': ...} –∏–ª–∏ {'balance': 0, 'currency': 'RUB'} –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if isinstance(result, dict) and 'balance' in result:
            balance = float(result.get('balance') or 0)
            return {
                'balance': balance,
                'limit': 0  # –õ–∏–º–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Mostbet Cash API
            }
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error getting Mostbet balance: {e}", exc_info=True)
    return {'balance': 0, 'limit': 0}

def _get_cashdesk_balance_melbet(cfg: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Å—Å—ã Melbet —á–µ—Ä–µ–∑ CashdeskAPI"""
    try:
        from bot_control.cashdesk_api import CashdeskAPI
        api = CashdeskAPI(
            casino='melbet',
            hash_key=cfg.get('hash', ''),
            cashierpass=cfg.get('cashierpass', ''),
            login=cfg.get('login', ''),
            cashdeskid=int(cfg.get('cashdeskid') or 0)
        )
        result = api.get_balance()
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é {'Balance': ..., 'Limit': ...} –∏–ª–∏ {'Balance': 0, 'Limit': 0} –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if isinstance(result, dict) and 'Balance' in result:
            return {
                'balance': float(result.get('Balance') or 0),
                'limit': float(result.get('Limit') or 0)
            }
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error getting Melbet balance: {e}", exc_info=True)
    return {'balance': 0, 'limit': 0}

def limits_dashboard(request):
    """–ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    start_d, end_d = _parse_period(request)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ casino_api_config
    try:
        from bot_control.casino_api_config import CASHDESK_CONFIG, MOSTBET_CONFIG
        
        # –ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è API
        x_cfg = CASHDESK_CONFIG.get('1xbet', {})
        m_cfg = CASHDESK_CONFIG.get('melbet', {})
        mb_cfg = MOSTBET_CONFIG.copy()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ –ª–∏–º–∏—Ç—ã
        x_bal = _get_cashdesk_balance_xbet(x_cfg)
        m_bal = _get_cashdesk_balance_melbet(m_cfg)
        mb_bal = _get_cashdesk_balance_mostbet(mb_cfg)
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error loading casino config: {e}")
        x_bal = {'balance': 0, 'limit': 0}
        m_bal = {'balance': 0, 'limit': 0}
        mb_bal = {'balance': 0, 'limit': 0}

    platform_limits = [
        {'key':'1xbet', 'name':'1xbet', 'limit': float(x_bal.get('limit') or 0)},
        {'key':'melbet','name':'Melbet','limit': float(m_bal.get('limit') or 0)},
        {'key':'1win','name':'1WIN','limit': 0.0},
        {'key':'mostbet','name':'Mostbet','limit': float(mb_bal.get('limit') or 0)},
    ]

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º
    filters = {}
    if start_d:
        filters['created_at__date__gte'] = start_d.date()
    if end_d:
        filters['created_at__date__lte'] = end_d.date()
    
    from bot_control.models import Request
    from django.db.models import Sum, Count
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    deposit_stats = Request.objects.filter(
        request_type='deposit',
        **filters
    ).aggregate(
        total_count=Count('id'),
        total_sum=Sum('amount')
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤
    withdrawal_stats = Request.objects.filter(
        request_type='withdraw',
        **filters
    ).aggregate(
        total_count=Count('id'),
        total_sum=Sum('amount')
    )
    
    total_deposits_count = deposit_stats['total_count'] or 0
    total_deposits_sum = float(deposit_stats['total_sum'] or 0)
    total_withdrawals_count = withdrawal_stats['total_count'] or 0
    total_withdrawals_sum = float(withdrawal_stats['total_sum'] or 0)
    
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: 8% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π + 2% –æ—Ç –≤—ã–≤–æ–¥–æ–≤
    approximate_income = (total_deposits_sum * 0.08) + (total_withdrawals_sum * 0.02)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞—Ç–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π)
    from django.db.models.functions import TruncDate
    from datetime import timedelta
    
    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    if not start_d or not end_d:
        end_date = timezone.now().date()
        start_date = end_date - timedelta(days=30)
    else:
        start_date = start_d.date()
        end_date = end_d.date()
    
    chart_filters = {'created_at__date__gte': start_date, 'created_at__date__lte': end_date}
    
    deposits_chart_all = list(Request.objects.filter(
        request_type='deposit',
        **chart_filters
    ).extra(
        select={'date': 'DATE(created_at)'}
    ).values('date').annotate(
        count=Count('id')
    ).order_by('date'))
    
    withdrawals_chart_all = list(Request.objects.filter(
        request_type='withdraw',
        **chart_filters
    ).extra(
        select={'date': 'DATE(created_at)'}
    ).values('date').annotate(
        count=Count('id')
    ).order_by('date'))
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    deposits_chart = deposits_chart_all[-10:] if len(deposits_chart_all) > 10 else deposits_chart_all
    withdrawals_chart = withdrawals_chart_all[-10:] if len(withdrawals_chart_all) > 10 else withdrawals_chart_all

    def format_chart_date(date_str):
        if isinstance(date_str, str):
            return timezone.datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m')
        return date_str.strftime('%d.%m') if hasattr(date_str, 'strftime') else str(date_str)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    deposits_labels = [format_chart_date(row['date']) for row in deposits_chart]
    deposits_data = [row['count'] for row in deposits_chart]
    withdrawals_labels = [format_chart_date(row['date']) for row in withdrawals_chart]
    withdrawals_data = [row['count'] for row in withdrawals_chart]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ—Ç–∫–∏ (–±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤)
    all_labels = sorted(list(set(deposits_labels + withdrawals_labels)))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—â–∏–º–∏ –º–µ—Ç–∫–∞–º–∏
    deposits_dict = dict(zip(deposits_labels, deposits_data))
    withdrawals_dict = dict(zip(withdrawals_labels, withdrawals_data))
    
    synchronized_deposits = [deposits_dict.get(label, 0) for label in all_labels]
    synchronized_withdrawals = [withdrawals_dict.get(label, 0) for label in all_labels]

    context = {
        'start': start_d.strftime('%Y-%m-%d') if start_d else '',
        'end': end_d.strftime('%Y-%m-%d') if end_d else '',
        'platform_limits': platform_limits,
        'total_deposits_count': total_deposits_count,
        'total_deposits_sum': total_deposits_sum,
        'total_withdrawals_count': total_withdrawals_count,
        'total_withdrawals_sum': total_withdrawals_sum,
        'approximate_income': approximate_income,
        'chart_labels_json': json.dumps(all_labels),
        'chart_deposits_json': json.dumps(synchronized_deposits),
        'chart_withdrawals_json': json.dumps(synchronized_withdrawals),
    }
    return render(request, 'bot_control/limits_mobile.html', context)

@csrf_exempt
def api_bot_status(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Django ORM"""
    try:
        from bot_control.models import BotSetting
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Django ORM
        try:
            is_active_setting = BotSetting.objects.get(key='is_active')
            is_active = bool(int(is_active_setting.value)) if is_active_setting.value else True
        except BotSetting.DoesNotExist:
            is_active = True
        
        try:
            maintenance_setting = BotSetting.objects.get(key='maintenance_message')
            maintenance_message = maintenance_setting.value or "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        except BotSetting.DoesNotExist:
            maintenance_message = "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        return JsonResponse({
            'is_active': is_active,
            'maintenance_message': maintenance_message
        })
        
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_debug_bot_settings(request):
    """–û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ Django ORM."""
    try:
        from bot_control.models import BotSetting
        
        def _get(key):
            try:
                setting = BotSetting.objects.get(key=key)
                return setting.value
            except BotSetting.DoesNotExist:
                return None
        
        data = {
            'bot_db_type': 'PostgreSQL',
            'withdrawals_enabled': _get('withdrawals_enabled'),
            'withdraw_banks': _get('withdraw_banks'),
            'deposits_enabled': _get('deposits_enabled'),
            'deposit_banks': _get('deposit_banks'),
        }
        return JsonResponse({'success': True, 'data': data})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@csrf_exempt
def api_list_qr_hashes(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ (QRHash) —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    –û—Ç–≤–µ—Ç: { wallets: [ {id, account_name, is_main, is_active} ], total:int }
    """
    try:
        from .models import QRHash
        qs = QRHash.objects.all().order_by('-is_main', '-is_active', 'account_name')
        wallets = [
            {
                'id': item.id,
                'account_name': item.account_name,
                'is_main': bool(item.is_main),
                'is_active': bool(item.is_active),
            }
            for item in qs
        ]
        return JsonResponse({ 'wallets': wallets, 'total': len(wallets) })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_set_bot_status(request):
    """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            is_active = data.get('is_active', True)
            maintenance_message = data.get('maintenance_message', '')
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –ë–î –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ Django ORM
            from bot_control.models import BotSetting
            
            BotSetting.objects.update_or_create(
                key='is_active',
                defaults={'value': '1' if is_active else '0'}
            )
            
            BotSetting.objects.update_or_create(
                key='maintenance_message',
                defaults={'value': maintenance_message}
            )
            
            return JsonResponse({'success': True, 'message': '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'})
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_send_broadcast(request):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            message = data.get('message', '')
            
            if not message:
                return JsonResponse({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Django ORM
            from bot_control.models import BotUser
            user_ids = list(BotUser.objects.values_list('user_id', flat=True))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            # –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –∏–∑ settings.BOT_TOKEN
            cfg_token = (BotConfiguration.get_setting('bot_token') or '').strip()
            settings_token = (getattr(settings, 'BOT_TOKEN', None) or '').strip()
            token_source = 'config' if cfg_token else 'settings'
            bot_token = cfg_token or settings_token
            if not bot_token:
                return JsonResponse({'success': False, 'error': 'BOT token is not configured. Set BotConfiguration key "bot_token" or settings.BOT_TOKEN.'}, status=400)
            success_count = 0
            error_count = 0
            
            for user_id in user_ids:
                try:
                    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                    payload = {
                        'chat_id': user_id,
                        'text': message,
                        'parse_mode': 'HTML'
                    }
                    
                    response = requests.post(url, json=payload, timeout=5)
                    if response.status_code == 200:
                        success_count += 1
                    else:
                        error_count += 1
                        
                except Exception:
                    error_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Django ORM
            from bot_control.models import BroadcastMessage
            from django.utils import timezone
            
            BroadcastMessage.objects.create(
                title=f"–†–∞—Å—Å—ã–ª–∫–∞ {timezone.now()}",
                message=message,
                is_sent=True,
                sent_at=timezone.now()
            )
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sent_count –∏ error_count –≤ –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            return JsonResponse({
                'success': True,
                'message': f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}'
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_statistics(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if request.method == 'GET':
        try:
            # –ò–º–ø–æ—Ä—Ç—ã
            from bot_control.models import Request
            from django.db.models import Sum, Count, Avg
            from django.utils import timezone
            
            # –§–∏–ª—å—Ç—Ä—ã
            date_from = request.GET.get('date_from')
            date_to = request.GET.get('date_to')
            bookmaker_filter = request.GET.get('bookmaker')

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞—è–≤–æ–∫
            total_users = Request.objects.values('user_id').distinct().count()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Django ORM
            filters = {}
            if date_from:
                filters['created_at__date__gte'] = date_from
            if date_to:
                filters['created_at__date__lte'] = date_to
            if bookmaker_filter:
                filters['bookmaker'] = bookmaker_filter

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —á–µ—Ä–µ–∑ Django ORM
            deposit_stats = Request.objects.filter(
                request_type='deposit',
                **filters
            ).aggregate(
                count=Count('id'),
                total_amount=Sum('amount'),
                avg_amount=Avg('amount')
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–≤–æ–¥–∞–º —á–µ—Ä–µ–∑ Django ORM
            withdrawal_stats = Request.objects.filter(
                request_type='withdraw',
                **filters
            ).aggregate(
                count=Count('id'),
                avg_amount=Avg('amount')
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
            users_with_deposits = Request.objects.filter(
                request_type='deposit',
                **filters
            ).values('user_id').distinct().count()

            total_deposits = deposit_stats['count'] or 0
            total_withdrawals = withdrawal_stats['count'] or 0
            total_amount = deposit_stats['total_amount'] or 0
            avg_deposit = deposit_stats['avg_amount'] or 0
            avg_withdrawal = withdrawal_stats['avg_amount'] or 0

            conversion_rate = (users_with_deposits / total_users * 100) if total_users > 0 else 0

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—É–∫–º–µ–∫–µ—Ä–∞–º —á–µ—Ä–µ–∑ Django ORM
            bookmakers = {}
            bookmaker_names = {
                '1xbet': 'üé∞ 1XBET',
                '1win': 'üé∞ 1WIN', 
                'melbet': 'üé∞ MELBET',
                'mostbet': 'üé∞ MOSTBET'
            }

            for bookmaker_key, bookmaker_name in bookmaker_names.items():
                if bookmaker_filter and bookmaker_filter != bookmaker_key:
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django ORM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±—É–∫–º–µ–∫–µ—Ä—É
                bookmaker_filters = filters.copy()
                bookmaker_filters['bookmaker'] = bookmaker_key
                
                dep_stats = Request.objects.filter(
                    request_type='deposit',
                    **bookmaker_filters
                ).aggregate(
                    count=Count('id'),
                    total_amount=Sum('amount')
                )
                w_stats = Request.objects.filter(
                    request_type='withdraw',
                    **bookmaker_filters
                ).aggregate(
                    count=Count('id'),
                    total_amount=Sum('amount')
                )
                
                d_count, d_sum = dep_stats['count'] or 0, dep_stats['total_amount'] or 0
                w_count, w_sum = w_stats['count'] or 0, w_stats['total_amount'] or 0

                bookmakers[bookmaker_key] = {
                    'name': bookmaker_name,
                    'deposits_count': d_count or 0,
                    'deposits_amount': d_sum or 0,
                    'withdrawals_count': w_count or 0,
                    'withdrawals_amount': w_sum or 0
                }

            # –ì—Ä–∞—Ñ–∏–∫–∏ (–ø–æ –¥–∞—Ç–∞–º) —á–µ—Ä–µ–∑ Django ORM
            from django.db.models.functions import TruncDate
            
            deposits_chart = list(Request.objects.filter(
                request_type='deposit',
                **filters
            ).extra(
                select={'date': 'DATE(created_at)'}
            ).values('date').annotate(
                count=Count('id')
            ).order_by('date')[:10])
            
            withdrawals_chart = list(Request.objects.filter(
                request_type='withdraw',
                **filters
            ).extra(
                select={'date': 'DATE(created_at)'}
            ).values('date').annotate(
                count=Count('id')
            ).order_by('date')[:10])

            return JsonResponse({
                'success': True,
                'general': {
                    'total_users': total_users,
                    'total_deposits': total_deposits,
                    'total_withdrawals': total_withdrawals,
                    'total_amount': total_amount,
                    'avg_deposit': round(avg_deposit, 2),
                    'avg_withdrawal': round(avg_withdrawal, 2),
                    'conversion_rate': round(conversion_rate, 1)
                },
                'bookmakers': list(bookmakers.values()),
                'charts': {
                    'deposits': {
                        'labels': [format_chart_date(row['date']) for row in deposits_chart],
                        'data': [row['count'] for row in deposits_chart]
                    },
                    'withdrawals': {
                        'labels': [format_chart_date(row['date']) for row in withdrawals_chart],
                        'data': [row['count'] for row in withdrawals_chart]
                    }
                }
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=500)
    
    return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_delete_bank(request, bank_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ BankSettings –ø–æ ID"""
    if request.method not in ('POST', 'DELETE'):
        return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)
    try:
        bank = BankSettings.objects.filter(id=bank_id).first()
        if not bank:
            return JsonResponse({'success': False, 'error': '–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        bank.delete()
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)


@csrf_exempt
def api_restart_bot(request):
    """API –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞"""
    if request.method == 'POST':
        try:
            import subprocess
            import sys
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –±–æ—Ç–∞
            bot_script_path = os.path.join(os.path.dirname(__file__), '..', '..', 'bot', 'main.py')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            if sys.platform.startswith('win'):
                # Windows
                subprocess.Popen([
                    'python', bot_script_path
                ], creationflags=subprocess.CREATE_NEW_CONSOLE)
            else:
                # Linux/Mac
                subprocess.Popen([
                    'python3', bot_script_path
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            return JsonResponse({
                'success': True,
                'message': '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞: {str(e)}'
            }, status=500)
    
    return JsonResponse({'success': False, 'error': 'Method not allowed'}, status=405)

def manual_deposit(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    return render(request, 'bot_control/manual_deposit_mobile.html')

@csrf_exempt
def api_1xbet_balance(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã 1XBET"""
    if request.method == 'GET':
        try:
            import hashlib
            import requests
            from datetime import datetime
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': '97f471a9db92debbda38201af67e15f64d086e94ae4b919d8a6a4f64958912cf',
                'cashierpass': 'wiaWAfE9',
                'cashdeskid': 1388580
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É
            now = datetime.now()
            dt = now.strftime('%Y.%m.%d %H:%M:%S')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{API_CONFIG['cashdeskid']}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # 1. SHA256 –¥–ª—è —Å—Ç—Ä–æ–∫–∏: hash={hash}&cashierpass={cashierpass}&dt={dt}
            sign_string1 = f"hash={API_CONFIG['hash']}&cashierpass={API_CONFIG['cashierpass']}&dt={dt}"
            sign1 = sha256(sign_string1)
            
            # 2. MD5 –¥–ª—è —Å—Ç—Ä–æ–∫–∏: dt={dt}&cashierpass={cashierpass}&cashdeskid={cashdeskid}
            sign_string2 = f"dt={dt}&cashierpass={API_CONFIG['cashierpass']}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign2 = md5(sign_string2)
            
            # 3. SHA256 –æ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Cashdesk/{API_CONFIG['cashdeskid']}/Balance?confirm={confirm}&dt={dt}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_1xbet_search_player(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ 1XBET"""
    if request.method == 'POST':
        try:
            import hashlib
            import requests
            
            data = json.loads(request.body)
            user_id = data.get('user_id')
            
            if not user_id:
                return JsonResponse({'error': 'user_id is required'}, status=400)
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': '97f471a9db92debbda38201af67e15f64d086e94ae4b919d8a6a4f64958912cf',
                'cashierpass': 'wiaWAfE9',
                'cashdeskid': 1388580
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{user_id}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # 1. SHA256 –¥–ª—è —Å—Ç—Ä–æ–∫–∏: hash={hash}&userid={userid}&cashdeskid={cashdeskid}
            sign_string1 = f"hash={API_CONFIG['hash']}&userid={user_id}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign1 = sha256(sign_string1)
            
            # 2. MD5 –¥–ª—è —Å—Ç—Ä–æ–∫–∏: userid={userid}&cashierpass={cashierpass}&hash={hash}
            sign_string2 = f"userid={user_id}&cashierpass={API_CONFIG['cashierpass']}&hash={API_CONFIG['hash']}"
            sign2 = md5(sign_string2)
            
            # 3. SHA256 –æ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Users/{user_id}?confirm={confirm}&cashdeskId={API_CONFIG['cashdeskid']}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_1xbet_deposit(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ 1XBET —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ bot/api_clients."""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    try:
        from django.conf import settings
        # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ–∫–µ–Ω‚Äë–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–µ—Å—Å–∏–∏: Authorization: Token <DJANGO_ADMIN_API_TOKEN>
        expected = getattr(settings, 'DJANGO_ADMIN_API_TOKEN', '')
        auth = request.headers.get('Authorization', '')
        if expected:
            if not (auth == f'Token {expected}' or request.user.is_authenticated):
                return JsonResponse({'error': 'Unauthorized'}, status=401)

        data = json.loads(request.body or '{}')
        user_id = str(data.get('user_id') or '').strip()
        amount = data.get('amount')
        try:
            amount = float(amount)
        except Exception:
            amount = None

        if not user_id or amount is None:
            return JsonResponse({'error': 'user_id and amount are required'}, status=400)

        # –ö–æ–Ω—Ñ–∏–≥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ bot.config.BOOKMAKERS['1xbet']['api_config'],
        # –∑–∞—Ç–µ–º –∏–∑ settings.*
        api_cfg = {}
        try:
            from bot.config import BOOKMAKERS as BOT_BM
            api_cfg = (BOT_BM.get('1xbet') or BOT_BM.get('1XBET') or {}).get('api_config', {}) or {}
        except Exception:
            api_cfg = {}
        def _get(name, default=''):
            return api_cfg.get(name) or getattr(settings, f'XBET_{name.upper()}', default)
        # cashdeskid –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
        cashdeskid_val = _get('cashdeskid', 1388580)
        try:
            cashdeskid_val = int(cashdeskid_val)
        except Exception:
            pass
        cfg = {
            'hash': _get('hash', '97f471a9db92debbda38201af67e15f64d086e94ae4b919d8a6a4f64958912cf'),
            'cashierpass': _get('cashierpass', 'wiaWAfE9'),
            'login': _get('login', ''),
            'cashdeskid': cashdeskid_val,
        }

        from bot.api_clients.onexbet_client import OneXBetAPIClient
        client = OneXBetAPIClient(cfg)
        result = client.deposit(user_id=user_id, amount=amount)
        status_ok = bool(result.get('success'))
        if status_ok:
            return JsonResponse(result)
        return JsonResponse({'error': result.get('error') or result.get('message') or 'API Error', 'data': result}, status=502)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

# 1WIN API Views
def onewin_api(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1WIN API"""
    return render(request, 'bot_control/1win_api.html')

@csrf_exempt
def api_1win_deposit(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ 1WIN (—á–µ—Ä–µ–∑ bot/api_clients/onewin_client.py)"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    try:
        from django.conf import settings
        expected = getattr(settings, 'DJANGO_ADMIN_API_TOKEN', '')
        auth = request.headers.get('Authorization', '')
        if expected:
            if not (auth == f'Token {expected}' or request.user.is_authenticated):
                return JsonResponse({'error': 'Unauthorized'}, status=401)

        data = json.loads(request.body or '{}')
        user_id = str(data.get('user_id') or data.get('account_id') or '').strip()
        amount = data.get('amount')
        try:
            amount = float(amount)
        except Exception:
            amount = None
        if not user_id or amount is None:
            return JsonResponse({'error': 'user_id and amount are required'}, status=400)

        # –ë–µ—Ä—ë–º api_key –∏–∑ bot.config
        api_cfg = {}
        try:
            from bot.config import BOOKMAKERS as BOT_BM
            api_cfg = (BOT_BM.get('1win') or BOT_BM.get('1WIN') or {}).get('api_config', {}) or {}
        except Exception:
            api_cfg = {}
        from bot.api_clients.onewin_client import OneWinAPIClient
        client = OneWinAPIClient({'api_key': api_cfg.get('api_key', '')})
        result = client.deposit(int(user_id) if user_id.isdigit() else user_id, amount)
        if result.get('success'):
            return JsonResponse(result)
        return JsonResponse({'error': result.get('error') or 'API Error', 'data': result}, status=502)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_1win_withdrawal(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ 1WIN"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            api_key = data.get('api_key')
            user_id = data.get('user_id')
            code = data.get('code')
            
            if not api_key or not user_id or not code:
                return JsonResponse({'error': 'api_key, user_id and code are required'}, status=400)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ 1WIN API
            url = 'https://api.1win.win/v1/client/withdrawal'
            headers = {
                'X-API-KEY': api_key,
                'Content-Type': 'application/json'
            }
            body = {
                'userId': user_id,
                'code': code
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(url, headers=headers, json=body, timeout=10)
            
            if response.status_code == 200:
                response_data = response.json()
                return JsonResponse({
                    'success': True,
                    'id': response_data.get('id'),
                    'cashId': response_data.get('cashId'),
                    'amount': response_data.get('amount'),
                    'userId': response_data.get('userId')
                })
            else:
                error_data = response.json() if response.content else {}
                return JsonResponse({
                    'success': False,
                    'error': error_data.get('message', f'HTTP {response.status_code}'),
                    'status_code': response.status_code
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

# MELBET API Views
@csrf_exempt
def api_melbet_balance(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã MELBET"""
    if request.method == 'GET':
        try:
            import hashlib
            import requests
            from datetime import datetime
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MELBET
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': 'd34f03473c467b538f685f933b2dc7a3ea8c877901231235693c10be014eb6f4',
                'cashierpass': 'd1WRq!ke',
                'cashdeskid': 1390018
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É
            now = datetime.now()
            dt = now.strftime('%Y.%m.%d %H:%M:%S')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{API_CONFIG['cashdeskid']}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            sign_string1 = f"hash={API_CONFIG['hash']}&cashierpass={API_CONFIG['cashierpass']}&dt={dt}"
            sign1 = sha256(sign_string1)
            
            sign_string2 = f"dt={dt}&cashierpass={API_CONFIG['cashierpass']}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign2 = md5(sign_string2)
            
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Cashdesk/{API_CONFIG['cashdeskid']}/Balance?confirm={confirm}&dt={dt}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_melbet_search_player(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ MELBET"""
    if request.method == 'POST':
        try:
            import hashlib
            import requests
            
            data = json.loads(request.body)
            user_id = data.get('user_id')
            
            if not user_id:
                return JsonResponse({'error': 'user_id is required'}, status=400)
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MELBET
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': 'd34f03473c467b538f685f933b2dc7a3ea8c877901231235693c10be014eb6f4',
                'cashierpass': 'd1WRq!ke',
                'cashdeskid': 1390018
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{user_id}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            sign_string1 = f"hash={API_CONFIG['hash']}&userid={user_id}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign1 = sha256(sign_string1)
            
            sign_string2 = f"userid={user_id}&cashierpass={API_CONFIG['cashierpass']}&hash={API_CONFIG['hash']}"
            sign2 = md5(sign_string2)
            
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Users/{user_id}?confirm={confirm}&cashdeskId={API_CONFIG['cashdeskid']}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_melbet_deposit(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è MELBET (—á–µ—Ä–µ–∑ bot/api_clients/melbet_client.py)"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    try:
        from django.conf import settings
        expected = getattr(settings, 'DJANGO_ADMIN_API_TOKEN', '')
        auth = request.headers.get('Authorization', '')
        if expected:
            if not (auth == f'Token {expected}' or request.user.is_authenticated):
                return JsonResponse({'error': 'Unauthorized'}, status=401)

        data = json.loads(request.body or '{}')
        user_id = str(data.get('user_id') or data.get('account_id') or '').strip()
        amount = data.get('amount')
        try:
            amount = float(amount)
        except Exception:
            amount = None
        if not user_id or amount is None:
            return JsonResponse({'error': 'user_id and amount are required'}, status=400)

        api_cfg = {}
        try:
            from bot.config import BOOKMAKERS as BOT_BM
            api_cfg = (BOT_BM.get('melbet') or BOT_BM.get('MELBET') or {}).get('api_config', {}) or {}
        except Exception:
            api_cfg = {}
        from bot.api_clients.melbet_client import MelbetAPIClient
        client = MelbetAPIClient({
            'hash': api_cfg.get('hash', ''),
            'cashierpass': api_cfg.get('cashierpass', ''),
            'login': api_cfg.get('login', ''),
            'cashdeskid': api_cfg.get('cashdeskid', 0),
        })
        result = client.deposit(user_id, amount)
        if result.get('success'):
            return JsonResponse(result)
        return JsonResponse({'error': result.get('error') or result.get('message') or 'API Error', 'data': result}, status=502)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

# MOSTBET API Views
@csrf_exempt
def api_mostbet_balance(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã MOSTBET"""
    if request.method == 'GET':
        try:
            import hashlib
            import requests
            from datetime import datetime
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MOSTBET (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': 'MOSTBET_HASH_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π hash
                'cashierpass': 'MOSTBET_PASSWORD_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                'cashdeskid': 0  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞—Å—Å—ã
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É
            now = datetime.now()
            dt = now.strftime('%Y.%m.%d %H:%M:%S')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{API_CONFIG['cashdeskid']}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            sign_string1 = f"hash={API_CONFIG['hash']}&cashierpass={API_CONFIG['cashierpass']}&dt={dt}"
            sign1 = sha256(sign_string1)
            
            sign_string2 = f"dt={dt}&cashierpass={API_CONFIG['cashierpass']}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign2 = md5(sign_string2)
            
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Cashdesk/{API_CONFIG['cashdeskid']}/Balance?confirm={confirm}&dt={dt}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_mostbet_search_player(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ MOSTBET"""
    if request.method == 'POST':
        try:
            import hashlib
            import requests
            
            data = json.loads(request.body)
            user_id = data.get('user_id')
            
            if not user_id:
                return JsonResponse({'error': 'user_id is required'}, status=400)
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MOSTBET (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': 'MOSTBET_HASH_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π hash
                'cashierpass': 'MOSTBET_PASSWORD_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                'cashdeskid': 0  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞—Å—Å—ã
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{user_id}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            sign_string1 = f"hash={API_CONFIG['hash']}&userid={user_id}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign1 = sha256(sign_string1)
            
            sign_string2 = f"userid={user_id}&cashierpass={API_CONFIG['cashierpass']}&hash={API_CONFIG['hash']}"
            sign2 = md5(sign_string2)
            
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{API_CONFIG['base_url']}Users/{user_id}?confirm={confirm}&cashdeskId={API_CONFIG['cashdeskid']}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers={'sign': sign}, timeout=10)
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_mostbet_deposit(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è MOSTBET (—á–µ—Ä–µ–∑ bot/api_clients/mostbet_client.py)"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)
    try:
        from django.conf import settings
        expected = getattr(settings, 'DJANGO_ADMIN_API_TOKEN', '')
        auth = request.headers.get('Authorization', '')
        if expected:
            if not (auth == f'Token {expected}' or request.user.is_authenticated):
                return JsonResponse({'error': 'Unauthorized'}, status=401)

        data = json.loads(request.body or '{}')
        user_id = str(data.get('user_id') or data.get('account_id') or '').strip()
        amount = data.get('amount')
        try:
            amount = float(amount)
        except Exception:
            amount = None
        if not user_id or amount is None:
            return JsonResponse({'error': 'user_id and amount are required'}, status=400)

        api_cfg = {}
        try:
            from bot.config import BOOKMAKERS as BOT_BM
            api_cfg = (BOT_BM.get('mostbet') or BOT_BM.get('MOSTBET') or {}).get('api_config', {}) or {}
        except Exception:
            api_cfg = {}
        from bot.api_clients.mostbet_client import MostbetAPI
        client = MostbetAPI({
            'api_key': api_cfg.get('api_key', ''),
            'secret': api_cfg.get('secret', ''),
            'cashpoint_id': api_cfg.get('cashpoint_id', ''),
        })

        import asyncio
        async def _run():
            return await client.deposit_user(user_id, amount, currency='KGS')
        data_resp = asyncio.run(_run())
        if data_resp:
            return JsonResponse({'success': True, 'data': data_resp})
        return JsonResponse({'error': 'API Error', 'data': None}, status=502)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_mostbet_withdrawal(request):
    """API –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã —Å–æ —Å—á–µ—Ç–∞ MOSTBET"""
    if request.method == 'POST':
        try:
            import hashlib
            import requests
            
            data = json.loads(request.body)
            user_id = data.get('user_id')
            code = data.get('code')
            
            if not user_id or not code:
                return JsonResponse({'error': 'user_id and code are required'}, status=400)
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MOSTBET (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
            API_CONFIG = {
                'base_url': 'https://partners.servcul.com/CashdeskBotAPI/',
                'hash': 'MOSTBET_HASH_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π hash
                'cashierpass': 'MOSTBET_PASSWORD_HERE',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                'cashdeskid': 0  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞—Å—Å—ã
            }
            
            def sha256(text):
                return hashlib.sha256(text.encode()).hexdigest()
            
            def md5(text):
                return hashlib.md5(text.encode()).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º confirm
            confirm = md5(f"{user_id}:{API_CONFIG['hash']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            sign_string1 = f"hash={API_CONFIG['hash']}&lng=ru&UserId={user_id}"
            sign1 = sha256(sign_string1)
            
            sign_string2 = f"code={code}&cashierpass={API_CONFIG['cashierpass']}&cashdeskid={API_CONFIG['cashdeskid']}"
            sign2 = md5(sign_string2)
            
            sign = sha256(sign1 + sign2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            url = f"{API_CONFIG['base_url']}Deposit/{user_id}/Payout"
            body = {
                "cashdeskId": API_CONFIG['cashdeskid'],
                "lng": "ru",
                "code": code,
                "confirm": confirm
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                url, 
                headers={
                    'sign': sign,
                    'Content-Type': 'application/json'
                },
                json=body,
                timeout=10
            )
            
            if response.status_code == 200:
                return JsonResponse(response.json())
            else:
                return JsonResponse({
                    'error': 'API Error',
                    'status': response.status_code,
                    'message': response.text
                }, status=response.status_code)
                
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

def unified_api(request):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API –±—É–∫–º–µ–∫–µ—Ä–æ–≤"""
    return render(request, 'bot_control/unified_api_mobile.html')

@csrf_exempt
def api_export_statistics(request):
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"""
    if request.method == 'GET':
        try:
            import pandas as pd
            from io import BytesIO
            from django.http import HttpResponse
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            date_from = request.GET.get('date_from')
            date_to = request.GET.get('date_to')
            bookmaker = request.GET.get('bookmaker')
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'bot', 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è WHERE
            where_conditions = []
            params = []
            
            if date_from:
                where_conditions.append("DATE(created_at) >= ?")
                params.append(date_from)
            
            if date_to:
                where_conditions.append("DATE(created_at) <= ?")
                params.append(date_to)
            
            if bookmaker:
                where_conditions.append("bookmaker = ?")
                params.append(bookmaker)
            
            where_clause = ""
            if where_conditions:
                where_clause = "WHERE " + " AND ".join(where_conditions)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            query = f'''
                SELECT 
                    t.id,
                    t.user_id,
                    u.username,
                    t.bookmaker,
                    t.type,
                    t.amount,
                    t.status,
                    t.created_at
                FROM transactions t
                LEFT JOIN users u ON t.user_id = u.id
                {where_clause}
                ORDER BY t.created_at DESC
            '''
            
            df = pd.read_sql_query(query, conn, params=params)
            conn.close()
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # –õ–∏—Å—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                df.to_excel(writer, sheet_name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', index=False)
                
                # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                stats_data = {
                    '–ú–µ—Ç—Ä–∏–∫–∞': [
                        '–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                        '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                        '–í—ã–≤–æ–¥–æ–≤',
                        '–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                        '–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤',
                        '–°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç',
                        '–°—Ä–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥'
                    ],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                        len(df),
                        len(df[df['type'] == 'deposit']),
                        len(df[df['type'] == 'withdrawal']),
                        df[df['type'] == 'deposit']['amount'].sum(),
                        df[df['type'] == 'withdrawal']['amount'].sum(),
                        df[df['type'] == 'deposit']['amount'].mean(),
                        df[df['type'] == 'withdrawal']['amount'].mean()
                    ]
                }
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            output.seek(0)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
            response = HttpResponse(
                output.getvalue(),
                content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            response['Content-Disposition'] = f'attachment; filename="statistics_{timezone.now().strftime("%Y%m%d")}.xlsx"'
            
            return response
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

def broadcast_history(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    return render(request, 'bot_control/broadcast_history.html')

@csrf_exempt
def api_broadcast_history(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if request.method == 'GET':
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Django –ø—Ä–æ–µ–∫—Ç–∞
            db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'bot', 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS broadcast_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    sent_count INTEGER DEFAULT 0,
                    error_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫
            cursor.execute('''
                SELECT id, message, sent_count, error_count, created_at
                FROM broadcast_history
                ORDER BY created_at DESC
                LIMIT 50
            ''')
            
            broadcasts = []
            for row in cursor.fetchall():
                broadcasts.append({
                    'id': row[0],
                    'message': row[1],
                    'sent_count': row[2],
                    'error_count': row[3],
                    'created_at': row[4]
                })
            
            conn.close()
            
            return JsonResponse({
                'success': True,
                'broadcasts': broadcasts
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

# Bank Management API functions
@csrf_exempt
def api_get_bank_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–Ω–∫–æ–≤"""
    if request.method == 'GET':
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Django –ø—Ä–æ–µ–∫—Ç–∞
            db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'bot', 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, bank_code, bank_name, is_enabled_deposit, is_enabled_withdraw, 
                       url_template, icon, created_at, updated_at
                FROM bot_control_banksettings
                ORDER BY bank_name
            ''')
            
            data = []
            for row in cursor.fetchall():
                data.append({
                    'id': row[0],
                    'bank_code': row[1],
                    'bank_name': row[2],
                    'is_enabled_deposit': bool(row[3]),
                    'is_enabled_withdraw': bool(row[4]),
                    'url_template': row[5],
                    'icon': row[6],
                    'created_at': row[7],
                    'updated_at': row[8]
                })
            
            conn.close()
            
            return JsonResponse({
                'success': True,
                'banks': data
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            })

@csrf_exempt
def api_toggle_bank_setting(request, bank_id):
    """API –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–Ω–∫–∞"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            setting = data.get('setting')  # 'deposit' –∏–ª–∏ 'withdraw'
            enabled = data.get('enabled', False)
            
            if setting not in ['deposit', 'withdraw']:
                return JsonResponse({
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä setting'
                })
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Django –ø—Ä–æ–µ–∫—Ç–∞
            db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'bot', 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            if setting == 'deposit':
                cursor.execute('''
                    UPDATE bot_control_banksettings 
                    SET is_enabled_deposit = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (1 if enabled else 0, bank_id))
            else:  # withdraw
                cursor.execute('''
                    UPDATE bot_control_banksettings 
                    SET is_enabled_withdraw = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (1 if enabled else 0, bank_id))
            
            conn.commit()
            conn.close()
            
            return JsonResponse({
                'success': True,
                'enabled': enabled
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            })




@csrf_exempt
def api_get_bank_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–Ω–∫–æ–≤"""
    try:
        settings = {
            'deposit_banks': BotConfiguration.get_setting('deposits', {}).get('banks', ['mbank', 'bakai', 'balance', 'demir', 'omoney', 'megapay']),
            'withdrawal_banks': BotConfiguration.get_setting('withdrawals', {}).get('banks', ['kompanion', 'odengi', 'bakai', 'balance', 'megapay', 'mbank'])
        }
        return JsonResponse(settings)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_bank_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–Ω–∫–æ–≤"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        deposits = BotConfiguration.get_setting('deposits', {'enabled': True, 'banks': []})
        withdrawals = BotConfiguration.get_setting('withdrawals', {'enabled': True, 'banks': []})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫–∏
        deposits['banks'] = data.get('deposit_banks', [])
        withdrawals['banks'] = data.get('withdrawal_banks', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        BotConfiguration.set_setting('deposits', deposits, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤')
        BotConfiguration.set_setting('withdrawals', withdrawals, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–æ–≤')
        
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_deposit_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    try:
        import json
        settings_str = BotConfiguration.get_setting('deposits', '{"enabled": true, "banks": ["mbank", "bakai", "balance", "demir", "omoney", "megapay"]}')
        settings = json.loads(settings_str) if isinstance(settings_str, str) else settings_str
        return JsonResponse(settings)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_deposit_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        settings = {
            'enabled': data.get('enabled', True),
            'banks': data.get('banks', [])
        }
        
        BotConfiguration.set_setting('deposits', json.dumps(settings), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤')
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_payment_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞"""
    try:
        import json
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        deposits_str = BotConfiguration.get_setting('deposits', '{"enabled": true, "banks": ["mbank", "bakai", "balance", "demir", "omoney", "megapay"]}')
        deposits = json.loads(deposits_str) if isinstance(deposits_str, str) else deposits_str
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–æ–≤
        withdrawals_str = BotConfiguration.get_setting('withdrawals', '{"enabled": true, "banks": ["kompanion", "odengi", "bakai", "balance", "megapay", "mbank"]}')
        withdrawals = json.loads(withdrawals_str) if isinstance(withdrawals_str, str) else withdrawals_str
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∑–∏–Ω–æ
        casinos_str = BotConfiguration.get_setting('casinos', '{"1xbet": true, "1win": true, "melbet": true, "mostbet": true}')
        casinos = json.loads(casinos_str) if isinstance(casinos_str, str) else casinos_str
        
        # –ú–∞–ø–ø–∏–Ω–≥ –±–∞–Ω–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞
        bank_mapping = {
            'mbank': {'name': 'MBank', 'logo': '/static/images/mbank.png'},
            'demir': {'name': 'DemirBank', 'logo': '/static/images/demirbank.jpg'},
            'balance': {'name': 'Balance.kg', 'logo': '/static/images/balance.jpg'},
            'omoney': {'name': 'O!Money', 'logo': '/static/images/omoney.jpg'},
            'megapay': {'name': 'MegaPay', 'logo': '/static/images/megapay.jpg'},
            'bakai': {'name': 'Bakai', 'logo': '/static/images/bakai.jpg'},
            'kompanion': {'name': '–ö–æ–º–ø–∞–Ω—å–æ–Ω', 'logo': '/static/images/companion.png'},
            'odengi': {'name': 'O!Money', 'logo': '/static/images/omoney.jpg'}
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'deposits': {
                'enabled': deposits.get('enabled', True),
                'banks': []
            },
            'withdrawals': {
                'enabled': withdrawals.get('enabled', True),
                'banks': []
            },
            'casinos': {
                '1xbet': casinos.get('1xbet', True),
                '1win': casinos.get('1win', True),
                'melbet': casinos.get('melbet', True),
                'mostbet': casinos.get('mostbet', True)
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–∞—Ö –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        for bank_code in deposits.get('banks', []):
            if bank_code in bank_mapping:
                response['deposits']['banks'].append({
                    'code': bank_code,
                    'name': bank_mapping[bank_code]['name'],
                    'logo': bank_mapping[bank_code]['logo']
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–∞—Ö –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
        for bank_code in withdrawals.get('banks', []):
            if bank_code in bank_mapping:
                response['withdrawals']['banks'].append({
                    'code': bank_code,
                    'name': bank_mapping[bank_code]['name'],
                    'logo': bank_mapping[bank_code]['logo']
                })
        
        return JsonResponse(response)
        
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_withdrawal_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–≤–æ–¥–æ–≤"""
    try:
        withdrawals_str = BotConfiguration.get_setting('withdrawals', '{"enabled": true, "banks": ["kompanion", "odengi", "bakai", "balance", "megapay", "mbank"]}')
        withdrawals = json.loads(withdrawals_str) if isinstance(withdrawals_str, str) else withdrawals_str
        
        return JsonResponse({
            'success': True,
            'data': {
                'enabled': withdrawals.get('enabled', True),
                'banks': withdrawals.get('banks', [])
            }
        })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_withdrawal_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–≤–æ–¥–æ–≤"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        settings = {
            'enabled': data.get('enabled', True),
            'banks': data.get('banks', [])
        }
        
        BotConfiguration.set_setting('withdrawals', json.dumps(settings), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–æ–≤')
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_bot_control(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        deposit_settings = BotConfiguration.get_setting('deposit_settings', {})
        if isinstance(deposit_settings, str):
            import json
            deposit_settings = json.loads(deposit_settings)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–æ–≤
        withdrawal_settings = BotConfiguration.get_setting('withdrawal_settings', {})
        if isinstance(withdrawal_settings, str):
            import json
            withdrawal_settings = json.loads(withdrawal_settings)
        
        settings = {
            'success': True,
            'data': {
                'pause': BotConfiguration.get_setting('pause', False),
                'maintenance_message': BotConfiguration.get_setting('maintenance_message', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
                'deposits_enabled': deposit_settings.get('enabled', True),
                'withdrawals_enabled': withdrawal_settings.get('enabled', True),
                'enabled_deposit_banks': deposit_settings.get('enabled_banks', ['DemirBank', 'O!bank', 'Balance.kg', 'Bakai', 'MegaPay', 'MBank'])
            }
        }
        return JsonResponse(settings)
    except Exception as e:
        return JsonResponse({'error': str(e), 'success': False}, status=500)

@csrf_exempt
def api_save_bot_control(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        BotConfiguration.set_setting('pause', data.get('pause', False), '–ü–∞—É–∑–∞ –±–æ—Ç–∞')
        BotConfiguration.set_setting('maintenance_message', data.get('maintenance_message', ''), '–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö')
        
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_channel_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    try:
        import json
        settings_str = BotConfiguration.get_setting('channel', '{"enabled": false, "name": "@bingokg_news", "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."}')
        settings = json.loads(settings_str) if isinstance(settings_str, str) else settings_str
        return JsonResponse(settings)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_channel_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        settings = {
            'enabled': data.get('enabled', False),
            'name': data.get('name', '@bingokg_news'),
            'channel_id': data.get('channel_id', ''),
            'channel_username': data.get('channel_username', '')
        }
        
        BotConfiguration.set_setting('channel', json.dumps(settings), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞')
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_get_casino_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∑–∏–Ω–æ"""
    try:
        import json
        settings_str = BotConfiguration.get_setting('casinos', '{"1xbet": true, "1win": true, "melbet": true, "mostbet": true}')
        settings = json.loads(settings_str) if isinstance(settings_str, str) else settings_str
        return JsonResponse(settings)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_casino_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∑–∏–Ω–æ"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        
        settings = {
            '1xbet': data.get('1xbet', True),
            '1win': data.get('1win', True),
            'melbet': data.get('melbet', True),
            'mostbet': data.get('mostbet', True)
        }
        
        BotConfiguration.set_setting('casinos', json.dumps(settings), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∑–∏–Ω–æ')
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_qr_hash(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR —Ö–µ—à–∞"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    try:
        data = json.loads(request.body)
        QRHash.objects.create(
            hash_value=data.get('hash'),
            bank_name=data.get('bank', 'Unknown'),
            is_active=data.get('active', True)
        )
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_delete_qr_hash(request, hash_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è QR —Ö–µ—à–∞"""
    if request.method != 'DELETE':
        return JsonResponse({'error': 'Only DELETE method allowed'}, status=405)
    
    try:
        QRHash.objects.get(id=hash_id).delete()
        return JsonResponse({'success': True})
    except QRHash.DoesNotExist:
        return JsonResponse({'error': 'Hash not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_save_bank_settings(request):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–Ω–∫–∞"""
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST method allowed'}, status=405)
    
    try:
        data = json.loads(request.body)
        bank, created = BankSettings.objects.get_or_create(
            name=data.get('name', 'Unknown'),
            defaults={
                'is_active': data.get('active', True),
                'min_amount': data.get('min_amount', 0),
                'max_amount': data.get('max_amount', 1000000)
            }
        )
        if not created:
            bank.is_active = data.get('active', True)
            bank.min_amount = data.get('min_amount', 0)
            bank.max_amount = data.get('max_amount', 1000000)
            bank.save()
        
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_qr_hashes(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ QR —Ö–µ—à–µ–π"""
    try:
        from .models import QRHash
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ö–µ—à–∏
        hashes = QRHash.objects.filter(is_active=True).values('account_name', 'hash_value', 'is_main')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        main_hash = hashes.filter(is_main=True).first()
        if main_hash:
            qr_hashes = {
                'demirbank': main_hash['hash_value'],
                'main_account': main_hash['account_name']
            }
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
            first_hash = hashes.first()
            if first_hash:
                qr_hashes = {
                    'demirbank': first_hash['hash_value'],
                    'main_account': first_hash['account_name']
                }
            else:
                qr_hashes = {}
        
        return JsonResponse({
            'qr_hashes': qr_hashes,
            'total_active': hashes.count()
        })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_sync_qr_hashes(request):
    """API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ QR —Ö–µ—à–µ–π —Å –±–æ—Ç–æ–º"""
    try:
        from .models import QRHash
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ—à
        main_hash = QRHash.objects.filter(is_main=True, is_active=True).first()
        if not main_hash:
            main_hash = QRHash.objects.filter(is_active=True).first()
        
        if not main_hash:
            return JsonResponse({'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ—à–µ–π'}, status=400)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ö–µ—à–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        
        return JsonResponse({
            'success': True,
            'message': f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {main_hash.account_name}',
            'main_account': main_hash.account_name,
            'hash_preview': f"{main_hash.hash_value[:30]}...{main_hash.hash_value[-10:]}"
        })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_add_qr_hash(request):
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR —Ö–µ—à–∞"""
    try:
        from .models import QRHash
        import json
        
        data = json.loads(request.body)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π QR —Ö–µ—à
        qr_hash = QRHash.objects.create(
            account_name=data.get('account_name'),
            hash_value=data.get('hash_value'),
            gmail_email=data.get('gmail_email'),
            gmail_password=data.get('gmail_password'),
            is_main=data.get('is_main', False),
            is_active=data.get('is_active', True)
        )
        
        return JsonResponse({
            'success': True,
            'message': f'QR —Ö–µ—à "{qr_hash.account_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            'qr_id': qr_hash.id
        })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_set_main_qr_hash(request, qr_id):
    """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ QR —Ö–µ—à–∞"""
    try:
        from .models import QRHash
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å –≤—Å–µ—Ö —Ö–µ—à–µ–π
        QRHash.objects.filter(is_main=True).update(is_main=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        qr_hash = QRHash.objects.get(id=qr_id)
        qr_hash.is_main = True
        qr_hash.is_active = True
        qr_hash.save()
        
        return JsonResponse({
            'success': True,
            'message': f'QR —Ö–µ—à "{qr_hash.account_name}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π'
        })
    except QRHash.DoesNotExist:
        return JsonResponse({'error': 'QR —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_toggle_qr_hash(request, qr_id):
    """API –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ QR —Ö–µ—à–∞"""
    try:
        from .models import QRHash
        
        qr_hash = QRHash.objects.get(id=qr_id)
        qr_hash.is_active = not qr_hash.is_active
        qr_hash.save()
        
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if qr_hash.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        return JsonResponse({
            'success': True,
            'message': f'QR —Ö–µ—à "{qr_hash.account_name}" {status}',
            'is_active': qr_hash.is_active
        })
    except QRHash.DoesNotExist:
        return JsonResponse({'error': 'QR —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_delete_qr_hash(request, qr_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è QR —Ö–µ—à–∞"""
    try:
        from .models import QRHash
        
        qr_hash = QRHash.objects.get(id=qr_id)
        account_name = qr_hash.account_name
        qr_hash.delete()
        
        return JsonResponse({
            'success': True,
            'message': f'QR —Ö–µ—à "{account_name}" —É–¥–∞–ª–µ–Ω'
        })
    except QRHash.DoesNotExist:
        return JsonResponse({'error': 'QR —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
def api_bot_status(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = BotConfiguration.objects.first()
        if config:
            return JsonResponse({
                'is_active': config.is_active,
                'maintenance_message': config.maintenance_message or ''
            })
        else:
            return JsonResponse({
                'is_active': True,
                'maintenance_message': ''
            })
    except Exception as e:
        return JsonResponse({
            'is_active': True,
            'maintenance_message': ''
        })

@csrf_exempt
def api_set_bot_status(request):
    """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            is_active = data.get('is_active', True)
            maintenance_message = data.get('maintenance_message', '')
            
            config, created = BotConfiguration.objects.get_or_create(
                defaults={'is_active': True, 'maintenance_message': ''}
            )
            config.is_active = is_active
            config.maintenance_message = maintenance_message
            config.save()
            
            return JsonResponse({
                'success': True,
                'message': '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@csrf_exempt
def api_restart_bot(request):
    """API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if request.method == 'POST':
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            return JsonResponse({
                'success': True,
                'message': '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)
    return JsonResponse({'error': 'Method not allowed'}, status=405)
