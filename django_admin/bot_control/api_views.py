from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils import timezone
import json
import logging

logger = logging.getLogger(__name__)

@csrf_exempt
@require_http_methods(["POST", "PUT"])
def payment_api(request):
    """
    API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥
    """
    try:
        print(f"üîÑ Django API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å {request.method} –Ω–∞ /api/payment/")
        print(f"üîÑ Django API: Headers: {dict(request.headers)}")
        print(f"üîÑ Django API: Body: {request.body}")
        
        data = json.loads(request.body)
        print(f"üîÑ Django API: Parsed data: {data}")
        
        if request.method == 'POST':
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            print("üîÑ Django API: –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...")
            return create_payment_request(data)
        elif request.method == 'PUT':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            print("üîÑ Django API: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...")
            return update_payment_status(data)
            
    except Exception as e:
        print(f"‚ùå Django API error: {str(e)}")
        logger.error(f"Error in payment_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

def create_payment_request(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–≤–æ–¥"""
    try:
        print(f"üîÑ Django API: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        from bot_control.models import Request
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['type', 'amount', 'userId', 'bookmaker']
        for field in required_fields:
            if field not in data:
                print(f"‚ùå Django API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return JsonResponse({'error': f'Missing required field: {field}'}, status=400)
        
        print(f"üîÑ Django API: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Django ORM
        request_obj = Request.objects.create(
            user_id=data['userId'],
            request_type=data['type'],  # 'deposit' –∏–ª–∏ 'withdraw'
            amount=data['amount'],
            bookmaker=data['bookmaker'],
            bank=data.get('bank', ''),
            account_id=data.get('playerId', ''),
            phone=data.get('phone', ''),
            status='pending',
            created_at=timezone.now()
        )
        
        print(f"‚úÖ Django API: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {request_obj.id}")
        
        return JsonResponse({
            'success': True,
            'id': request_obj.id,
            'transactionId': request_obj.id,
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        })
        
    except Exception as e:
        print(f"‚ùå Django API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        logger.error(f"Error creating payment request: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

def update_payment_status(data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        from bot_control.models import Request
        
        if 'id' not in data:
            return JsonResponse({'error': 'Missing request ID'}, status=400)
        
        try:
            request_obj = Request.objects.get(id=data['id'])
        except Request.DoesNotExist:
            return JsonResponse({'error': 'Request not found'}, status=404)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if 'status' in data:
            request_obj.status = data['status']
            request_obj.updated_at = timezone.now()
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º processed_at
            if data['status'] in ['completed', 'rejected', 'approved', 'auto_completed']:
                request_obj.processed_at = timezone.now()
            
            request_obj.save()
        
        return JsonResponse({
            'success': True,
            'message': '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"Error updating payment status: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def generate_qr_api(request):
    """
    API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
    """
    try:
        data = json.loads(request.body)
        
        amount = data.get('amount', 0)
        bank = data.get('bank', 'DEMIRBANK')
        player_id = data.get('playerId', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –∞–¥–º–∏–Ω–∫–∏
        from bot_control.models import BotConfiguration
        
        try:
            requisite_config = BotConfiguration.objects.get(key='active_requisite')
            requisite = requisite_config.value
        except BotConfiguration.DoesNotExist:
            # Fallback —Ä–µ–∫–≤–∏–∑–∏—Ç
            requisite = '1234567890123456'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        amount_cents = int(amount * 100)
        amount_str = str(amount_cents).zfill(5)
        
        # –°–æ–∑–¥–∞–µ–º TLV —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        payload = f"00020101021232990015qr.demirbank.kg0108ib_andro10{requisite}1109202111302112021213021211328454d5b3ee5d47c7b61c0a0b07bb939a5204482953034175405{amount_str}5909DEMIRBANK6304"
        
        # –í—ã—á–∏—Å–ª—è–µ–º SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        import hashlib
        checksum = hashlib.sha256(payload.encode()).hexdigest()
        qr_hash = payload + checksum
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
        bank_links = {
            'demirbank': f"https://retail.demirbank.kg/#{qr_hash}",
            'omoney': f"https://api.dengi.o.kg/ru/qr/#{qr_hash}",
            'balance': f"https://balance.kg/#{qr_hash}",
            'bakai': f"https://bakai24.app/#{qr_hash}",
            'megapay': f"https://megapay.kg/get#{qr_hash}",
            'mbank': f"https://app.mbank.kg/qr/#{qr_hash}"
        }
        
        return JsonResponse({
            'success': True,
            'qr_hash': qr_hash,
            'primary_url': bank_links.get(bank.lower(), bank_links['demirbank']),
            'all_bank_urls': bank_links,
            'settings': {
                'enabled_banks': ['demirbank', 'omoney', 'balance', 'bakai', 'megapay', 'mbank']
            }
        })
        
    except Exception as e:
        logger.error(f"Error generating QR code: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_bot_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    try:
        from bot_control.models import BotConfiguration
        
        settings = {}
        configs = BotConfiguration.objects.all()
        
        for config in configs:
            settings[config.key] = config.value
        
        return JsonResponse({
            'success': True,
            'settings': settings
        })
        
    except Exception as e:
        logger.error(f"Error getting bot settings: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_requisites_list(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    try:
        from bot_control.models import BotConfiguration
        
        requisites = []
        configs = BotConfiguration.objects.filter(key__startswith='requisite_')
        
        for config in configs:
            requisites.append({
                'id': config.id,
                'name': config.key.replace('requisite_', ''),
                'value': config.value,
                'is_active': config.key == 'active_requisite'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç
        try:
            active_config = BotConfiguration.objects.get(key='active_requisite')
            active_id = active_config.id
        except BotConfiguration.DoesNotExist:
            active_id = None
        
        return JsonResponse({
            'success': True,
            'requisites': requisites,
            'active_id': active_id
        })
        
    except Exception as e:
        logger.error(f"Error getting requisites: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_referral_data(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        user_id = request.GET.get('user_id')
        
        if not user_id:
            return JsonResponse({'error': 'user_id is required'}, status=400)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return JsonResponse({
            'success': True,
            'referral_data': {
                'user_id': user_id,
                'referral_code': f'REF{user_id}',
                'total_referrals': 0,
                'total_earnings': 0
            }
        })
        
    except Exception as e:
        logger.error(f"Error getting referral data: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_transaction_history(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        from bot_control.models import Request
        
        user_id = request.GET.get('user_id')
        
        if not user_id:
            return JsonResponse({'error': 'user_id is required'}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = Request.objects.filter(user_id=user_id).order_by('-created_at')[:50]
        
        transaction_list = []
        for tx in transactions:
            transaction_list.append({
                'id': tx.id,
                'type': tx.request_type,
                'amount': float(tx.amount) if tx.amount else 0,
                'status': tx.status,
                'bookmaker': tx.bookmaker or '',
                'date': tx.created_at.isoformat() if tx.created_at else '',
            })
        
        return JsonResponse({
            'success': True,
            'transactions': transaction_list
        })
        
    except Exception as e:
        logger.error(f"Error getting transaction history: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)