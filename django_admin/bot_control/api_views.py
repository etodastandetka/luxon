from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils import timezone
import json
import logging

logger = logging.getLogger(__name__)

@csrf_exempt
@require_http_methods(["POST", "PUT"])
def payment_api(request):
    """
    API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥
    """
    try:
        print(f"üîÑ Django API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å {request.method} –Ω–∞ /api/payment/")
        print(f"üîÑ Django API: Headers: {dict(request.headers)}")
        print(f"üîÑ Django API: Body: {request.body}")
        
        data = json.loads(request.body)
        print(f"üîÑ Django API: Parsed data: {data}")
        
        if request.method == 'POST':
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            print("üîÑ Django API: –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...")
            return create_payment_request(data)
        elif request.method == 'PUT':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            print("üîÑ Django API: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...")
            return update_payment_status(data)
            
        except Exception as e:
        print(f"‚ùå Django API error: {str(e)}")
        logger.error(f"Error in payment_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

def create_payment_request(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–≤–æ–¥"""
    try:
        print(f"üîÑ Django API: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        from bot_control.models import Request
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['type', 'amount', 'bookmaker']
        for field in required_fields:
            if field not in data:
                print(f"‚ùå Django API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return JsonResponse({'error': f'Missing required field: {field}'}, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not data.get('userId') and not data.get('user_id') and not data.get('telegram_user_id'):
            print(f"‚ùå Django API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (userId, user_id –∏–ª–∏ telegram_user_id)")
            return JsonResponse({'error': 'Missing user identification'}, status=400)
        
        print(f"üîÑ Django API: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        telegram_user_id = data.get('telegram_user_id')
        casino_player_id = data.get('userId') or data.get('user_id')  # ID –∏–≥—Ä–æ–∫–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ
        
        print(f"üîÑ Django API: Telegram ID: {telegram_user_id}, Casino ID: {casino_player_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID
        if not telegram_user_id and not casino_player_id:
            return JsonResponse({'error': 'Missing user identification'}, status=400)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Django ORM
        request_obj = Request.objects.create(
            user_id=telegram_user_id or casino_player_id,  # Telegram ID –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Casino ID –∫–∞–∫ fallback
            request_type=data['type'],  # 'deposit' –∏–ª–∏ 'withdraw'
            amount=data['amount'],
            bookmaker=data['bookmaker'],
            bank=data.get('bank', ''),
            account_id=casino_player_id or '',  # Casino ID –∏–≥—Ä–æ–∫–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ
            phone=data.get('phone', ''),
            status='pending',
            created_at=timezone.now(),
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            username=data.get('telegram_username', ''),
            first_name=data.get('telegram_first_name', ''),
            last_name=data.get('telegram_last_name', '')
        )
        
        print(f"‚úÖ Django API: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {request_obj.id}")
        
        return JsonResponse({
            'success': True,
            'id': request_obj.id,
            'transactionId': request_obj.id,
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        })
        
        except Exception as e:
        print(f"‚ùå Django API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        logger.error(f"Error creating payment request: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

def update_payment_status(data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        from bot_control.models import Request
        
        print(f"üîÑ Django API: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ null, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'id' not in data or data['id'] is None:
            print("üîÑ Django API: ID –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            request_obj = Request.objects.filter(
                request_type=data.get('type', 'deposit')
            ).order_by('-created_at').first()
            
            if not request_obj:
                print("üîÑ Django API: –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                request_obj = Request.objects.create(
                    user_id=1,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    request_type=data.get('type', 'deposit'),
                    amount=0,
                    status=data.get('status', 'pending'),
                    created_at=timezone.now()
                )
                print(f"üîÑ Django API: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ID {request_obj.id}")
            else:
                print(f"üîÑ Django API: –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ID {request_obj.id}")
        else:
            try:
                request_obj = Request.objects.get(id=data['id'])
                print(f"üîÑ Django API: –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ ID {request_obj.id}")
            except Request.DoesNotExist:
                return JsonResponse({'error': 'Request not found'}, status=404)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if 'status' in data:
            request_obj.status = data['status']
            request_obj.updated_at = timezone.now()
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º processed_at
            if data['status'] in ['completed', 'rejected', 'approved', 'auto_completed']:
                request_obj.processed_at = timezone.now()
            
            request_obj.save()
        
                return JsonResponse({
            'success': True,
            'message': '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"Error updating payment status: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def generate_qr_api(request):
    """
    API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
    """
    try:
        data = json.loads(request.body)
        
        amount = data.get('amount', 0)
        player_id = data.get('playerId', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –∞–¥–º–∏–Ω–∫–∏
        from bot_control.models import BotConfiguration
        
        try:
            requisite_config = BotConfiguration.objects.get(key='active_requisite')
            requisite = requisite_config.value
        except BotConfiguration.DoesNotExist:
            # Fallback —Ä–µ–∫–≤–∏–∑–∏—Ç
            requisite = '1234567890123456'
        
        logger.info(f"Generating QR for amount={amount}, requisite={requisite}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        amount_cents = int(amount * 100)
        amount_str = str(amount_cents)
        amount_length = str(len(amount_str)).zfill(2)  # –î–ª–∏–Ω–∞ —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "05" –¥–ª—è 10053)
        
        requisite_length = str(len(requisite)).zfill(2)  # –î–ª–∏–Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º TLV —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        # –§–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞: 00020101021232990015qr.demirbank.kg0108ib_andro10{LENGTH}{REQUISITE}12021213021211328454d5b3ee5d47c7b61c0a0b07bb939a5204482953034175{LENGTH_ID}{AMOUNT}5909DEMIRBANK6304
        payload = (
            f"00020101021232990015qr.demirbank.kg0108ib_andro"
            f"10{requisite_length}{requisite}"
            f"12021213021211328454d5b3ee5d47c7b61c0a0b07bb939a5204482953034175"
            f"4{amount_length}{amount_str}"
            f"5909DEMIRBANK6304"
        )
        
        logger.info(f"Payload before checksum: {payload}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        import hashlib
        checksum_full = hashlib.sha256(payload.encode('utf-8')).hexdigest()
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞
        checksum = checksum_full[-4:].upper()
        
        # –ü–æ–ª–Ω—ã–π QR —Ö–µ—à
        qr_hash = payload + checksum
        
        logger.info(f"Generated QR hash: {qr_hash}")
        logger.info(f"Checksum: {checksum}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
        bank_links = {
            'DemirBank': f"https://retail.demirbank.kg/#{qr_hash}",
            'O!Money': f"https://api.dengi.o.kg/ru/qr/#{qr_hash}",
            'Balance.kg': f"https://balance.kg/#{qr_hash}",
            'Bakai': f"https://bakai24.app/#{qr_hash}",
            'MegaPay': f"https://megapay.kg/get#{qr_hash}",
            'MBank': f"https://app.mbank.kg/qr/#{qr_hash}",
            'Optima': f"https://optima.kg/qr/#{qr_hash}",
            '–ö–æ–º–ø–∞–Ω—å–æ–Ω': f"https://kompanion.kg/qr/#{qr_hash}"
        }

        return JsonResponse({
            'success': True,
            'qr_hash': qr_hash,
            'primary_url': bank_links['DemirBank'],
            'all_bank_urls': bank_links,
            'settings': {
                'enabled_banks': ['demir', 'omoney', 'balance', 'bakai', 'megapay', 'mbank', 'optima', 'kompanion']
            }
        })
        
    except Exception as e:
        logger.error(f"Error generating QR code: {str(e)}", exc_info=True)
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_bot_settings(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    try:
        from bot_control.models import BotConfiguration
        
        settings = {}
        configs = BotConfiguration.objects.all()
        
        for config in configs:
            settings[config.key] = config.value
        
        return JsonResponse({
            'success': True,
            'settings': settings
        })
        
    except Exception as e:
        logger.error(f"Error getting bot settings: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_requisites_list(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    try:
        from bot_control.models import BotConfiguration
        
        requisites = []
        configs = BotConfiguration.objects.filter(key__startswith='requisite_')
        
        for config in configs:
            requisites.append({
                'id': config.id,
                'name': config.key.replace('requisite_', ''),
                'value': config.value,
                'is_active': config.key == 'active_requisite'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç
        try:
            active_config = BotConfiguration.objects.get(key='active_requisite')
            active_id = active_config.id
        except BotConfiguration.DoesNotExist:
            active_id = None
        
        return JsonResponse({
            'success': True,
            'requisites': requisites,
            'active_id': active_id
        })
        
    except Exception as e:
        logger.error(f"Error getting requisites: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_referral_data(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        user_id = request.GET.get('user_id')
        
        if not user_id:
            return JsonResponse({'error': 'user_id is required'}, status=400)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return JsonResponse({
            'success': True,
            'referral_data': {
                'user_id': user_id,
                'referral_code': f'REF{user_id}',
                'total_referrals': 0,
                'total_earnings': 0
            }
        })
        
    except Exception as e:
        logger.error(f"Error getting referral data: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def api_transaction_history(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        from bot_control.models import Request
        
        user_id = request.GET.get('user_id')
        request_type = request.GET.get('type', '')  # deposit, withdraw, –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö
        
        print(f"üîÑ Django API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, user_id={user_id}, type={request_type}")
        
        # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if not user_id:
            print("üîÑ Django API: user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            transactions = Request.objects.all().order_by('-created_at')[:100]
        else:
            print(f"üîÑ Django API: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_id={user_id}")
            transactions = Request.objects.filter(user_id=user_id).order_by('-created_at')[:50]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if request_type:
            transactions = transactions.filter(request_type=request_type)
        
        transaction_list = []
        for tx in transactions:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_display_name = 'Unknown'
            if tx.username:
                user_display_name = f"@{tx.username}"
            elif tx.first_name and tx.last_name:
                user_display_name = f"{tx.first_name} {tx.last_name}"
            elif tx.first_name:
                user_display_name = tx.first_name
            
            transaction_list.append({
                'id': tx.id,
                'user_id': tx.user_id,  # Telegram ID
                'account_id': tx.account_id or '',  # Casino ID
                'user_display_name': user_display_name,
                'username': tx.username or '',
                'first_name': tx.first_name or '',
                'last_name': tx.last_name or '',
                'type': tx.request_type,
                'amount': float(tx.amount) if tx.amount else 0,
                'status': tx.status,
                'bookmaker': tx.bookmaker or '',
                'bank': tx.bank or '',
                'phone': tx.phone or '',
                'created_at': tx.created_at.isoformat() if tx.created_at else '',
                'processed_at': tx.processed_at.isoformat() if tx.processed_at else None,
            })
        
        print(f"‚úÖ Django API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(transaction_list)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        return JsonResponse({
            'success': True,
            'transactions': transaction_list
        })
        
    except Exception as e:
        print(f"‚ùå Django API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}")
        logger.error(f"Error getting transaction history: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def sync_bot_api(request):
    """
    API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º
    """
    try:
        print(f"üîÑ Django API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –±–æ—Ç–æ–º")
        
        data = json.loads(request.body)
        print(f"üîÑ Django API: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {data}")
        
        user_data = data.get('user', {})
        action = data.get('action', '')
        additional_data = data.get('data', {})
        init_data = data.get('initData', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if user_data:
            from bot_control.models import UserProfile
            
            user_id = user_data.get('id')
            if user_id:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                profile, created = UserProfile.objects.get_or_create(
                    telegram_id=user_id,
                    defaults={
                        'username': user_data.get('username', ''),
                        'first_name': user_data.get('first_name', ''),
                        'last_name': user_data.get('last_name', ''),
                        'language_code': user_data.get('language_code', 'ru'),
                        'is_premium': user_data.get('is_premium', False),
                        'init_data': init_data,
                        'last_activity': timezone.now()
                    }
                )
                
                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                    profile.username = user_data.get('username', profile.username)
                    profile.first_name = user_data.get('first_name', profile.first_name)
                    profile.last_name = user_data.get('last_name', profile.last_name)
                    profile.language_code = user_data.get('language_code', profile.language_code)
                    profile.is_premium = user_data.get('is_premium', profile.is_premium)
                    profile.init_data = init_data
                    profile.last_activity = timezone.now()
                    profile.save()
                
                print(f"‚úÖ Django API: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {'—Å–æ–∑–¥–∞–Ω' if created else '–æ–±–Ω–æ–≤–ª–µ–Ω'}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'deposit_request_created':
            print(f"üîÑ Django API: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            
        elif action == 'withdraw_request_created':
            print(f"üîÑ Django API: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            
        return JsonResponse({
            'success': True,
            'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —É—Å–ø–µ—à–Ω–∞'
        })
        
        except Exception as e:
        print(f"‚ùå Django API: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º: {str(e)}")
        logger.error(f"Error in sync_bot_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)