"""
Mostbet Cash API –∫–ª–∏–µ–Ω—Ç
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://mostbetshop.com/api-documentation.pdf
"""
import hashlib
import json
import requests
from datetime import datetime
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)


class MostbetAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mostbet Cash API"""
    
    def __init__(self, api_key: str, secret: str, cashpoint_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ "api-key:uuid"
            secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            cashpoint_id: ID –∫–∞—Å—Å—ã (cashpoint ID)
        """
        self.api_key = api_key
        self.secret = secret
        self.cashpoint_id = cashpoint_id
        self.base_url = "https://apimb.com/mbc/gateway/v1/api"
    
    def _get_timestamp(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC+0"""
        return datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
    
    def _generate_signature(self, path: str, body: str = "", timestamp: str = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ HMAC SHA3-256
        
        Args:
            path: –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∏–Ω–∞—è —Å /mbc/...
            body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            timestamp: –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
        """
        if timestamp is None:
            timestamp = self._get_timestamp()
        
        # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º: <API_KEY><PATH><REQUEST_BODY><TIMESTAMP>
        sign_string = f"{self.api_key}{path}{body}{timestamp}"
        
        # HMAC SHA3-256 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º secret
        import hmac
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sha3_256 –∏–∑ hashlib (Python 3.6+)
            try:
                sha3_func = hashlib.sha3_256
            except AttributeError:
                # –ï—Å–ª–∏ sha3_256 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É pysha3
                try:
                    import sha3
                    sha3_func = sha3.sha3_256
                except ImportError:
                    logger.warning("SHA3-256 not available, using SHA256 fallback. Install pysha3: pip install pysha3")
                    sha3_func = hashlib.sha256
            
            # –í—ã—á–∏—Å–ª—è–µ–º HMAC SHA3-256
            signature = hmac.new(
                self.secret.encode(),
                sign_string.encode(),
                sha3_func
            ).hexdigest()
            
        except Exception as e:
            logger.error(f"Error generating HMAC SHA3-256 signature: {e}")
            # Fallback –Ω–∞ SHA256 (–≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API)
            signature = hmac.new(
                self.secret.encode(),
                sign_string.encode(),
                hashlib.sha256
            ).hexdigest()
            logger.warning("Using SHA256 fallback - will not work with real API!")
        
        return signature
    
    def _get_headers(self, path: str, body: str = "", need_project: bool = False) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        timestamp = self._get_timestamp()
        signature = self._generate_signature(path, body, timestamp)
        
        headers = {
            'X-Api-Key': self.api_key,
            'X-Timestamp': timestamp,
            'X-Signature': signature,
            'Content-Type': 'application/json',
            'Accept': '*/*'
        }
        
        if need_project:
            headers['X-Project'] = 'MBC'
        
        return headers
    
    def get_balance(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã
        
        Returns:
            {'balance': float, 'currency': str}
        """
        try:
            path = f"/mbc/gateway/v1/api/cashpoint/{self.cashpoint_id}/balance"
            url = f"{self.base_url}/cashpoint/{self.cashpoint_id}/balance"
            
            headers = self._get_headers(path, need_project=False)
            
            logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Mostbet –¥–ª—è –∫–∞—Å—Å—ã {self.cashpoint_id}")
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.status_code} - {response.text}")
                return {'balance': 0, 'currency': 'RUB'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_balance: {e}")
            return {'balance': 0, 'currency': 'RUB'}
    
    def deposit(self, player_id: str, amount: float, currency: str = 'RUB', brand_id: int = 1) -> Dict[str, Any]:
        """
        –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞
            amount: –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
            brand_id: ID –±—Ä–µ–Ω–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–ª—è Mostbet)
            
        Returns:
            {'transactionId': int, 'status': str}
        """
        try:
            path = f"/mbc/gateway/v1/api/cashpoint/{self.cashpoint_id}/player/deposit"
            url = f"{self.base_url}/cashpoint/{self.cashpoint_id}/player/deposit"
            
            payload = {
                'brandId': brand_id,
                'playerId': str(player_id),
                'amount': amount,
                'currency': currency
            }
            
            # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            body = json.dumps(payload, separators=(',', ':'))
            
            headers = self._get_headers(path, body, need_project=True)
            
            logger.info(f"üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} {currency} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id} –≤ Mostbet")
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {response.status_code} - {response.text}")
                error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
                return {
                    'transactionId': None,
                    'status': 'NEW_ERROR',
                    'error': error_data.get('message', '–û—à–∏–±–∫–∞ API'),
                    'code': error_data.get('code', response.status_code)
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ deposit: {e}")
            return {
                'transactionId': None,
                'status': 'NEW_ERROR',
                'error': str(e)
            }
    
    def get_cashout_list(self, page: int = 0, size: int = 10, search_string: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
        
        Args:
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            search_string: –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            {'items': list, 'totalCount': int}
        """
        try:
            path = f"/mbc/gateway/v1/api/cashpoint/{self.cashpoint_id}/player/cashout/list/page"
            url = f"{self.base_url}/cashpoint/{self.cashpoint_id}/player/cashout/list/page"
            
            params = {'page': page, 'size': size}
            if search_string:
                params['searchString'] = search_string
            
            headers = self._get_headers(path, need_project=False)
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ Mostbet (page={page}, size={size})")
            response = requests.get(url, headers=headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {data.get('totalCount', 0)}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}")
                return {'items': [], 'totalCount': 0}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_cashout_list: {e}")
            return {'items': [], 'totalCount': 0}
    
    def confirm_cashout(self, transaction_id: int, code: str) -> Dict[str, Any]:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ) –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–≥—Ä–æ–∫–∞
        
        Args:
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥)
            code: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–∫–∞
            
        Returns:
            {'transactionId': int, 'status': str}
        """
        try:
            path = f"/mbc/gateway/v1/api/cashpoint/{self.cashpoint_id}/player/cashout/confirmation"
            url = f"{self.base_url}/cashpoint/{self.cashpoint_id}/player/cashout/confirmation"
            
            payload = {
                'code': code,
                'transactionId': transaction_id
            }
            
            # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            body = json.dumps(payload, separators=(',', ':'))
            
            headers = self._get_headers(path, body, need_project=True)
            
            logger.info(f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ {transaction_id} —Å –∫–æ–¥–æ–º {code} –≤ Mostbet")
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {response.status_code} - {response.text}")
                error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
                return {
                    'transactionId': transaction_id,
                    'status': 'NEW_ERROR',
                    'error': error_data.get('message', '–û—à–∏–±–∫–∞ API'),
                    'code': error_data.get('code', response.status_code)
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ confirm_cashout: {e}")
            return {
                'transactionId': transaction_id,
                'status': 'NEW_ERROR',
                'error': str(e)
            }
    
    def get_transactions(self, date_start: str, date_end: str, brand_id: int = None, 
                        player_id: str = None, transaction_id: int = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Args:
            date_start: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            date_end: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            brand_id: ID –±—Ä–µ–Ω–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            player_id: ID –∏–≥—Ä–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            {'items': list}
        """
        try:
            path = f"/mbc/gateway/v1/api/cashpoint/{self.cashpoint_id}/transactions/list/all"
            url = f"{self.base_url}/cashpoint/{self.cashpoint_id}/transactions/list/all"
            
            params = {
                'dateStart': date_start,
                'dateEnd': date_end
            }
            if brand_id:
                params['brandId'] = brand_id
            if player_id:
                params['playerId'] = player_id
            if transaction_id:
                params['transactionId'] = transaction_id
            
            headers = self._get_headers(path, need_project=False)
            
            logger.info(f"üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Mostbet ({date_start} - {date_end})")
            response = requests.get(url, headers=headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data.get('items', []))}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code} - {response.text}")
                return {'items': []}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_transactions: {e}")
            return {'items': []}
