"""
1WIN API –∫–ª–∏–µ–Ω—Ç
"""
import requests
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class OnewinAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 1WIN API"""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        """
        self.api_key = api_key
        self.base_url = "https://api.1win.win/v1/client"
    
    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            'X-API-KEY': self.api_key,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    
    def deposit(self, user_id: int, amount: float) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
            
        Returns:
            {'id': int, 'cashId': int, 'amount': float, 'userId': int}
        """
        try:
            url = f"{self.base_url}/deposit"
            
            payload = {
                'userId': int(user_id),
                'amount': float(amount)
            }
            
            headers = self._get_headers()
            
            logger.info(f"üí∏ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ {amount} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id} –≤ 1WIN")
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞: {response.status_code} - {response.text}")
                error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_messages = {
                    400: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã, –¥–µ–ø–æ–∑–∏—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –∫–æ–º–∏—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è)',
                    403: '–ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è',
                    404: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                
                return {
                    'error': True,
                    'status_code': response.status_code,
                    'message': error_data.get('message', error_messages.get(response.status_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')),
                    'data': error_data
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ deposit: {e}")
            return {
                'error': True,
                'message': str(e)
            }
    
    def withdrawal(self, user_id: int, code: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            code: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∏–≥—Ä–æ–∫–∞
            
        Returns:
            {'id': int, 'cashId': int, 'amount': float, 'userId': int}
        """
        try:
            url = f"{self.base_url}/withdrawal"
            
            payload = {
                'userId': int(user_id),
                'code': int(code)
            }
            
            headers = self._get_headers()
            
            logger.info(f"üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id} —Å –∫–æ–¥–æ–º {code} –≤ 1WIN")
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {response.status_code} - {response.text}")
                error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_messages = {
                    400: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤—ã–≤–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Å—Å—ã)',
                    403: '–ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è',
                    404: '–í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                
                return {
                    'error': True,
                    'status_code': response.status_code,
                    'message': error_data.get('message', error_messages.get(response.status_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')),
                    'data': error_data
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ withdrawal: {e}")
            return {
                'error': True,
                'message': str(e)
            }
