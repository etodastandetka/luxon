from django.db import models
from django.utils import timezone
import json
import sqlite3
from django.conf import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
from .auto_deposit_models import *
from .bot_models import *

class BotSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    is_active = models.BooleanField(default=True, verbose_name="–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    maintenance_message = models.TextField(
        default="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    
    def __str__(self):
        return f"–ë–æ—Ç {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}"

class BroadcastMessage(models.Model):
    """–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    message = models.TextField(verbose_name="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    is_sent = models.BooleanField(default=False, verbose_name="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    sent_at = models.DateTimeField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        ordering = ['-created_at']
    
    def __str__(self):
        return self.title

class BankSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤"""
    BANK_CHOICES = [
        ('demirbank', '–î–µ–º–∏—Ä–±–∞–Ω–∫'),
        ('odengi', '–û! –î–µ–Ω—å–≥–∏'),
        ('bakai', '–ë–∞–∫–∞–π'),
        ('balance', 'Balance.kg'),
        ('megapay', 'MegaPay'),
        ('mbank', 'MBank'),
    ]
    
    bank_code = models.CharField(max_length=20, choices=BANK_CHOICES, unique=True, verbose_name="–ö–æ–¥ –±–∞–Ω–∫–∞")
    bank_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞")
    is_enabled_deposit = models.BooleanField(default=True, verbose_name="–í–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    is_enabled_withdraw = models.BooleanField(default=True, verbose_name="–í–∫–ª—é—á–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞")
    url_template = models.CharField(max_length=200, verbose_name="–®–∞–±–ª–æ–Ω URL")
    icon = models.CharField(max_length=10, default="üè¶", verbose_name="–ò–∫–æ–Ω–∫–∞")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–∞"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤"
        ordering = ['bank_name']
    
    def __str__(self):
        return f"{self.icon} {self.bank_name}"

class QRHash(models.Model):
    """QR —Ö–µ—à–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –î–µ–º–∏—Ä–±–∞–Ω–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ email"""
    
    account_name = models.CharField(max_length=100, default="–î–µ–º–∏—Ä–±–∞–Ω–∫ –ê–∫–∫–∞—É–Ω—Ç", verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞", help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ–º–∏—Ä–±–∞–Ω–∫ –ê–∫–∫–∞—É–Ω—Ç 1")
    hash_value = models.TextField(verbose_name="QR Hash")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
    gmail_email = models.EmailField(default="", verbose_name="Gmail –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", help_text="–í–∞—à–∞ –ø–æ—á—Ç–∞, –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    gmail_password = models.CharField(max_length=255, default="", verbose_name="–ü–∞—Ä–æ–ª—å Gmail", help_text="–ü–∞—Ä–æ–ª—å –æ—Ç Gmail –∏–ª–∏ App Password")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
    amount_pattern = models.CharField(max_length=200, default=r'–Ω–∞ —Å—É–º–º—É\s+([\d,]+\.?\d*)\s+KGS', verbose_name="–ü–∞—Ç—Ç–µ—Ä–Ω —Å—É–º–º—ã")
    date_pattern = models.CharField(max_length=200, default=r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{4})\s+(\d{2}:\d{2}:\d{2})', verbose_name="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–∞—Ç—ã")
    
    is_active = models.BooleanField(default=False, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    is_main = models.BooleanField(default=False, verbose_name="–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç", help_text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ê–∫–∫–∞—É–Ω—Ç –î–µ–º–∏—Ä–±–∞–Ω–∫–∞"
        verbose_name_plural = "–ê–∫–∫–∞—É–Ω—Ç—ã –î–µ–º–∏—Ä–±–∞–Ω–∫–∞"
        ordering = ['-is_main', '-created_at']
    
    def __str__(self):
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        main = "‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π" if self.is_main else ""
        return f"{self.account_name} - {self.hash_value[:20]}... ({status}) {main}"
    
    def save(self, *args, **kwargs):
        if self.is_main:
            QRHash.objects.filter(is_main=True).exclude(id=self.id).update(is_main=False)
        super().save(*args, **kwargs)


class BankWallet(models.Model):
    """–ö–æ—à–µ–ª—å–∫–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤ (MBank/Bakai/Optima –∏ –¥—Ä.) —Å –≤—ã–±–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –±–∞–Ω–∫.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ (hash_value) –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞.
    """
    BANK_CHOICES = [
        ('mbank', 'MBank'),
        ('bakai', 'Bakai'),
        ('optima', 'Optima'),
    ]

    bank_code = models.CharField(max_length=20, choices=BANK_CHOICES, verbose_name="–ë–∞–Ω–∫")
    account_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞")
    hash_value = models.TextField(verbose_name="Hash/—Ä–µ–∫–≤–∏–∑–∏—Ç")

    is_active = models.BooleanField(default=False, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    is_main = models.BooleanField(default=False, verbose_name="–û—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –±–∞–Ω–∫–∞")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–ö–æ—à–µ–ª—ë–∫ –±–∞–Ω–∫–∞"
        verbose_name_plural = "–ö–æ—à–µ–ª—å–∫–∏ –±–∞–Ω–∫–æ–≤"
        ordering = ['bank_code', '-is_main', '-is_active', '-created_at']
        indexes = [
            models.Index(fields=['bank_code', 'is_active']),
            models.Index(fields=['bank_code', 'is_main']),
        ]

    def __str__(self):
        flags = ("‚≠ê" if self.is_main else "") + (" ‚úÖ" if self.is_active else " ‚ùå")
        return f"{self.bank_code}:{self.account_name} {flags}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –±–∞–Ω–∫
        if self.is_main:
            BankWallet.objects.filter(bank_code=self.bank_code, is_main=True).exclude(id=self.id).update(is_main=False)

class BotConfiguration(models.Model):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    key = models.CharField(max_length=128, unique=True)
    value = models.TextField(blank=True, default="")
    description = models.CharField(max_length=200, blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"

    def __str__(self):
        return f"{self.key}"

    def get_json_value(self):
        try:
            return json.loads(self.value or "{}")
        except Exception:
            return {}

    def set_json_value(self, data):
        self.value = json.dumps(data, ensure_ascii=False)


class BotDepositRequest(models.Model):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"""
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç'),
        ('processing', '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
    ]

    BOOKMAKER_CHOICES = [
        ('1xbet', '1XBET'),
        ('1win', '1WIN'),
        ('melbet', 'MELBET'),
        ('mostbet', 'MOSTBET'),
    ]

    user_id = models.BigIntegerField(verbose_name="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    username = models.CharField(max_length=100, blank=True, verbose_name="Username")
    first_name = models.CharField(max_length=100, blank=True, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=100, blank=True, verbose_name="–§–∞–º–∏–ª–∏—è")

    bookmaker = models.CharField(max_length=20, choices=BOOKMAKER_CHOICES, verbose_name="–ë—É–∫–º–µ–∫–µ—Ä")
    account_id = models.CharField(max_length=50, verbose_name="ID –∞–∫–∫–∞—É–Ω—Ç–∞")
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–º–∞")
    bank = models.CharField(max_length=50, verbose_name="–ë–∞–Ω–∫")

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å")
    receipt_photo = models.TextField(blank=True, verbose_name="–§–æ—Ç–æ —á–µ–∫–∞ (file_id)")
    receipt_photo_url = models.URLField(blank=True, default='', verbose_name="URL —Ñ–æ—Ç–æ —á–µ–∫–∞")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    processed_at = models.DateTimeField(null=True, blank=True, verbose_name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        ordering = ['-created_at']

    def __str__(self):
        return f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {self.bookmaker} - {self.amount} —Å–æ–º ({self.status})"

    @classmethod
    def sync_from_bot_db(cls):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞"""
        bot_db_path = settings.BOT_DATABASE_PATH

        try:
            conn = sqlite3.connect(bot_db_path)
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT user_id, username, first_name, last_name, bookmaker,
                       account_id, amount, bank, status, receipt_photo,
                       created_at, updated_at, processed_at
                FROM deposit_requests
                WHERE created_at > datetime('now', '-7 days')
                """
            )

            bot_requests = cursor.fetchall()

            for row in bot_requests:
                (
                    user_id, username, first_name, last_name,
                    bookmaker, account_id, amount, bank, status,
                    receipt_photo, created_at, updated_at, processed_at
                ) = row

                request_obj, created = cls.objects.get_or_create(
                    user_id=user_id,
                    bookmaker=bookmaker,
                    account_id=account_id,
                    amount=amount,
                    created_at=created_at,
                    defaults={
                        'username': username or '',
                        'first_name': first_name or '',
                        'last_name': last_name or '',
                        'bank': bank or '',
                        'status': status,
                        'receipt_photo': receipt_photo or '',
                        'updated_at': updated_at,
                        'processed_at': processed_at,
                    },
                )

                if not created:
                    request_obj.status = status
                    request_obj.updated_at = updated_at
                    request_obj.processed_at = processed_at
                    request_obj.save()

            conn.close()
            return len(bot_requests)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return 0

class BotWithdrawRequest(models.Model):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç –±–æ—Ç–∞"""
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç'),
        ('processing', '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
    ]
    
    BOOKMAKER_CHOICES = [
        ('1xbet', '1XBET'),
        ('1win', '1WIN'),
        ('melbet', 'MELBET'),
        ('mostbet', 'MOSTBET'),
    ]
    
    user_id = models.BigIntegerField(verbose_name="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    username = models.CharField(max_length=100, blank=True, verbose_name="Username")
    first_name = models.CharField(max_length=100, blank=True, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=100, blank=True, verbose_name="–§–∞–º–∏–ª–∏—è")
    
    bookmaker = models.CharField(max_length=20, choices=BOOKMAKER_CHOICES, verbose_name="–ë—É–∫–º–µ–∫–µ—Ä")
    account_id = models.CharField(max_length=50, verbose_name="ID –∞–∫–∫–∞—É–Ω—Ç–∞")
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–º–∞")
    bank = models.CharField(max_length=50, verbose_name="–ë–∞–Ω–∫")
    withdrawal_code = models.CharField(max_length=100, verbose_name="–ö–æ–¥ –≤—ã–≤–æ–¥–∞")
    qr_photo = models.TextField(blank=True, verbose_name="QR/—á–µ–∫ (file_id)")
    qr_photo_url = models.URLField(blank=True, default='', verbose_name="URL QR/—á–µ–∫–∞")
    
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å")
    
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    processed_at = models.DateTimeField(null=True, blank=True, verbose_name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"–í—ã–≤–æ–¥ {self.bookmaker} - {self.amount} —Å–æ–º ({self.status})"
    
    @classmethod
    def sync_from_bot_db(cls):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞"""
        bot_db_path = settings.BOT_DATABASE_PATH
        
        try:
            conn = sqlite3.connect(bot_db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞
            cursor.execute("""
                SELECT user_id, bookmaker, amount, status, created_at, processed_at
                FROM withdrawals
                WHERE created_at > datetime('now', '-7 days')
            """)
            
            bot_requests = cursor.fetchall()
            
            for row in bot_requests:
                user_id, bookmaker, amount, status, created_at, processed_at = row
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ Django
                request_obj, created = cls.objects.get_or_create(
                    user_id=user_id,
                    bookmaker=bookmaker,
                    amount=amount,
                    created_at=created_at,
                    defaults={
                        'username': '',
                        'first_name': '',
                        'last_name': '',
                        'account_id': '',
                        'bank': '',
                        'withdrawal_code': '',
                        'qr_photo': '',
                        'status': status,
                        'processed_at': processed_at
                    }
                )
                
                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                    request_obj.status = status
                    request_obj.processed_at = processed_at
                    request_obj.save()
            
            conn.close()
            return len(bot_requests)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (withdraw): {e}")
            return 0


class TransactionLog(models.Model):
    """–õ–æ–≥–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    bank = models.CharField(max_length=50)
    timestamp = models.DateTimeField()
    raw_message = models.TextField()
    status = models.CharField(
        max_length=20,
        choices=[
            ('received', '–ü–æ–ª—É—á–µ–Ω–æ'),
            ('error', '–û—à–∏–±–∫–∞'),
            ('processed', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'),
        ],
        default='received'
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = '–õ–æ–≥ –ø–ª–∞—Ç–µ–∂–∞'
        verbose_name_plural = '–õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π'
        indexes = [
            models.Index(fields=['timestamp']),
            models.Index(fields=['bank']),
            models.Index(fields=['status']),
        ]

    def __str__(self):
        return f"{self.bank} {self.amount} @ {self.timestamp:%Y-%m-%d %H:%M} ({self.status})"
