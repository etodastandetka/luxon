from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
import sqlite3
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

@csrf_exempt
@require_http_methods(["POST"])
def api_sync_webapp(request):
    """
    API endpoint –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –±–æ—Ç–æ–º
    """
    try:
        data = json.loads(request.body)
        
        telegram_user_id = data.get('telegram_user_id')
        username = data.get('username')
        first_name = data.get('first_name')
        last_name = data.get('last_name')
        language_code = data.get('language_code')
        action = data.get('action')
        webapp_data = data.get('data', {})
        init_data = data.get('init_data')
        timestamp = data.get('timestamp')
        
        if not telegram_user_id or not action:
            return JsonResponse({
                'error': 'Missing required fields: telegram_user_id, action'
            }, status=400)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django ORM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        from bot_control.models import BotUser, Request
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        BotUser.objects.update_or_create(
            user_id=telegram_user_id,
            defaults={
                'username': username or '',
                'first_name': first_name or '',
                'last_name': last_name or '',
                'language': language_code or 'ru'
            }
        )
        
        # user_actions - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'deposit_request_created':
            handle_deposit_request(telegram_user_id, webapp_data)
        elif action == 'withdraw_request_created':
            handle_withdraw_request(telegram_user_id, webapp_data)
        elif action == 'app_opened':
            handle_app_opened(telegram_user_id, webapp_data)
        
        return JsonResponse({
            'success': True,
            'message': 'Data synced successfully'
        })
        
    except Exception as e:
        logger.error(f"Error in api_sync_webapp: {str(e)}")
        return JsonResponse({
            'error': 'Internal server error'
        }, status=500)

def handle_deposit_request(telegram_user_id, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Django ORM"""
    try:
        from bot_control.models import Request
        from django.utils import timezone
        
        request_id = data.get('requestId')
        bookmaker = data.get('bookmaker')
        player_id = data.get('playerId')
        amount = data.get('amount')
        bank = data.get('bank')
        payment_url = data.get('paymentUrl')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Django ORM
        try:
            req = Request.objects.get(id=request_id)
            req.status = 'pending'
            req.user_id = telegram_user_id
            req.save()
        except Request.DoesNotExist:
            # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è webapp —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        send_telegram_notification(
            telegram_user_id,
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìä –ë—É–∫–º–µ–∫–µ—Ä: {bookmaker}\n"
            f"üÜî ID –∏–≥—Ä–æ–∫–∞: {player_id}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Å–æ–º\n"
            f"üè¶ –ë–∞–Ω–∫: {bank}\n\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        
    except Exception as e:
        logger.error(f"Error handling deposit request: {str(e)}")

def handle_withdraw_request(telegram_user_id, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Django ORM"""
    try:
        from bot_control.models import Request
        from django.utils import timezone
        
        request_id = data.get('requestId')
        bookmaker = data.get('bookmaker')
        player_id = data.get('playerId')
        amount = data.get('amount')
        bank = data.get('bank')
        phone = data.get('phone')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Django ORM
        try:
            req = Request.objects.get(id=request_id)
            req.status = 'pending'
            req.user_id = telegram_user_id
            req.save()
        except Request.DoesNotExist:
            # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è webapp —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        send_telegram_notification(
            telegram_user_id,
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìä –ë—É–∫–º–µ–∫–µ—Ä: {bookmaker}\n"
            f"üÜî ID –∏–≥—Ä–æ–∫–∞: {player_id}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Å–æ–º\n"
            f"üè¶ –ë–∞–Ω–∫: {bank}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )
        
    except Exception as e:
        logger.error(f"Error handling withdraw request: {str(e)}")

def handle_app_opened(telegram_user_id, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Django ORM"""
    try:
        from bot_control.models import BotUser
        
        page = data.get('page', 'unknown')
        language = data.get('language', 'ru')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = BotUser.objects.get(user_id=telegram_user_id)
            user.language = language or 'ru'
            user.save()
        except BotUser.DoesNotExist:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ
            pass
        
        # user_actions - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        is_first_time = False
        
        if is_first_time:
            send_telegram_notification(
                telegram_user_id,
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LUX ON!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ª—é–±–æ–º –±—É–∫–º–µ–∫–µ—Ä–µ\n"
                f"‚Ä¢ –í—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É\n"
                f"‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
            )
        
    except Exception as e:
        logger.error(f"Error handling app opened: {str(e)}")

def send_telegram_notification(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"Sending notification to user {user_id}: {message}")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
        # import requests
        # bot_token = "YOUR_BOT_TOKEN"
        # url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        # data = {
        #     "chat_id": user_id,
        #     "text": message,
        #     "parse_mode": "HTML"
        # }
        # requests.post(url, data=data)
        
    except Exception as e:
        logger.error(f"Error sending Telegram notification: {str(e)}")

@csrf_exempt
@require_http_methods(["POST"])
def api_notify_payment_success(request):
    """
    API endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    """
    try:
        data = json.loads(request.body)
        
        request_id = data.get('request_id')
        amount = data.get('amount')
        bookmaker = data.get('bookmaker')
        
        if not request_id:
            return JsonResponse({
                'error': 'Missing request_id'
            }, status=400)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('universal_bot.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ
        cursor.execute('''
            SELECT r.user_id, r.amount, r.bookmaker, u.username, u.first_name
            FROM requests r
            LEFT JOIN users u ON r.user_id = u.telegram_id
            WHERE r.id = ? OR r.request_id = ?
        ''', (request_id, request_id))
        
        result = cursor.fetchone()
        if result:
            user_id, amount, bookmaker, username, first_name = result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            cursor.execute('''
                UPDATE requests 
                SET status = 'completed', updated_at = ?
                WHERE id = ? OR request_id = ?
            ''', (datetime.now().isoformat(), request_id, request_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            send_telegram_notification(
                user_id,
                f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount} —Å–æ–º\n"
                f"üìä –ë—É–∫–º–µ–∫–µ—Ä: {bookmaker}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç. –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"
            )
            
            conn.commit()
            conn.close()
            
            return JsonResponse({
                'success': True,
                'message': 'Payment notification sent'
            })
        else:
            conn.close()
            return JsonResponse({
                'error': 'Request not found'
            }, status=404)
            
    except Exception as e:
        logger.error(f"Error in api_notify_payment_success: {str(e)}")
        return JsonResponse({
            'error': 'Internal server error'
        }, status=500)
