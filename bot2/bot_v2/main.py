import asyncio
import os
import logging
import hashlib
import random
import string
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from database import Database
    from translations import get_translation
    from config import BOT_TOKEN, MINI_APP_URL
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure you're running from the bot2 directory")
    exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DepositStates(StatesGroup):
    waiting_for_bookmaker = State()
    waiting_for_player_id = State()
    waiting_for_amount = State()
    waiting_for_bank = State()
    confirming_deposit = State()

class WithdrawStates(StatesGroup):
    waiting_for_bookmaker = State()
    waiting_for_player_id = State()
    waiting_for_amount = State()
    waiting_for_bank = State()
    waiting_for_phone = State()
    waiting_for_site_code = State()
    confirming_withdraw = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def build_menu_kb(language: str = 'ru') -> InlineKeyboardMarkup:
    base = MINI_APP_URL.rstrip("/")
    translations = get_translation(language)
    
    buttons = [
        [InlineKeyboardButton(text="üß© –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=base))],
        [InlineKeyboardButton(text=translations['deposit'], web_app=WebAppInfo(url=f"{base}/deposit")), 
         InlineKeyboardButton(text=translations['withdraw'], web_app=WebAppInfo(url=f"{base}/withdraw"))],
        [InlineKeyboardButton(text=translations['referral'], web_app=WebAppInfo(url=f"{base}/referral"))],
        [InlineKeyboardButton(text=translations['support'], web_app=WebAppInfo(url=f"{base}/support")), 
         InlineKeyboardButton(text=translations['history'], web_app=WebAppInfo(url=f"{base}/history"))],
        [InlineKeyboardButton(text=translations['faq'], web_app=WebAppInfo(url=f"{base}/faq")), 
         InlineKeyboardButton(text=translations['language'], web_app=WebAppInfo(url=f"{base}/language"))],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def on_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.save_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.save_user_data(user_id, 'current_state', '')
    db.save_user_data(user_id, 'current_action', '')
    db.save_user_data(user_id, 'current_bookmaker', '')
    
    kb = build_menu_kb(language)
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}

–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ | –í—ã–≤–æ–¥
–∏–∑ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –∫–æ–Ω—Ç–æ—Ä!

üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 0%
üì§ –í—ã–≤–æ–¥ ‚Äî 0%
üïí –†–∞–±–æ—Ç–∞–µ–º 24/7

üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @luxon_support
üí¨ –ß–∞—Ç –¥–ª—è –≤—Å–µ—Ö: @luxkassa_chat

üîí –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –æ–±–µ—Å–ø–µ—á–µ–Ω –ª–∏—á–Ω—ã–º –æ—Ç–¥–µ–ª–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    await message.answer(
        welcome_text,
        reply_markup=kb,
        parse_mode="HTML"
    )

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot v2 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")