#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã–≤–æ–¥, –∏—Å—Ç–æ—Ä–∏—è, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞
"""
import asyncio
import os
import logging
import hashlib
import random
import string
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from database import Database
    from translations import get_translation
    from config import BOT_TOKEN, MINI_APP_URL, BOOKMAKERS, BANKS, LIMITS, REFERRAL_SETTINGS
    from qr_service import generate_payment_url
    from autodeposit import start_autodeposit, stop_autodeposit
    from referral_service import get_referral_service, process_referral, process_deposit_referral
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure you're running from the bot2 directory")
    exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DepositStates(StatesGroup):
    waiting_for_bookmaker = State()
    waiting_for_player_id = State()
    waiting_for_amount = State()
    waiting_for_bank = State()
    confirming_deposit = State()

class WithdrawStates(StatesGroup):
    waiting_for_bookmaker = State()
    waiting_for_player_id = State()
    waiting_for_amount = State()
    waiting_for_bank = State()
    waiting_for_phone = State()
    waiting_for_site_code = State()
    confirming_withdraw = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def build_main_menu(language: str = 'ru') -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    translations = get_translation(language)
    
    buttons = [
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üßæ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
        [InlineKeyboardButton(text="üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_bookmaker_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±—É–∫–º–µ–∫–µ—Ä–∞"""
    buttons = []
    for key, bookmaker in BOOKMAKERS.items():
        if bookmaker['enabled']:
            buttons.append([InlineKeyboardButton(
                text=f"{bookmaker['emoji']} {bookmaker['name']}", 
                callback_data=f"bookmaker_{key}"
            )])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_bank_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    buttons = []
    for key, bank in BANKS.items():
        if bank['enabled']:
            buttons.append([InlineKeyboardButton(
                text=f"{bank['emoji']} {bank['name']}", 
                callback_data=f"bank_{key}"
            )])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def generate_payment_hash(amount: int, player_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞"""
    data = f"{amount}_{player_id}_{datetime.now().strftime('%Y%m%d')}"
    return hashlib.sha256(data.encode()).hexdigest()[-4:]

def generate_payment_url_legacy(bank_key: str, amount: int, player_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã (legacy)"""
    bank = BANKS[bank_key]
    qr_hash = generate_payment_hash(amount, player_id)
    return bank['url_template'].format(qr_hash=qr_hash)

def generate_payment_url_new(bank_key: str, amount: float, player_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ QR Service"""
    try:
        result = generate_payment_url(bank_key, amount, player_id)
        return result['url']
    except Exception as e:
        logger.error(f"Error generating payment URL: {e}")
        # Fallback to legacy method
        return generate_payment_url_legacy(bank_key, int(amount), player_id)

@dp.message(CommandStart())
async def on_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referral_code = None
    if len(message.text.split()) > 1:
        referral_code = message.text.split()[1]
        if referral_code.startswith('ref'):
            referral_code = referral_code[3:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'ref'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.save_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if referral_code:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if process_referral(referral_code, user_id, db.db_path):
                await message.answer("üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            else:
                logger.warning(f"Failed to process referral for user {user_id} with code {referral_code}")
        except Exception as e:
            logger.error(f"Error processing referral: {e}")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!

–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–∏–Ω–æ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(welcome_text, reply_markup=build_main_menu())

@dp.callback_query(F.data == "deposit")
async def start_deposit(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=build_bookmaker_menu()
    )
    await state.set_state(DepositStates.waiting_for_bookmaker)

@dp.callback_query(F.data.startswith("bookmaker_"))
async def select_bookmaker_deposit(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±—É–∫–º–µ–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    bookmaker_key = callback.data.split("_")[1]
    bookmaker = BOOKMAKERS[bookmaker_key]
    
    await state.update_data(bookmaker=bookmaker_key)
    await callback.message.edit_text(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞ –≤ {bookmaker['name']}:\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 12345678"
    )
    await state.set_state(DepositStates.waiting_for_player_id)

@dp.message(DepositStates.waiting_for_player_id)
async def get_player_id_deposit(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä–æ–∫–∞"""
    player_id = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –∏–≥—Ä–æ–∫–∞
    if not player_id.isdigit() or len(player_id) < 4:
        await message.answer("‚ùå ID –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    await state.update_data(player_id=player_id)
    await message.answer(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç {LIMITS['min_amount']} –¥–æ {LIMITS['max_amount']} —Å–æ–º):\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 1000"
    )
    await state.set_state(DepositStates.waiting_for_amount)

@dp.message(DepositStates.waiting_for_amount)
async def get_amount_deposit(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = int(message.text.strip())
        
        if amount < LIMITS['min_amount'] or amount > LIMITS['max_amount']:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {LIMITS['min_amount']} –¥–æ {LIMITS['max_amount']} —Å–æ–º"
            )
            return
        
        await state.update_data(amount=amount)
        await message.answer(
            "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=build_bank_menu()
        )
        await state.set_state(DepositStates.waiting_for_bank)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

@dp.callback_query(F.data.startswith("bank_"))
async def select_bank_deposit(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    bank_key = callback.data.split("_")[1]
    bank = BANKS[bank_key]
    
    data = await state.get_data()
    bookmaker = BOOKMAKERS[data['bookmaker']]
    player_id = data['player_id']
    amount = data['amount']
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_url = generate_payment_url_new(bank_key, amount, player_id)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    request_id = db.create_deposit_request(
        user_id=callback.from_user.id,
        bookmaker=data['bookmaker'],
        player_id=player_id,
        amount=amount,
        bank=bank_key,
        payment_url=payment_url
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç (—Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏, –Ω–æ –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    try:
        process_deposit_referral(request_id, callback.from_user.id, amount, db.db_path)
    except Exception as e:
        logger.error(f"Error processing referral for deposit: {e}")
    
    confirmation_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏:
üéØ –ë—É–∫–º–µ–∫–µ—Ä: {bookmaker['name']}
üÜî ID –∏–≥—Ä–æ–∫–∞: {player_id}
üí∞ –°—É–º–º–∞: {amount} —Å–æ–º
üè¶ –ë–∞–Ω–∫: {bank['name']}

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
{payment_url}

‚ö†Ô∏è –í–ê–ñ–ù–û:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. –û–ø–ª–∞—Ç–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
4. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-5 –º–∏–Ω—É—Ç

üìû –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
    
    await callback.message.edit_text(confirmation_text)
    await state.clear()

@dp.callback_query(F.data == "withdraw")
async def start_withdraw(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞"""
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=build_bookmaker_menu()
    )
    await state.set_state(WithdrawStates.waiting_for_bookmaker)

@dp.callback_query(F.data.startswith("bookmaker_"))
async def select_bookmaker_withdraw(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±—É–∫–º–µ–∫–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    bookmaker_key = callback.data.split("_")[1]
    bookmaker = BOOKMAKERS[bookmaker_key]
    
    await state.update_data(bookmaker=bookmaker_key)
    await callback.message.edit_text(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞ –≤ {bookmaker['name']}:\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 12345678"
    )
    await state.set_state(WithdrawStates.waiting_for_player_id)

@dp.message(WithdrawStates.waiting_for_player_id)
async def get_player_id_withdraw(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    player_id = message.text.strip()
    
    if not player_id.isdigit() or len(player_id) < 4:
        await message.answer("‚ùå ID –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    await state.update_data(player_id=player_id)
    await message.answer(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (–æ—Ç {LIMITS['min_withdraw']} –¥–æ {LIMITS['max_withdraw']} —Å–æ–º):\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 1000"
    )
    await state.set_state(WithdrawStates.waiting_for_amount)

@dp.message(WithdrawStates.waiting_for_amount)
async def get_amount_withdraw(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞"""
    try:
        amount = int(message.text.strip())
        
        if amount < LIMITS['min_withdraw'] or amount > LIMITS['max_withdraw']:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {LIMITS['min_withdraw']} –¥–æ {LIMITS['max_withdraw']} —Å–æ–º"
            )
            return
        
        await state.update_data(amount=amount)
        await message.answer(
            "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=build_bank_menu()
        )
        await state.set_state(WithdrawStates.waiting_for_bank)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

@dp.callback_query(F.data.startswith("bank_"))
async def select_bank_withdraw(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    bank_key = callback.data.split("_")[1]
    bank = BANKS[bank_key]
    
    await state.update_data(bank=bank_key)
    await callback.message.edit_text(
        f"üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
        f"–ü—Ä–∏–º–µ—Ä: +996700123456"
    )
    await state.set_state(WithdrawStates.waiting_for_phone)

@dp.message(WithdrawStates.waiting_for_phone)
async def get_phone_withdraw(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    if not phone.startswith('+996') or len(phone) != 13:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996700123456")
        return
    
    await state.update_data(phone=phone)
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Å–∞–π—Ç–∞ –±—É–∫–º–µ–∫–µ—Ä–∞:\n\n"
        "–≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏."
    )
    await state.set_state(WithdrawStates.waiting_for_site_code)

@dp.message(WithdrawStates.waiting_for_site_code)
async def get_site_code_withdraw(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å —Å–∞–π—Ç–∞"""
    site_code = message.text.strip()
    
    if len(site_code) < 4:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
        return
    
    data = await state.get_data()
    bookmaker = BOOKMAKERS[data['bookmaker']]
    bank = BANKS[data['bank']]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    request_id = db.create_withdraw_request(
        user_id=message.from_user.id,
        bookmaker=data['bookmaker'],
        player_id=data['player_id'],
        amount=data['amount'],
        bank=data['bank'],
        phone=data['phone'],
        site_code=site_code
    )
    
    confirmation_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!

üìã –î–µ—Ç–∞–ª–∏:
üéØ –ë—É–∫–º–µ–∫–µ—Ä: {bookmaker['name']}
üÜî ID –∏–≥—Ä–æ–∫–∞: {data['player_id']}
üí∞ –°—É–º–º–∞: {data['amount']} —Å–æ–º
üè¶ –ë–∞–Ω–∫: {bank['name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üîê –ö–æ–¥: {site_code}

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-30 –º–∏–Ω—É—Ç.

üìû –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
    
    await message.answer(confirmation_text)
    await state.clear()

@dp.callback_query(F.data == "history")
async def show_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    deposits = db.get_user_deposits(user_id, limit=10)
    withdrawals = db.get_user_withdrawals(user_id, limit=10)
    
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
    
    if not deposits and not withdrawals:
        history_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        all_operations = []
        for deposit in deposits:
            all_operations.append({
                'type': 'deposit',
                'amount': deposit['amount'],
                'status': deposit['status'],
                'created_at': deposit['created_at'],
                'bookmaker': deposit['bookmaker']
            })
        
        for withdrawal in withdrawals:
            all_operations.append({
                'type': 'withdraw',
                'amount': withdrawal['amount'],
                'status': withdrawal['status'],
                'created_at': withdrawal['created_at'],
                'bookmaker': withdrawal['bookmaker']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        all_operations.sort(key=lambda x: x['created_at'], reverse=True)
        
        for op in all_operations[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = "‚úÖ" if op['status'] == 'completed' else "‚è≥" if op['status'] == 'pending' else "‚ùå"
            type_emoji = "üí∞" if op['type'] == 'deposit' else "üí∏"
            bookmaker = BOOKMAKERS[op['bookmaker']]['name']
            
            history_text += f"{status_emoji} {type_emoji} {op['amount']} —Å–æ–º - {bookmaker}\n"
    
    await callback.message.edit_text(history_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))

@dp.callback_query(F.data == "referrals")
async def show_referrals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        referral_service = get_referral_service(db.db_path)
        referral_link = referral_service.generate_referral_link(user_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        stats = referral_service.get_referral_stats(user_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç
        pending_payments = referral_service.get_pending_payments(user_id)
        pending_total = sum(payment['amount'] for payment in pending_payments)
        
        referrals_text = f"""
ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:
{referral_link}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {stats['total_referrals']} —á–µ–ª–æ–≤–µ–∫
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earnings']:.2f} —Å–æ–º
‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã: {pending_total:.2f} —Å–æ–º

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% (1-–π —É—Ä–æ–≤–µ–Ω—å) –∏ 2% (2-–π —É—Ä–æ–≤–µ–Ω—å)
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: 100 —Å–æ–º

üìà –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!
"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        buttons = [
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={referral_link}")],
            [InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="referral_leaderboard")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        await callback.message.edit_text(referrals_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        
    except Exception as e:
        logger.error(f"Error showing referrals: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

@dp.callback_query(F.data == "instruction")
async def show_instruction(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    instruction_text = """
üßæ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üí∞ –ü–û–ü–û–õ–ù–ï–ù–ò–ï:
1. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞
3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
4. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ
6. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

üí∏ –í–´–í–û–î:
1. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞
3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
4. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
5. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
6. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Å–∞–π—Ç–∞
7. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-30 –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
"""
    
    await callback.message.edit_text(instruction_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))

@dp.callback_query(F.data == "support")
async def show_support(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = """
üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞

üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:
‚Ä¢ Telegram: @luxon_support
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 5-30 –º–∏–Ω—É—Ç

üÜò –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –í—ã–≤–æ–¥ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
"""
    
    await callback.message.edit_text(support_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/luxon_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))

@dp.callback_query(F.data == "referral_leaderboard")
async def show_referral_leaderboard(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        referral_service = get_referral_service(db.db_path)
        leaderboard = referral_service.get_referral_leaderboard(10)
        
        if not leaderboard:
            leaderboard_text = "üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞"
        else:
            leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            
            for i, user in enumerate(leaderboard, 1):
                name = user.get('first_name', '') or user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                referrals_count = user.get('referrals_count', 0)
                total_earnings = user.get('total_earnings', 0)
                
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                
                leaderboard_text += f"{medal} {name}\n"
                leaderboard_text += f"   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
                leaderboard_text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earnings:.2f} —Å–æ–º\n\n"
        
        await callback.message.edit_text(
            leaderboard_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error showing leaderboard: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_main_menu()
    )

@dp.callback_query(F.data == "cancel")
async def cancel_operation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_main_menu()
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting Telegram bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    try:
        await start_autodeposit(db.db_path, bot)
        logger.info("Auto-deposit watcher started")
    except Exception as e:
        logger.error(f"Failed to start auto-deposit: {e}")
    
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            await stop_autodeposit()
            logger.info("Auto-deposit watcher stopped")
        except Exception as e:
            logger.error(f"Error stopping auto-deposit: {e}")

if __name__ == "__main__":
    asyncio.run(main())
