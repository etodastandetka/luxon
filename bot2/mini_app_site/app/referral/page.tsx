"use client"
import { useState, useEffect } from 'react'
import LanguageSelector from '../../components/LanguageSelector'
import { useLanguage } from '../../components/LanguageContext'

export default function ReferralPage() {
  const [referralLink, setReferralLink] = useState('')
  const [earned, setEarned] = useState(0)
  const [referralCount, setReferralCount] = useState(0)
  const [loading, setLoading] = useState(false)
  const [topPlayers, setTopPlayers] = useState([])
  const [userRank, setUserRank] = useState(0)
  const [isFromBot, setIsFromBot] = useState(true)
  const { language, setLanguage } = useLanguage()
  
  const handleLanguageChange = (newLanguage: string) => {
    setLanguage(newLanguage)
    localStorage.setItem('user_language', newLanguage)
  }

  useEffect(() => {
    loadReferralData()
  }, [])

  const loadReferralData = async () => {
    setLoading(true)
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
      const tg = (window as any).Telegram?.WebApp
      let userId = null
      
      console.log('=== DEBUG: Telegram WebApp Data ===')
      console.log('Telegram object:', tg)
      console.log('initDataUnsafe:', tg?.initDataUnsafe)
      console.log('initData:', tg?.initData)
      console.log('user:', tg?.initDataUnsafe?.user)
      console.log('=====================================')
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è user ID –∏–∑ Telegram WebApp
      if (tg?.initDataUnsafe?.user?.id) {
        userId = tg.initDataUnsafe.user.id
        setIsFromBot(true)
        console.log('‚úÖ User ID from initDataUnsafe:', userId)
        console.log('Full user data:', tg.initDataUnsafe.user)
      } else if (tg?.initData) {
        // –ü–∞—Ä—Å–∏–º initData –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try {
          console.log('Parsing initData:', tg.initData)
          const params = new URLSearchParams(tg.initData)
          const userParam = params.get('user')
          console.log('User param from initData:', userParam)
          if (userParam) {
            const userData = JSON.parse(decodeURIComponent(userParam))
            userId = userData.id
            setIsFromBot(true)
            console.log('‚úÖ User ID from initData:', userId)
            console.log('Full user data from initData:', userData)
          }
        } catch (e) {
          console.log('‚ùå Error parsing initData:', e)
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –∏–∑ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      if (!userId) {
        console.log('‚ùå Not opened from Telegram bot, using test user ID')
        userId = 'test_user_123'
        setIsFromBot(false)
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
      // TODO: –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –±–æ—Ç–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
      const link = `https://t.me/lux_on_bot?start=ref${userId}`
      setReferralLink(link)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å Django API
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:3001' 
        : 'https://xendro.pro'
      const response = await fetch(`${apiUrl}/api/public/referral-data?user_id=${userId}`)
      const data = await response.json()
      
      if (data.success) {
        setEarned(data.earned || 0)
        setReferralCount(data.referral_count || 0)
        setTopPlayers(data.top_players || [])
        setUserRank(data.user_rank || 0)
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        setTopPlayers([])
        setUserRank(0)
      }
    } catch (error) {
      console.error('Error loading referral data:', error)
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      setTopPlayers([])
      setUserRank(0)
    } finally {
      setLoading(false)
    }
  }

  const translations = {
    ru: {
      title: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
      subtitle: '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ',
      yourLink: '–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
      copyLink: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
      shareLink: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
      earned: '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      referrals: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      nextPayout: '–°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞',
      howItWorks: '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      topPlayers: 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤',
      yourRank: '–í–∞—à–µ –º–µ—Å—Ç–æ',
      prizes: '–ü—Ä–∏–∑—ã',
      firstPlace: '1 –º–µ—Å—Ç–æ: 10,000 —Å–æ–º',
      secondPlace: '2 –º–µ—Å—Ç–æ: 5,000 —Å–æ–º',
      thirdPlace: '3 –º–µ—Å—Ç–æ: 2,500 —Å–æ–º',
      steps: [
        '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏',
        '–ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5%',
        '–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞',
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: 100 —Å–æ–º'
      ],
      shareText: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤! üí∏\n–ë—ã—Å—Ç—Ä–æ –ø–æ–ø–æ–ª–Ω—è–π 1xBet, Melbet, Mostbet, 1Win –∏ –≤—ã–≤–æ–¥–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ üöÄ\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ',
      copied: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!',
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏',
      backToMain: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é'
    },
    en: {
      title: 'üë• Referral Program',
      subtitle: 'Invite friends and earn together',
      yourLink: 'Your referral link',
      copyLink: 'Copy link',
      shareLink: 'Share link',
      earned: 'Earned from referrals',
      referrals: 'Number of referrals',
      nextPayout: 'Next payout',
      howItWorks: 'How it works',
      topPlayers: 'üèÜ Top Players',
      yourRank: 'Your rank',
      prizes: 'Prizes',
      firstPlace: '1st place: 10,000 som',
      secondPlace: '2nd place: 5,000 som',
      thirdPlace: '3rd place: 2,500 som',
      steps: [
        'Share the link with friends',
        'You get 5% for each referral deposit',
        'Payouts happen automatically at the end of the month',
        'Minimum payout amount: 100 som'
      ],
      shareText: 'Join the deposit and withdrawal platform! üí∏\nQuickly top up 1xBet, Melbet, Mostbet, 1Win and withdraw funds without delays üöÄ\nRegister using my link',
      copied: 'Link copied!',
      error: 'Error copying',
      backToMain: 'üîô Back to main'
    }
  }

  const t = translations[language as keyof typeof translations] || translations.ru

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(referralLink)
      alert(t.copied)
    } catch (err) {
      alert(t.error)
    }
  }

  const shareLink = () => {
    const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(t.shareText)}`
    window.open(shareUrl, '_blank')
  }

  return (
    <main className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center space-y-2">
        <h1 className="text-2xl font-bold text-white">{t.title}</h1>
        <p className="text-sm text-white/70">{t.subtitle}</p>
        <div className="flex justify-center">
          <LanguageSelector />
        </div>
      </div>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –∏–∑ –±–æ—Ç–∞ */}
      {!isFromBot && (
        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3 mb-4">
          <div className="text-yellow-400 font-semibold text-sm">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</div>
          <div className="text-white/80 text-sm mt-1">
            –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
          </div>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {process.env.NODE_ENV === 'development' && (
        <div className="bg-gray-800/50 border border-gray-600 rounded-lg p-3 mb-4">
          <div className="text-gray-400 text-xs">
            <div>Debug: isFromBot = {isFromBot.toString()}</div>
            <div>Debug: referralLink = {referralLink}</div>
            <div>Debug: Telegram WebApp = {typeof window !== 'undefined' && window.Telegram?.WebApp ? 'Available' : 'Not available'}</div>
          </div>
        </div>
      )}

      {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
      <section className="card space-y-4">
        <h2 className="text-lg font-semibold text-white">{t.yourLink}</h2>
        <div className="space-y-3">
          <div className="bg-gray-800 p-3 rounded-lg">
            <p className="text-sm text-white/80 break-all">{referralLink}</p>
          </div>
          <div className="flex gap-2">
            <button 
              onClick={copyToClipboard}
              className="flex-1 bg-blue-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-blue-600 transition-colors"
            >
              {t.copyLink}
            </button>
            <button 
              onClick={shareLink}
              className="flex-1 bg-green-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors"
            >
              {t.shareLink}
            </button>
          </div>
        </div>
      </section>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 gap-4">
        <div className="card text-center">
          <div className="text-2xl font-bold text-green-400">{earned} —Å–æ–º</div>
          <div className="text-sm text-white/70">{t.earned}</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-blue-400">{referralCount}</div>
          <div className="text-sm text-white/70">{t.referrals}</div>
        </div>
      </div>

      {/* –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ */}
      <section className="card space-y-4">
        <h2 className="text-lg font-semibold text-white">{t.topPlayers}</h2>
        
        {/* –ü—Ä–∏–∑—ã */}
        <div className="grid grid-cols-3 gap-2 text-center">
          <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-2">
            <div className="text-xs text-yellow-400">ü•á</div>
            <div className="text-xs text-white/80">{t.firstPlace}</div>
          </div>
          <div className="bg-gray-500/20 border border-gray-500/30 rounded-lg p-2">
            <div className="text-xs text-gray-400">ü•à</div>
            <div className="text-xs text-white/80">{t.secondPlace}</div>
          </div>
          <div className="bg-orange-500/20 border border-orange-500/30 rounded-lg p-2">
            <div className="text-xs text-orange-400">ü•â</div>
            <div className="text-xs text-white/80">{t.thirdPlace}</div>
          </div>
        </div>

        {/* –í–∞—à–µ –º–µ—Å—Ç–æ */}
        {userRank > 0 && (
          <div className="bg-purple-500/20 border border-purple-500/30 rounded-lg p-3 text-center">
            <div className="text-sm text-purple-400 font-semibold">{t.yourRank}: #{userRank}</div>
          </div>
        )}

        {/* –¢–æ–ø-3 –∏–≥—Ä–æ–∫–∏ */}
        <div className="space-y-2">
          {topPlayers.length > 0 ? topPlayers.slice(0, 3).map((player: any, index: number) => (
            <div key={player.id} className="flex items-center justify-between bg-white/5 rounded-lg p-3">
              <div className="flex items-center space-x-3">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                  index === 0 ? 'bg-yellow-500 text-black' :
                  index === 1 ? 'bg-gray-400 text-white' :
                  index === 2 ? 'bg-orange-500 text-white' :
                  'bg-gray-600 text-white'
                }`}>
                  {index + 1}
                </div>
                <div>
                  <div className="text-white font-semibold text-base">{player.username || `–ò–≥—Ä–æ–∫ #${player.id}`}</div>
                  <div className="text-sm text-white/70">{player.referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-green-400 font-bold text-lg">{player.total_deposits.toLocaleString()} —Å–æ–º</div>
                <div className="text-sm text-white/60">–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</div>
              </div>
            </div>
          )) : (
            <div className="text-center text-white/60 py-4">
              <div>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤</div>
              <div className="text-xs mt-1">–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</div>
            </div>
          )}
        </div>
      </section>

      {/* –°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ */}
      <section className="card text-center">
        <div className="text-lg font-semibold text-white mb-2">{t.nextPayout}</div>
        <div className="text-2xl font-bold text-yellow-400">1 –Ω–æ—è–±—Ä—è</div>
        <div className="text-sm text-white/70 mt-1">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞</div>
      </section>

      {/* –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç */}
      <section className="card space-y-4">
        <h2 className="text-lg font-semibold text-white">{t.howItWorks}</h2>
        <div className="space-y-3">
          {t.steps.map((step, index) => (
            <div key={index} className="flex items-start space-x-3">
              <div className="flex-shrink-0 w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-sm font-semibold">
                {index + 1}
              </div>
              <p className="text-sm text-white/80 leading-relaxed">{step}</p>
            </div>
          ))}
        </div>
      </section>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="text-center">
        <a 
          href="/" 
          className="inline-block bg-gray-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-700 transition-colors"
        >
          {t.backToMain}
        </a>
      </div>

      {/* Footer —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ */}
      <div className="text-center text-white/60 text-sm mt-4">
        @lux_on_bot
      </div>
    </main>
  )
}