"use client"
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import LanguageSelector from '../../../components/LanguageSelector'
import { useLanguage } from '../../../components/LanguageContext'

export default function WithdrawConfirm() {
    const [bank, setBank] = useState('')
  const [qrPhoto, setQrPhoto] = useState('')
  const [phone, setPhone] = useState('')
  const [userId, setUserId] = useState('')
  const [siteCode, setSiteCode] = useState('')
  const { language } = useLanguage()
  const router = useRouter()

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedBookmaker = localStorage.getItem('withdraw_bookmaker') || ''
    const savedBank = localStorage.getItem('withdraw_bank') || ''
    const savedQrPhoto = localStorage.getItem('withdraw_qr_photo') || ''
    const savedPhone = localStorage.getItem('withdraw_phone') || ''
    const savedUserId = localStorage.getItem('withdraw_user_id') || ''
    const savedSiteCode = localStorage.getItem('withdraw_site_code') || ''
    
    setBank(savedBank)
    setQrPhoto(savedQrPhoto)
    setPhone(savedPhone)
    setUserId(savedUserId)
    setSiteCode(savedSiteCode)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if (!savedBookmaker || !savedBank || !savedQrPhoto || !savedPhone || !savedUserId || !savedSiteCode) {
      router.push('/withdraw/step0')
    } else {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      createWithdrawRequest()
    }
  }, [router])

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
  const createWithdrawRequest = async () => {
    try {
      const bookmaker = localStorage.getItem('withdraw_bookmaker') || ''
      const amount = localStorage.getItem('withdraw_amount') || '0'
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
      const telegramUser = getTelegramUser()
      
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥...', {
        type: 'withdraw',
        bookmaker,
        userId: parseInt(userId),
        phone,
        amount: parseFloat(amount),
        bank,
        telegramUser
      })

      const response = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'withdraw',
          bookmaker: bookmaker,
          userId: parseInt(userId),
          phone: phone,
          amount: parseFloat(amount),
          bank: bank,
          playerId: userId, // –î–æ–±–∞–≤–ª—è–µ–º playerId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          telegram_user_id: telegramUser?.id,
          telegram_username: telegramUser?.username,
          telegram_first_name: telegramUser?.first_name,
          telegram_last_name: telegramUser?.last_name,
          telegram_language_code: telegramUser?.language_code
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', data)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏
        localStorage.setItem('withdraw_transaction_id', data.id || data.transactionId)
      } else {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', errorData)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error)
    }
  }

  const handleConfirm = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const bookmaker = localStorage.getItem('withdraw_bookmaker') || ''
      const amount = localStorage.getItem('withdraw_amount') || '0'
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      if (!bookmaker || !amount || !userId || !phone || !bank || !siteCode) {
        alert('–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
        return
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
      const requestId = Math.random().toString(36).slice(2, 8).toUpperCase()
      
      console.log('Sending data:', {
        type: 'withdraw',
        bookmaker: bookmaker,
        user_id: parseInt(userId),
        phone: phone,
        amount: parseFloat(amount),
        bank: bank,
        qr_photo: qrPhoto,
        site_code: siteCode,
        request_id: requestId
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ Django API
      const response = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'withdraw',
          bookmaker: bookmaker,
          user_id: parseInt(userId),
          phone: phone,
          amount: parseFloat(amount),
          bank: bank,
          qr_photo: qrPhoto,
          site_code: siteCode,
          request_id: requestId
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        console.log('Withdraw request created:', result)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const message = `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\nüè¶ –ë–∞–Ω–∫: ${getBankName(bank)}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: +${phone}\nüÜî ID: ${userId}\nüîë –ö–æ–¥: ${siteCode}\nüÜî ID –∑–∞—è–≤–∫–∏: ${requestId}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
        
        alert(message)
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('withdraw_bookmaker')
        localStorage.removeItem('withdraw_bank')
        localStorage.removeItem('withdraw_qr_photo')
        localStorage.removeItem('withdraw_phone')
        localStorage.removeItem('withdraw_user_id')
        localStorage.removeItem('withdraw_site_code')
        localStorage.removeItem('withdraw_amount')
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        router.push('/')
      } else {
        const errorData = await response.json()
        console.error('API Error:', errorData)
        throw new Error(`Failed to create withdraw request: ${errorData.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Error creating withdraw request:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
  }

  const handleBack = () => {
    router.push('/withdraw/step5')
  }

  const getBankName = (bankCode: string) => {
    const bankNames = {
      'demirbank': 'DemirBank',
      'odengi': 'O! bank',
      'balance': 'Balance.kg',
      'bakai': 'Bakai',
      'megapay': 'MegaPay',
      'mbank': 'MBank'
    }
    return bankNames[bankCode as keyof typeof bankNames] || bankCode
  }

  const translations = {
    ru: {
      title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞',
      subtitle: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ',
      confirm: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
      back: '–ù–∞–∑–∞–¥',
      bank: '–ë–∞–Ω–∫',
      phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
      userId: 'ID –∞–∫–∫–∞—É–Ω—Ç–∞',
      siteCode: '–ö–æ–¥ —Å —Å–∞–π—Ç–∞',
      qrCode: 'QR-–∫–æ–¥'
    },
    en: {
      title: 'Confirm withdrawal',
      subtitle: 'Check data',
      confirm: 'Confirm',
      back: 'Back',
      bank: 'Bank',
      phone: 'Phone',
      userId: 'Account ID',
      siteCode: 'Site code',
      qrCode: 'QR code'
    },
    ky: {
      title: '–ß—ã–≥–∞—Ä—É—É–Ω—É —ã—Ä–∞—Å—Ç–æ–æ',
      subtitle: '–ú–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑',
      confirm: '–´—Ä–∞—Å—Ç–æ–æ',
      back: '–ê—Ä—Ç–∫–∞',
      bank: '–ë–∞–Ω–∫',
      phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
      userId: '–ê–∫–∫–∞—É–Ω—Ç ID',
      siteCode: '–°–∞–π—Ç –∫–æ–¥—É',
      qrCode: 'QR-–∫–æ–¥'
    },
    uz: {
      title: 'Yechib olishni tasdiqlash',
      subtitle: 'Ma\'lumotlarni tekshiring',
      confirm: 'Tasdiqlash',
      back: 'Orqaga',
      bank: 'Bank',
      phone: 'Telefon',
      userId: 'Hisob ID',
      siteCode: 'Sayt kodi',
      qrCode: 'QR kod'
    }
  }

  const t = translations[language as keyof typeof translations] || translations.ru

  return (
    <main className="space-y-4">
      <div className="flex justify-between items-center">
        <h1 className="text-xl font-bold">{t.title}</h1>
        <LanguageSelector />
      </div>
      
      <div className="card space-y-4">
        <div className="text-center">
          <h2 className="text-lg font-semibold">{t.subtitle}</h2>
        </div>
        
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-white/70">{t.bank}:</span>
            <span className="font-semibold">{getBankName(bank)}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-white/70">{t.phone}:</span>
            <span className="font-semibold">+{phone}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-white/70">{t.userId}:</span>
            <span className="font-semibold">{userId}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-white/70">{t.siteCode}:</span>
            <span className="font-semibold">{siteCode}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-white/70">{t.qrCode}:</span>
            <span className="font-semibold text-xs break-all">
              üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            </span>
          </div>
        </div>
        
        <div className="flex gap-2">
          <button 
            className="btn btn-ghost flex-1"
            onClick={handleBack}
          >
            {t.back}
          </button>
          <button 
            className="btn btn-primary flex-1"
            onClick={handleConfirm}
          >
            {t.confirm}
          </button>
        </div>
      </div>
    </main>
  )
}