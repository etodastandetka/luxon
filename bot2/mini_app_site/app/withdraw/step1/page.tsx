"use client"
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import BankButtons from '../../../components/BankButtons'
import LanguageSelector from '../../../components/LanguageSelector'
import { useLanguage } from '../../../components/LanguageContext'

export default function WithdrawStep1() {
  const [bank, setBank] = useState('')
  const [enabledBanks, setEnabledBanks] = useState<string[]>([])
  const { language } = useLanguage()
  const router = useRouter()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–≤–æ–¥–æ–≤
  useEffect(() => {
    async function loadWithdrawalSettings() {
      try {
        const base = process.env.NODE_ENV === 'development' 
          ? 'http://localhost:8081' 
          : 'https://xendro.pro'
        const res = await fetch(`${base}/bot/api/payment-settings/`, { cache: 'no-store' })
        const data = await res.json()
        console.log('üìã Withdrawal settings from API:', data)
        if (data && data.withdrawals && data.withdrawals.banks) {
          // –ú–∞–ø–ø–∏–º –∫–æ–¥—ã –±–∞–Ω–∫–æ–≤ –∏–∑ API –≤ –∫–æ–¥—ã –¥–ª—è BankButtons
          const bankCodeMapping: Record<string, string> = {
            'kompanion': 'kompanion',
            'odengi': 'omoney',
            'bakai': 'bakai',
            'balance': 'balance',
            'megapay': 'megapay',
            'mbank': 'mbank',
            'demir': 'demirbank',
            'demirbank': 'demirbank'
          }
          const mappedBanks = data.withdrawals.banks
            .map((b: any) => {
              const code = b.code || b
              const mapped = bankCodeMapping[code] || code
              console.log(`  Mapping: ${code} -> ${mapped}`)
              return mapped
            })
            .filter(Boolean)
          console.log('‚úÖ Mapped enabled banks for withdrawals:', mappedBanks)
          setEnabledBanks(mappedBanks)
        } else {
          console.warn('‚ö†Ô∏è No withdrawal banks in settings, will show all banks')
          setEnabledBanks([]) // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–æ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–≤–æ–¥–æ–≤:', error)
      }
    }
    loadWithdrawalSettings()
  }, [])

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–º–µ–∫–µ—Ä–∞
    const bookmaker = localStorage.getItem('withdraw_bookmaker')
    if (!bookmaker) {
      router.push('/withdraw/step0')
    }
  }, [router])

  const handleNext = () => {
    if (!bank) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫')
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    localStorage.setItem('withdraw_bank', bank)
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    router.push('/withdraw/step2')
  }

  const translations = {
    ru: {
      title: '–í—ã–≤–æ–¥ - –®–∞–≥ 1',
      subtitle: '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞',
      instruction: '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞',
      next: '–î–∞–ª–µ–µ',
      back: '–ù–∞–∑–∞–¥'
    },
    en: {
      title: 'Withdraw - Step 1',
      subtitle: 'Select withdrawal bank',
      instruction: 'Choose the bank to withdraw funds to',
      next: 'Next',
      back: 'Back'
    },
    ky: {
      title: '–ß—ã–≥–∞—Ä—É—É - 1-—á–∏ –∫–∞–¥–∞–º',
      subtitle: '–ß—ã–≥–∞—Ä—É—É –±–∞–Ω–∫—ã–Ω —Ç–∞–Ω–¥–∞“£—ã–∑',
      instruction: '–ê–∫—á–∞ —á—ã–≥–∞—Ä—É—É–Ω—É –∫–∞–∞–ª–∞–≥–∞–Ω –±–∞–Ω–∫—Ç—ã —Ç–∞–Ω–¥–∞“£—ã–∑',
      next: '–ö–∏–π–∏–Ω–∫–∏',
      back: '–ê—Ä—Ç–∫–∞'
    },
    uz: {
      title: 'Yechib olish - 1-qadam',
      subtitle: 'Yechib olish bankini tanlang',
      instruction: 'Pul yechib olishni xohlagan bankni tanlang',
      next: 'Keyingi',
      back: 'Orqaga'
    }
  }

  const t = translations[language as keyof typeof translations] || translations.ru

  return (
    <main className="space-y-4">
      <div className="flex justify-between items-center">
        <h1 className="text-xl font-bold">{t.title}</h1>
        <LanguageSelector />
      </div>
      
      <div className="card space-y-4">
        <div className="text-center">
          <h2 className="text-lg font-semibold">{t.subtitle}</h2>
          <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
            <div className="bg-accent h-2 rounded-full" style={{width: '33%'}}></div>
          </div>
          <p className="text-sm text-white/70 mt-1">–®–∞–≥ 2 –∏–∑ 6</p>
        </div>
        
        <p className="text-white/80 text-center">{t.instruction}</p>
        
        <BankButtons 
          onPick={setBank} 
          selected={bank} 
          enabledBanks={enabledBanks.length > 0 ? enabledBanks : []}
        />
        
        <div className="flex gap-2">
          <button 
            className="btn btn-ghost flex-1"
            onClick={() => router.push('/withdraw/step0')}
          >
            {t.back}
          </button>
          <button 
            className="btn btn-primary flex-1"
            onClick={handleNext}
            disabled={!bank}
          >
            {t.next}
          </button>
        </div>
      </div>
    </main>
  )
}