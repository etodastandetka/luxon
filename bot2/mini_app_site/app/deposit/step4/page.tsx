"use client"
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import BankButtons from '../../../components/BankButtons'
import LanguageSelector from '../../../components/LanguageSelector'
import PageTransition from '../../../components/PageTransition'
import { useLanguage } from '../../../components/LanguageContext'
import { getTelegramUser, syncWithBot, notifyUser } from '../../../utils/telegram'

export default function DepositStep4() {
  const [bank, setBank] = useState('omoney') // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é O!Money
  const [paymentUrl, setPaymentUrl] = useState('')
  const [qrData, setQrData] = useState<any>(null)
  const [timeLeft, setTimeLeft] = useState(300) // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [isPaid, setIsPaid] = useState(false)
  const router = useRouter()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
  const [bookmaker, setBookmaker] = useState('')
  const [playerId, setPlayerId] = useState('')
  const [amount, setAmount] = useState(0)
  const { language } = useLanguage()

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedBookmaker = localStorage.getItem('deposit_bookmaker') || ''
    const savedPlayerId = localStorage.getItem('deposit_user_id') || ''
    const savedAmount = parseFloat(localStorage.getItem('deposit_amount') || '0')
    
    setBookmaker(savedBookmaker)
    setPlayerId(savedPlayerId)
    setAmount(savedAmount)
  }, [])

  // –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –æ–ø–ª–∞—Ç–∏–ª"
  useEffect(() => {
    if (bookmaker && playerId && amount > 0) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ QR –∫–æ–¥
      generateQRCode()
    }
  }, [bookmaker, playerId, amount])

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      if (timeLeft % 10 === 0) {
        checkPaymentStatus()
      }
      
      return () => clearTimeout(timer)
    } else {
      // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
      handleTimeExpired()
    }
  }, [timeLeft])

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeExpired = async () => {
    try {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Django API
      const transactionId = localStorage.getItem('deposit_transaction_id')
      if (transactionId) {
        const response = await fetch('/api/payment', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: transactionId,
            status: 'rejected',
            reason: '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ'
          })
        })
        
        if (response.ok) {
          console.log('–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        }
      }
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      localStorage.removeItem('deposit_bookmaker')
      localStorage.removeItem('deposit_user_id')
      localStorage.removeItem('deposit_amount')
      localStorage.removeItem('deposit_transaction_id')
      
      alert('‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
      router.push('/')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error)
      router.push('/')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
  const checkPaymentStatus = async () => {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã/API
      // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–æ
      if (timeLeft < 120 && !isPaid) {
        setIsPaid(true)
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        await sendPaymentConfirmation()
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:', error)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  const createDepositRequest = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ)
      const tg = (window as any).Telegram?.WebApp
      let telegramUser = null
      
      console.log('=== DEBUG: Telegram WebApp Data ===')
      console.log('Telegram object:', tg)
      console.log('initDataUnsafe:', tg?.initDataUnsafe)
      console.log('initData:', tg?.initData)
      console.log('user:', tg?.initDataUnsafe?.user)
      console.log('=====================================')
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è user ID –∏–∑ Telegram WebApp (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ)
      if (tg?.initDataUnsafe?.user) {
        telegramUser = tg.initDataUnsafe.user
        console.log('‚úÖ User from initDataUnsafe:', telegramUser)
      } else if (tg?.initData) {
        // –ü–∞—Ä—Å–∏–º initData –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try {
          console.log('Parsing initData:', tg.initData)
          const params = new URLSearchParams(tg.initData)
          const userParam = params.get('user')
          console.log('User param from initData:', userParam)
          if (userParam) {
            telegramUser = JSON.parse(decodeURIComponent(userParam))
            console.log('‚úÖ User from initData:', telegramUser)
          }
        } catch (e) {
          console.log('‚ùå Error parsing initData:', e)
        }
      }
      
      console.log('üîç –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser)

      const response = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'deposit',
          amount: amount,
          userId: playerId,
          bookmaker: bookmaker,
          bank: bank,
          playerId: playerId, // –î–æ–±–∞–≤–ª—è–µ–º playerId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          telegram_user_id: telegramUser?.id,
          telegram_username: telegramUser?.username,
          telegram_first_name: telegramUser?.first_name,
          telegram_last_name: telegramUser?.last_name,
          telegram_language_code: telegramUser?.language_code
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', data)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        localStorage.setItem('deposit_transaction_id', data.id || data.transactionId)
        localStorage.setItem('deposit_request_id', data.id || data.transactionId) // –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–æ—Ç–æ–º
        const telegramUser = getTelegramUser()
        if (telegramUser) {
          await syncWithBot(telegramUser, 'deposit_request_created', {
            requestId: data.id || data.transactionId,
            bookmaker,
            playerId,
            amount,
            bank
          })
        }
      } else {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', errorData)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  const sendPaymentConfirmation = async () => {
    try {
      const requestId = localStorage.getItem('deposit_request_id')
      
      const response = await fetch('/api/payment', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: requestId,
          status: 'completed',
          type: 'deposit'
        })
      })
      
      if (response.ok) {
        console.log('–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
    }
  }

  // –ö–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é
  const handleIPaid = async () => {
    try {
      await createDepositRequest()
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (language === 'ru') {
        alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∏ –∑–∞—á–∏—Å–ª–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
      } else {
        alert('‚úÖ Request submitted!\n\nWe will verify your payment and credit funds within 5-10 minutes.\n\nYou will receive a notification when the deposit is completed.')
      }
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        router.push('/')
      }, 1000)
    } catch (e) {
      console.error(e)
      if (language === 'ru') {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
      } else {
        alert('‚ùå Error submitting request.\n\nPlease try again or contact support.')
      }
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const handleBankSelect = (bankKey: string) => {
    setBank(bankKey)
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –±–∞–Ω–∫–∞
    generateQRCode(bankKey)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  const calculateSHA256 = async (data: string): Promise<string> => {
    const encoder = new TextEncoder()
    const dataBuffer = encoder.encode(data)
    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)
    const hashArray = Array.from(new Uint8Array(hashBuffer))
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
  const getActiveRequisite = async (): Promise<string | null> => {
    try {
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:8081' 
        : 'https://xendro.pro'
      const response = await fetch(`${apiUrl}/api/requisites/list/`)
      if (response.ok) {
        const data = await response.json()
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –ø–æ active_id
        if (data.success && data.requisites && data.requisites.length > 0) {
          const activeRequisite = data.requisites.find((req: any) => req.id === data.active_id && req.is_active)
          if (activeRequisite) {
            return activeRequisite.value
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:', error)
    }
    return null
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback QR –∫–æ–¥–∞
  const generateFallbackQR = async (currentBank: string) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const requisite = await getActiveRequisite()
      
      if (!requisite) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç')
        return
      }

      const amountCents = Math.round(parseFloat(String(amount)) * 100)
      const amountStr = amountCents.toString().padStart(5, '0')
      
      // –°–æ–∑–¥–∞–µ–º TLV —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–º –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const payload = `00020101021232990015qr.demirbank.kg0108ib_andro10${requisite}1109202111302112021213021211328454d5b3ee5d47c7b61c0a0b07bb939a5204482953034175405${amountStr}5909DEMIRBANK6304`
      
      // –í—ã—á–∏—Å–ª—è–µ–º SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
      const checksum = await calculateSHA256(payload)
      const qrHash = payload + checksum
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
      const bankLinks = {
        'demirbank': `https://retail.demirbank.kg/#${qrHash}`,
        'omoney': `https://api.dengi.o.kg/ru/qr/#${qrHash}`,
        'balance': `https://balance.kg/#${qrHash}`,
        'bakai': `https://bakai24.app/#${qrHash}`,
        'megapay': `https://megapay.kg/get#${qrHash}`,
        'mbank': `https://app.mbank.kg/qr/#${qrHash}`
      }
      
      setQrData({
        qr_hash: qrHash,
        all_bank_urls: bankLinks,
        enabled_banks: ['demirbank', 'omoney', 'balance', 'bakai', 'megapay', 'mbank']
      })
      setPaymentUrl(bankLinks[currentBank as keyof typeof bankLinks] || bankLinks['demirbank'])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
    }
  }

  const generateQRCode = async (selectedBank?: string) => {
    try {
      const currentBank = selectedBank || bank
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const response = await fetch('/api/generate-qr', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: amount,
          bank: currentBank.toUpperCase(),
          playerId: playerId
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      setQrData(data)
      setPaymentUrl(data.primary_url)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API:', error)
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–º –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const currentBank = selectedBank || bank
      generateFallbackQR(currentBank)
    }
  }

  const handleBack = () => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    if (typeof window !== 'undefined' && (window as any).pageTransitionExit) {
      (window as any).pageTransitionExit()
      setTimeout(() => {
        router.push('/deposit/step3')
      }, 250)
    } else {
      router.push('/deposit/step3')
    }
  }

  const translations = {
    ru: {
      title: '–û–ø–ª–∞—Ç–∞',
      subtitle: '–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞—è–≤–∫—É',
      timer: '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É',
      amount: '–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ',
      bookmaker: '–ë—É–∫–º–µ–∫–µ—Ä',
      playerId: 'ID –∏–≥—Ä–æ–∫–∞',
      bank: '–ë–∞–Ω–∫',
      selectBank: '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
      paymentComplete: '–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      back: '–ù–∞–∑–∞–¥',
      iPaid: '–Ø –æ–ø–ª–∞—Ç–∏–ª',
      instructions: '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:',
      instructionSteps: [
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ',
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞',
        '–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞',
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        '–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"',
        '–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∑–∞—á–∏—Å–ª–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      ]
    },
    en: {
      title: 'Payment',
      subtitle: 'Pay the request',
      timer: 'Time to pay',
      amount: 'Amount to pay',
      bookmaker: 'Bookmaker',
      playerId: 'Player ID',
      bank: 'Bank',
      selectBank: 'Select your bank for payment',
      paymentComplete: 'Payment completed',
      back: 'Back',
      iPaid: 'I paid',
      instructions: 'How to pay:',
      instructionSteps: [
        'Select your bank from the list below',
        'Click on the selected bank button',
        'You will be redirected to the bank app',
        'Confirm payment of the specified amount in the app',
        'Return here and click "I paid"',
        'We will verify payment and credit funds automatically'
      ]
    }
  }

  const t = translations[language as keyof typeof translations] || translations.ru

  return (
    <PageTransition direction="backward">
      <main className="space-y-4 min-h-screen flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center space-y-2 fade-in">
        <div className="flex justify-between items-center">
          <h1 className="text-xl font-bold text-white">{t.title}</h1>
          <div className="scale-75">
            <LanguageSelector />
          </div>
        </div>
        <p className="text-sm text-white/70">{t.subtitle}</p>
      </div>

      {/* –¢–∞–π–º–µ—Ä */}
      <div className="card text-center pulse">
        <div className="text-3xl font-bold text-red-500 mb-2">
          {formatTime(timeLeft)}
        </div>
        <p className="text-sm text-white/70">{t.timer}</p>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ */}
      <div className="card space-y-3 slide-in-left delay-100">
        <h2 className="text-lg font-semibold text-white">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h2>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-white/70">{t.bookmaker}:</span>
            <span className="text-white">{bookmaker}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-white/70">{t.playerId}:</span>
            <span className="text-white">{playerId}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-white/70">{t.amount}:</span>
            <span className="text-white font-bold text-lg">{amount} —Å–æ–º</span>
          </div>
        </div>
      </div>



      {/* –í—ã–±–æ—Ä –±–∞–Ω–∫–∞ */}
      <div className="card space-y-4 slide-in-right delay-300">
        <h2 className="text-lg font-semibold text-white">{t.selectBank}</h2>
        <BankButtons 
          onPick={handleBankSelect} 
          selected={bank} 
          paymentUrl={paymentUrl}
          allBankUrls={qrData?.all_bank_urls}
          enabledBanks={qrData?.settings?.enabled_banks}
        />
      </div>

      {/* –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã */}
      {isPaid && (
        <div className="card text-center bg-green-900/20 border-green-500">
          <div className="text-green-500 text-lg font-semibold mb-2">
            ‚úÖ {t.paymentComplete}
          </div>
          <p className="text-sm text-white/70">
            –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.
          </p>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="card space-y-4">
        <h2 className="text-lg font-semibold text-white">{t.instructions}</h2>
        <div className="space-y-2">
          {t.instructionSteps.map((step, index) => (
            <div key={index} className="flex items-start space-x-3">
              <div className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-semibold">
                {index + 1}
              </div>
              <p className="text-sm text-white/80 leading-relaxed">{step}</p>
            </div>
          ))}
        </div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex gap-3">
        <button
          onClick={handleBack}
          className="btn btn-ghost flex-1"
        >
          {t.back}
        </button>
        <button
          onClick={handleIPaid}
          className="btn btn-primary flex-1 font-semibold"
        >
          ‚úÖ {t.iPaid}
        </button>
      </div>
    </main>
    </PageTransition>
  )
}