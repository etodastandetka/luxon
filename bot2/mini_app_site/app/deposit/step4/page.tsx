"use client"
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import BankButtons from '../../../components/BankButtons'
import LanguageSelector from '../../../components/LanguageSelector'
import PageTransition from '../../../components/PageTransition'
import { useLanguage } from '../../../components/LanguageContext'
import { getTelegramUser, syncWithBot, notifyUser } from '../../../utils/telegram'
import { useAlert } from '../../../components/useAlert'

export default function DepositStep4() {
  const [bank, setBank] = useState('omoney') // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é O!Money
  const [paymentUrl, setPaymentUrl] = useState('')
  const [qrData, setQrData] = useState<any>(null)
  const [timeLeft, setTimeLeft] = useState(300) // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [isPaid, setIsPaid] = useState(false)
  const router = useRouter()
  const { showAlert, AlertComponent } = useAlert()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
  const [bookmaker, setBookmaker] = useState('')
  const [playerId, setPlayerId] = useState('')
  const [amount, setAmount] = useState(0)
  const [depositsEnabled, setDepositsEnabled] = useState(true)
  const [requireReceiptPhoto, setRequireReceiptPhoto] = useState(false)
  const [receiptPhoto, setReceiptPhoto] = useState<File | null>(null)
  const [receiptPhotoPreview, setReceiptPhotoPreview] = useState<string | null>(null)
  const { language } = useLanguage()

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedBookmaker = localStorage.getItem('deposit_bookmaker') || ''
    const savedPlayerId = localStorage.getItem('deposit_user_id') || ''
    const savedAmount = parseFloat(localStorage.getItem('deposit_amount') || '0')
    
    setBookmaker(savedBookmaker)
    setPlayerId(savedPlayerId)
    setAmount(savedAmount)
    
    // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tg = (window as any).Telegram?.WebApp
    let telegramUserId: string | null = null
    
    if (tg?.initDataUnsafe?.user?.id) {
      telegramUserId = String(tg.initDataUnsafe.user.id)
    } else if (tg?.initData) {
      try {
        const params = new URLSearchParams(tg.initData)
        const userParam = params.get('user')
        if (userParam) {
          const user = JSON.parse(decodeURIComponent(userParam))
          telegramUserId = String(user.id)
        }
      } catch (e) {
        console.log('‚ùå Error parsing initData:', e)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞—è–≤–∫–∏
    const previousBookmaker = localStorage.getItem('previous_deposit_bookmaker') || ''
    const previousTelegramUserId = localStorage.getItem('previous_deposit_telegram_user_id') || ''
    const previousAmount = parseFloat(localStorage.getItem('previous_deposit_amount') || '0')
    const transactionId = localStorage.getItem('deposit_transaction_id')
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: –µ—Å–ª–∏ Telegram ID –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID, –∞ –Ω–µ ID –∫–∞–∑–∏–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    const isNewRequest = !previousBookmaker || 
                         !previousTelegramUserId || 
                         !telegramUserId ||
                         previousBookmaker !== savedBookmaker ||
                         previousTelegramUserId !== telegramUserId ||
                         previousAmount !== savedAmount
    
    if (isNewRequest && telegramUserId) {
      // –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      console.log('üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä')
      setIsPaid(false)
      setTimeLeft(300) // –ù–∞—á–∏–Ω–∞–µ–º —Å 5 –º–∏–Ω—É—Ç
      localStorage.removeItem('deposit_transaction_id')
      localStorage.removeItem('deposit_request_id')
      localStorage.removeItem('deposit_timer_start')
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ" –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID)
      localStorage.setItem('previous_deposit_bookmaker', savedBookmaker)
      localStorage.setItem('previous_deposit_telegram_user_id', telegramUserId)
      localStorage.setItem('previous_deposit_amount', savedAmount.toString())
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      localStorage.setItem('deposit_timer_start', Date.now().toString())
      return
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ –∑–∞—è–≤–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (transactionId) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å transaction_id, –∑–Ω–∞—á–∏—Ç –∑–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      setIsPaid(true)
      setTimeLeft(0)
      localStorage.removeItem('deposit_timer_start') // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞ - —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      return
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏)
    const timerStartTime = localStorage.getItem('deposit_timer_start')
    if (timerStartTime) {
      const startTime = parseInt(timerStartTime, 10)
      const now = Date.now()
      const elapsed = Math.floor((now - startTime) / 1000) // –ü—Ä–æ—à–ª–æ —Å–µ–∫—É–Ω–¥
      const remaining = Math.max(0, 300 - elapsed) // –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
      setTimeLeft(remaining)
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
      if (remaining === 0) {
        // –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ setTimeout, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        setTimeout(() => {
          handleTimeExpired()
        }, 100)
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      localStorage.setItem('deposit_timer_start', Date.now().toString())
    }
  }, [])

  // –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –æ–ø–ª–∞—Ç–∏–ª"
  useEffect(() => {
    if (bookmaker && playerId && amount > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)
      if (!localStorage.getItem('deposit_timer_start')) {
        localStorage.setItem('deposit_timer_start', Date.now().toString())
      }
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ QR –∫–æ–¥
      generateQRCode()
    }
  }, [bookmaker, playerId, amount])

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
  useEffect(() => {
    if (timeLeft > 0 && !isPaid) {
      const timer = setTimeout(() => {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        const timerStartTime = localStorage.getItem('deposit_timer_start')
        if (timerStartTime) {
          const startTime = parseInt(timerStartTime, 10)
          const now = Date.now()
          const elapsed = Math.floor((now - startTime) / 1000)
          const remaining = Math.max(0, 300 - elapsed)
          setTimeLeft(remaining)
          
          // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
          if (remaining === 0) {
            handleTimeExpired()
            return
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
          setTimeLeft(timeLeft - 1)
        }
      }, 1000)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      if (timeLeft % 10 === 0) {
        checkPaymentStatus()
      }
      
      return () => clearTimeout(timer)
    } else if (timeLeft === 0 && !isPaid) {
      // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
      handleTimeExpired()
    }
  }, [timeLeft, isPaid])

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeExpired = async () => {
    // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–Ω–∞–∂–∞–ª–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª"), –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if (isPaid) {
      console.log('‚è∏Ô∏è –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, –Ω–æ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º')
      return
    }
    
    try {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Django API
      const transactionId = localStorage.getItem('deposit_transaction_id')
      if (transactionId) {
        const response = await fetch('/api/payment', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: transactionId,
            status: 'rejected',
            reason: '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ'
          })
        })
        
        if (response.ok) {
          console.log('–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        }
      }
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      localStorage.removeItem('deposit_bookmaker')
      localStorage.removeItem('deposit_user_id')
      localStorage.removeItem('deposit_amount')
      localStorage.removeItem('deposit_transaction_id')
      localStorage.removeItem('deposit_timer_start') // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      localStorage.removeItem('previous_deposit_bookmaker')
      localStorage.removeItem('previous_deposit_telegram_user_id')
      localStorage.removeItem('previous_deposit_amount')
      
      showAlert({
        type: 'warning',
        title: language === 'ru' ? '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ' : 'Time expired',
        message: language === 'ru' 
          ? '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.' 
          : 'Payment time has expired. Request rejected.',
        autoClose: 3000
      })
      
      setTimeout(() => {
        router.push('/')
      }, 3000)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error)
      router.push('/')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
  const checkPaymentStatus = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API
      const transactionId = localStorage.getItem('deposit_transaction_id')
      if (transactionId) {
        const base = process.env.NODE_ENV === 'development' 
          ? 'http://localhost:3001' 
          : 'https://xendro.pro'
        const response = await fetch(`${base}/api/payment/${transactionId}`)
        if (response.ok) {
          const data = await response.json()
          // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ (completed, approved, auto_completed, autodeposit_success)
          if (data.status && ['completed', 'approved', 'auto_completed', 'autodeposit_success'].includes(data.status)) {
            if (!isPaid) {
              setIsPaid(true)
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
              localStorage.removeItem('deposit_timer_start')
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
              await sendPaymentConfirmation()
            }
          }
        }
      }
      // Fallback: –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–æ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
      // if (timeLeft < 120 && !isPaid) {
      //   setIsPaid(true)
      //   await sendPaymentConfirmation()
      // }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:', error)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  const createDepositRequest = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ)
      const tg = (window as any).Telegram?.WebApp
      let telegramUser = null
      
      console.log('=== DEBUG: Telegram WebApp Data ===')
      console.log('Telegram object:', tg)
      console.log('initDataUnsafe:', tg?.initDataUnsafe)
      console.log('initData:', tg?.initData)
      console.log('user:', tg?.initDataUnsafe?.user)
      console.log('=====================================')
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è user ID –∏–∑ Telegram WebApp (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ)
      if (tg?.initDataUnsafe?.user) {
        telegramUser = tg.initDataUnsafe.user
        console.log('‚úÖ User from initDataUnsafe:', telegramUser)
      } else if (tg?.initData) {
        // –ü–∞—Ä—Å–∏–º initData –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try {
          console.log('Parsing initData:', tg.initData)
          const params = new URLSearchParams(tg.initData)
          const userParam = params.get('user')
          console.log('User param from initData:', userParam)
          if (userParam) {
            telegramUser = JSON.parse(decodeURIComponent(userParam))
            console.log('‚úÖ User from initData:', telegramUser)
          }
        } catch (e) {
          console.log('‚ùå Error parsing initData:', e)
        }
      }
      
      console.log('üîç –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser)

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ base64, –µ—Å–ª–∏ –µ—Å—Ç—å
      let receiptPhotoBase64: string | null = null
      if (receiptPhoto) {
        receiptPhotoBase64 = await new Promise<string>((resolve, reject) => {
          const reader = new FileReader()
          reader.onloadend = () => {
            const base64String = reader.result as string
            resolve(base64String)
          }
          reader.onerror = reject
          reader.readAsDataURL(receiptPhoto)
        })
      }

      const response = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'deposit',
          amount: amount,
          userId: playerId,
          bookmaker: bookmaker,
          bank: bank,
          playerId: playerId, // –î–æ–±–∞–≤–ª—è–µ–º playerId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          telegram_user_id: telegramUser?.id,
          telegram_username: telegramUser?.username,
          telegram_first_name: telegramUser?.first_name,
          telegram_last_name: telegramUser?.last_name,
          telegram_language_code: telegramUser?.language_code,
          // –§–æ—Ç–æ —á–µ–∫–∞ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
          receipt_photo: receiptPhotoBase64,
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', data)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        localStorage.setItem('deposit_transaction_id', data.id || data.transactionId)
        localStorage.setItem('deposit_request_id', data.id || data.transactionId) // –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)
        if (!localStorage.getItem('deposit_timer_start')) {
          localStorage.setItem('deposit_timer_start', Date.now().toString())
          console.log('‚è±Ô∏è Timer start saved:', new Date().toISOString())
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–æ—Ç–æ–º
        const telegramUser = getTelegramUser()
        if (telegramUser) {
          await syncWithBot(telegramUser, 'deposit_request_created', {
            requestId: data.id || data.transactionId,
            bookmaker,
            playerId,
            amount,
            bank
          })
        }
      } else {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', errorData)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  const sendPaymentConfirmation = async () => {
    try {
      const requestId = localStorage.getItem('deposit_request_id')
      
      const response = await fetch('/api/payment', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: requestId,
          status: 'completed',
          type: 'deposit'
        })
      })
      
      if (response.ok) {
        console.log('–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞
  const handleReceiptPhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setReceiptPhoto(file)
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
      const reader = new FileReader()
      reader.onloadend = () => {
        setReceiptPhotoPreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  // –ö–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é
  const handleIPaid = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞
    if (requireReceiptPhoto && !receiptPhoto) {
      showAlert({
        type: 'error',
        title: language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error',
        message: language === 'ru'
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ'
          : 'Please upload receipt photo'
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    if (isPaid) {
      showAlert({
        type: 'info',
        title: language === 'ru' ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' : 'Info',
        message: language === 'ru'
          ? '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.'
          : 'Request already submitted. Please wait for processing.'
      })
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)
    if (!localStorage.getItem('deposit_timer_start')) {
      localStorage.setItem('deposit_timer_start', Date.now().toString())
    }
    try {
      await createDepositRequest()
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isPaid –≤ true
      setIsPaid(true)
      setTimeLeft(0) // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ localStorage, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞—Ö–æ–¥–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è
      localStorage.removeItem('deposit_timer_start')
      
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const tg = (window as any).Telegram?.WebApp
      let telegramUserId: string | null = null
      
      if (tg?.initDataUnsafe?.user?.id) {
        telegramUserId = String(tg.initDataUnsafe.user.id)
      } else if (tg?.initData) {
        try {
          const params = new URLSearchParams(tg.initData)
          const userParam = params.get('user')
          if (userParam) {
            const user = JSON.parse(decodeURIComponent(userParam))
            telegramUserId = String(user.id)
          }
        } catch (e) {
          console.log('‚ùå Error parsing initData:', e)
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID)
      if (telegramUserId) {
        localStorage.setItem('previous_deposit_bookmaker', bookmaker)
        localStorage.setItem('previous_deposit_telegram_user_id', telegramUserId)
        localStorage.setItem('previous_deposit_amount', amount.toString())
      }
      
      console.log('‚úÖ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏')
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      showAlert({
        type: 'success',
        title: language === 'ru' ? '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' : 'Request submitted!',
        message: language === 'ru'
          ? '–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∏ –∑–∞—á–∏—Å–ª–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.'
          : 'We will verify your payment and credit funds within 5-10 minutes.\n\nYou will receive a notification when the deposit is completed.',
        autoClose: 3000
      })
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        router.push('/')
      }, 3000)
    } catch (e) {
      console.error(e)
      showAlert({
        type: 'error',
        title: language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error',
        message: language === 'ru'
          ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          : 'Error submitting request.\n\nPlease try again or contact support.'
      })
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const handleBankSelect = (bankKey: string) => {
    setBank(bankKey)
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –±–∞–Ω–∫–∞
    generateQRCode(bankKey)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  const calculateSHA256 = async (data: string): Promise<string> => {
    const encoder = new TextEncoder()
    const dataBuffer = encoder.encode(data)
    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)
    const hashArray = Array.from(new Uint8Array(hashBuffer))
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
  const getActiveRequisite = async (): Promise<string | null> => {
    try {
      const apiUrl = process.env.NODE_ENV === 'development' 
        ? 'http://localhost:3001' 
        : 'https://xendro.pro'
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      const response = await fetch(`${apiUrl}/api/public/requisites/list/`)
      if (response.ok) {
        const data = await response.json()
        console.log('üìã Requisites data:', data)
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –ø–æ active_id –∏–ª–∏ –ø–æ is_active
        if (data.success && data.requisites && data.requisites.length > 0) {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ active_id
          if (data.active_id) {
            const activeRequisite = data.requisites.find((req: any) => req.id === data.active_id)
            if (activeRequisite) {
              console.log('‚úÖ Found active requisite by active_id:', activeRequisite.value)
              return activeRequisite.value
            }
          }
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ is_active
          const activeRequisite = data.requisites.find((req: any) => req.is_active === true)
          if (activeRequisite) {
            console.log('‚úÖ Found active requisite by is_active:', activeRequisite.value)
            return activeRequisite.value
          }
        }
      } else {
        console.error('‚ùå Requisites API response not OK:', response.status, await response.text())
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:', error)
    }
    return null
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback QR –∫–æ–¥–∞
  const generateFallbackQR = async (currentBank: string) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      let requisite = await getActiveRequisite()
      
      // –ï—Å–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (!requisite) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –≤ –∞–¥–º–∏–Ω–∫–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
        showAlert({
          type: 'error',
          title: language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error',
          message: language === 'ru'
            ? '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            : 'Active wallet not configured. Please contact support.'
        })
        return
      }
      
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –∞–¥–º–∏–Ω–∫–∏:', requisite.slice(0, 4) + '****' + requisite.slice(-4))

      const amountCents = Math.round(parseFloat(String(amount)) * 100)
      const amountStr = amountCents.toString().padStart(5, '0')
      const amountLen = amountStr.length.toString().padStart(2, '0')
      
      const requisiteLen = requisite.length.toString().padStart(2, '0')
      
      // –°–æ–∑–¥–∞–µ–º TLV —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã (–ë–ï–ó 6304)
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ Django API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const merchantAccountValue = (
        `0015qr.demirbank.kg` +  // –ü–æ–¥-—Ç–µ–≥ 00: –¥–æ–º–µ–Ω
        `01047001` +              // –ü–æ–¥-—Ç–µ–≥ 01: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∏–ø (7001)
        `10${requisiteLen}${requisite}` +  // –ü–æ–¥-—Ç–µ–≥ 10: —Ä–µ–∫–≤–∏–∑–∏—Ç
        `120211130212`            // –ü–æ–¥-—Ç–µ–≥–∏ 12, 13: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      )
      const merchantAccountLen = merchantAccountValue.length.toString().padStart(2, '0')
      
      // Payload –ë–ï–ó –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –∏ –±–µ–∑ 6304
      const payload = (
        `000201` +  // 00 - Payload Format Indicator
        `010211` +  // 01 - Point of Initiation Method (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π QR)
        `32${merchantAccountLen}${merchantAccountValue}` +  // 32 - Merchant Account
        `52044829` +  // 52 - Merchant Category Code
        `5303417` +   // 53 - Transaction Currency
        `54${amountLen}${amountStr}` +  // 54 - Amount
        `5909DEMIRBANK`  // 59 - Merchant Name
      )
      
      // –í—ã—á–∏—Å–ª—è–µ–º SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ç payload (–ë–ï–ó 6304)
      const checksumFull = await calculateSHA256(payload)
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ (–∫–∞–∫ –≤ Django API)
      const checksum = checksumFull.slice(-4).toLowerCase()
      
      // –ü–æ–ª–Ω—ã–π QR —Ö–µ—à: payload + '6304' + checksum
      const qrHash = payload + '6304' + checksum
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ (—Å –∫–ª—é—á–∞–º–∏ –∫–∞–∫ –≤ Django API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const bankLinks = {
        'DemirBank': `https://retail.demirbank.kg/#${qrHash}`,
        'O!Money': `https://api.dengi.o.kg/ru/qr/#${qrHash}`,
        'Balance.kg': `https://balance.kg/#${qrHash}`,
        'Bakai': `https://bakai24.app/#${qrHash}`,
        'MegaPay': `https://megapay.kg/get#${qrHash}`,
        'MBank': `https://app.mbank.kg/qr/#${qrHash}`,
        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'demirbank': `https://retail.demirbank.kg/#${qrHash}`,
        'omoney': `https://api.dengi.o.kg/ru/qr/#${qrHash}`,
        'balance': `https://balance.kg/#${qrHash}`,
        'bakai': `https://bakai24.app/#${qrHash}`,
        'megapay': `https://megapay.kg/get#${qrHash}`,
        'mbank': `https://app.mbank.kg/qr/#${qrHash}`
      }
      
      setQrData({
        qr_hash: qrHash,
        all_bank_urls: bankLinks,
        enabled_banks: ['demirbank', 'omoney', 'balance', 'bakai', 'megapay', 'mbank'],
        settings: {
          deposits_enabled: true
        }
      })
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –¥–ª—è primary_url
      const primaryUrlMap: Record<string, keyof typeof bankLinks> = {
        'demirbank': 'DemirBank',
        'omoney': 'O!Money',
        'balance': 'Balance.kg',
        'bakai': 'Bakai',
        'megapay': 'MegaPay',
        'mbank': 'MBank'
      }
      const primaryKey: keyof typeof bankLinks = primaryUrlMap[currentBank] || 'DemirBank'
      setPaymentUrl(bankLinks[primaryKey] || bankLinks['DemirBank'])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
    }
  }

  const generateQRCode = async (selectedBank?: string) => {
    try {
      const currentBank = selectedBank || bank
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const response = await fetch('/api/generate-qr', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: amount,
          bank: currentBank.toUpperCase(),
          playerId: playerId
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å qr_hash, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
      if (data.qr_hash) {
        const qrHash = data.qr_hash
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        const bankLinks = {
          'DemirBank': `https://retail.demirbank.kg/#${qrHash}`,
          'O!Money': `https://api.dengi.o.kg/ru/qr/#${qrHash}`,
          'Balance.kg': `https://balance.kg/#${qrHash}`,
          'Bakai': `https://bakai24.app/#${qrHash}`,
          'MegaPay': `https://megapay.kg/get#${qrHash}`,
          'MBank': `https://app.mbank.kg/qr/#${qrHash}`,
          // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          'demirbank': `https://retail.demirbank.kg/#${qrHash}`,
          'omoney': `https://api.dengi.o.kg/ru/qr/#${qrHash}`,
          'balance': `https://balance.kg/#${qrHash}`,
          'bakai': `https://bakai24.app/#${qrHash}`,
          'megapay': `https://megapay.kg/get#${qrHash}`,
          'mbank': `https://app.mbank.kg/qr/#${qrHash}`
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º data —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        data.all_bank_urls = bankLinks
        data.primary_url = bankLinks['DemirBank'] || data.primary_url
      }
      
      setQrData(data)
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Å—ã–ª–∫–∞–º
      const defaultUrl = (data.all_bank_urls as Record<string, string>)?.['DemirBank'] || 
                        (data.all_bank_urls as Record<string, string>)?.['demirbank'] || 
                        data.primary_url
      setPaymentUrl(defaultUrl || '')
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      if (data.settings) {
        setDepositsEnabled(data.settings.deposits_enabled !== false)
      }
      
      // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è enabled_banks
      try {
        const base = process.env.NODE_ENV === 'development' 
          ? 'http://localhost:3001' 
          : 'https://xendro.pro'
        const settingsRes = await fetch(`${base}/api/public/payment-settings`, { cache: 'no-store' })
        const settingsData = await settingsRes.json()
        if (settingsData && settingsData.deposits) {
          setDepositsEnabled(settingsData.deposits.enabled !== false)
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É require_receipt_photo
          if (settingsData.require_receipt_photo !== undefined) {
            setRequireReceiptPhoto(settingsData.require_receipt_photo === true)
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º enabled_banks –≤ qrData (–º–∞–ø–ø–∏–º –∫–æ–¥—ã –±–∞–Ω–∫–æ–≤ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –≤ –∫–æ–¥—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
          if (settingsData.deposits.banks) {
            const bankCodeMapping: Record<string, string> = {
              'demir': 'demirbank',
              'demirbank': 'demirbank',
              'omoney': 'omoney',
              'balance': 'balance',
              'bakai': 'bakai',
              'megapay': 'megapay',
              'mbank': 'mbank'
            }
            const mappedBanks = settingsData.deposits.banks
              .map((b: any) => {
                const code = b.code || b
                return bankCodeMapping[code] || code
              })
              .filter(Boolean)
            setQrData((prev: any) => ({
              ...prev,
              settings: {
                ...prev?.settings,
                enabled_banks: mappedBanks
              }
            }))
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:', error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API:', error)
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–º –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const currentBank = selectedBank || bank
      generateFallbackQR(currentBank)
    }
  }

  const handleBack = () => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    if (typeof window !== 'undefined' && (window as any).pageTransitionExit) {
      (window as any).pageTransitionExit()
      setTimeout(() => {
        router.push('/deposit/step3')
      }, 250)
    } else {
      router.push('/deposit/step3')
    }
  }

  const translations = {
    ru: {
      title: '–û–ø–ª–∞—Ç–∞',
      subtitle: '–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞—è–≤–∫—É',
      timer: '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É',
      amount: '–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ',
      bookmaker: '–ë—É–∫–º–µ–∫–µ—Ä',
      playerId: 'ID –∏–≥—Ä–æ–∫–∞',
      bank: '–ë–∞–Ω–∫',
      selectBank: '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
      paymentComplete: '–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      back: '–ù–∞–∑–∞–¥',
      iPaid: '–Ø –æ–ø–ª–∞—Ç–∏–ª',
      instructions: '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:',
      instructionSteps: [
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ',
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞',
        '–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞',
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        '–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"',
        '–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∑–∞—á–∏—Å–ª–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      ]
    },
    en: {
      title: 'Payment',
      subtitle: 'Pay the request',
      timer: 'Time to pay',
      amount: 'Amount to pay',
      bookmaker: 'Bookmaker',
      playerId: 'Player ID',
      bank: 'Bank',
      selectBank: 'Select your bank for payment',
      paymentComplete: 'Payment completed',
      back: 'Back',
      iPaid: 'I paid',
      instructions: 'How to pay:',
      instructionSteps: [
        'Select your bank from the list below',
        'Click on the selected bank button',
        'You will be redirected to the bank app',
        'Confirm payment of the specified amount in the app',
        'Return here and click "I paid"',
        'We will verify payment and credit funds automatically'
      ]
    }
  }

  const t = translations[language as keyof typeof translations] || translations.ru

  // –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
  if (!depositsEnabled) {
    return (
      <PageTransition direction="backward">
        <main className="space-y-4 min-h-screen flex flex-col">
          <div className="text-center space-y-2 fade-in">
            <div className="flex justify-between items-center">
              <h1 className="text-xl font-bold text-white">{t.title}</h1>
              <div className="scale-75">
                <LanguageSelector />
              </div>
            </div>
            <p className="text-sm text-white/70">{t.subtitle}</p>
          </div>

          <div className="card text-center">
            <div className="text-orange-300 text-lg font-semibold mb-2">üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</div>
            <div className="text-slate-400">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>
          </div>

          <div className="flex gap-3">
            <button
              onClick={handleBack}
              className="btn btn-ghost w-full"
            >
              ‚Üê {t.back}
            </button>
          </div>
        </main>
      </PageTransition>
    )
  }

  return (
    <PageTransition direction="backward">
      <main className="space-y-4 min-h-screen flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center space-y-2 fade-in">
        <div className="flex justify-between items-center">
          <h1 className="text-xl font-bold text-white">{t.title}</h1>
          <div className="scale-75">
            <LanguageSelector />
          </div>
        </div>
        <p className="text-sm text-white/70">{t.subtitle}</p>
      </div>

      {/* –¢–∞–π–º–µ—Ä */}
      <div className="card text-center pulse">
        <div className="text-3xl font-bold text-red-500 mb-2">
          {formatTime(timeLeft)}
        </div>
        <p className="text-sm text-white/70">{t.timer}</p>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ */}
      <div className="card space-y-3 slide-in-left delay-100">
        <h2 className="text-lg font-semibold text-white">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h2>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-white/70">{t.bookmaker}:</span>
            <span className="text-white">{bookmaker}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-white/70">{t.playerId}:</span>
            <span className="text-white">{playerId}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-white/70">{t.amount}:</span>
            <span className="text-white font-bold text-lg">{amount} —Å–æ–º</span>
          </div>
        </div>
      </div>



      {/* –í—ã–±–æ—Ä –±–∞–Ω–∫–∞ */}
      <div className="card space-y-4 slide-in-right delay-300">
        <h2 className="text-lg font-semibold text-white">{t.selectBank}</h2>
        <BankButtons 
          onPick={handleBankSelect} 
          selected={bank} 
          paymentUrl={paymentUrl}
          allBankUrls={qrData?.all_bank_urls}
          enabledBanks={qrData?.settings?.enabled_banks}
        />
      </div>

      {/* –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã */}
      {isPaid && (
        <div className="card text-center bg-green-900/20 border-green-500">
          <div className="text-green-500 text-lg font-semibold mb-2">
            ‚úÖ {t.paymentComplete}
          </div>
          <p className="text-sm text-white/70">
            –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.
          </p>
        </div>
      )}

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) */}
      {!isPaid && requireReceiptPhoto && (
        <div className="card space-y-3">
          <div>
            <h3 className="text-base font-semibold text-white mb-1">
              {language === 'ru' ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ' : 'Send payment receipt photo'}
            </h3>
            <p className="text-sm text-white/70">
              {language === 'ru' ? '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞' : 'Upload receipt photo'}
            </p>
          </div>
          
          <label className="block">
            <input
              type="file"
              accept="image/*"
              onChange={handleReceiptPhotoChange}
              className="hidden"
            />
            <div className="relative w-full min-h-[200px] bg-[#1A472A] border-2 border-dashed border-green-500 rounded-xl cursor-pointer hover:border-green-400 transition-colors flex flex-col items-center justify-center p-6">
              {receiptPhotoPreview ? (
                <>
                  <div className="w-full h-full flex flex-col items-center justify-center space-y-3">
                    <div className="relative w-full max-h-[300px] flex items-center justify-center">
                      <img
                        src={receiptPhotoPreview}
                        alt="Receipt preview"
                        className="max-w-full max-h-[300px] object-contain rounded-lg"
                      />
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          setReceiptPhoto(null)
                          setReceiptPhotoPreview(null)
                        }}
                        className="absolute top-2 right-2 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-red-600 transition-colors shadow-lg"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <div className="text-center">
                      <p className="text-white font-medium mb-1">
                        {language === 'ru' ? '–§–∞–π–ª –≤—ã–±—Ä–∞–Ω' : 'File selected'}
                      </p>
                      <p className="text-white/60 text-sm">
                        {receiptPhoto?.name || 'receipt.jpg'}
                      </p>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mb-4">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                  </div>
                  <p className="text-white text-sm text-center">
                    {language === 'ru' 
                      ? '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ'
                      : 'Click to select photo'
                    }
                  </p>
                </>
              )}
            </div>
          </label>
          
          <p className="text-xs text-gray-400 text-center">
            {language === 'ru' 
              ? '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏'
              : 'Upload a clear photo of the payment receipt for quick processing'
            }
          </p>
        </div>
      )}

      {/* –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª" */}
      {!isPaid && (
        <button
          onClick={handleIPaid}
          className="w-full py-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] flex items-center justify-center gap-2"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          {t.iPaid}
        </button>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å—Ä–∞–∑—É –ø–æ–¥ "–Ø –æ–ø–ª–∞—Ç–∏–ª" */}
      {!isPaid && (
        <button
          onClick={handleBack}
          className="btn btn-ghost w-full"
        >
          ‚Üê {t.back}
        </button>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="card space-y-4">
        <h2 className="text-lg font-semibold text-white">{t.instructions}</h2>
        <div className="space-y-2">
          {t.instructionSteps.map((step, index) => (
            <div key={index} className="flex items-start space-x-3">
              <div className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-semibold">
                {index + 1}
              </div>
              <p className="text-sm text-white/80 leading-relaxed">{step}</p>
            </div>
          ))}
        </div>
      </div>

      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–µ—Ä—Ç */}
      {AlertComponent}
    </main>
    </PageTransition>
  )
}