"use client"
import { useState, useEffect } from 'react'

export default function LanguagePage(){
  const [currentLanguage, setCurrentLanguage] = useState('ru')
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const savedLanguage = localStorage.getItem('user_language') || 'ru'
    setCurrentLanguage(savedLanguage)
  }, [])

  const languages = [
    { code: 'ru', name: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en', name: 'üá∫üá∏ English', flag: 'üá∫üá∏' },
    { code: 'ky', name: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞', flag: 'üá∞üá¨' },
    { code: 'uz', name: 'üá∫üáø O\'zbekcha', flag: 'üá∫üáø' }
  ]

  const translations = {
    ru: {
      title: '–Ø–∑—ã–∫',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      changed: '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:',
      processing: '–ò–∑–º–µ–Ω—è–µ–º...'
    },
    en: {
      title: 'Language',
      description: 'Select interface language',
      changed: 'Language changed to:',
      processing: 'Changing...'
    },
    ky: {
      title: '–¢–∏–ª',
      description: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏–ª–∏–Ω —Ç–∞–Ω–¥–∞“£—ã–∑',
      changed: '–¢–∏–ª ”©–∑–≥”©—Ä—Ç“Ø–ª–¥“Ø:',
      processing: '”®–∑–≥”©—Ä—Ç“Ø“Ø–¥”©...'
    },
    uz: {
      title: 'Til',
      description: 'Interfeys tilini tanlang',
      changed: 'Til o\'zgartirildi:',
      processing: 'O\'zgartirish...'
    }
  }

  const t = translations[currentLanguage as keyof typeof translations] || translations.ru

  const handleLanguageChange = async (languageCode: string) => {
    if (languageCode === currentLanguage) return

    setLoading(true)
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ localStorage
      localStorage.setItem('user_language', languageCode)
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      // await fetch('/api/language', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ language: languageCode })
      // })
      
      setTimeout(() => {
        setCurrentLanguage(languageCode)
        setLoading(false)
        
        const selectedLanguage = languages.find(lang => lang.code === languageCode)
        alert(`${t.changed} ${selectedLanguage?.name}`)
      }, 500)
      
    } catch (error) {
      console.error('Language change error:', error)
      setLoading(false)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞')
    }
  }

  return (
    <main className="space-y-4">
      <h1 className="text-xl font-bold">{t.title}</h1>
      
      <section className="card space-y-3">
        <div className="text-white/80">{t.description}</div>
        
        <div className="grid grid-cols-2 gap-2">
          {languages.map((lang) => (
            <button 
              key={lang.code}
              className={`btn ${
                currentLanguage === lang.code 
                  ? 'btn-primary' 
                  : 'btn-ghost'
              } ${loading ? 'opacity-50' : ''}`}
              onClick={() => handleLanguageChange(lang.code)}
              disabled={loading}
            >
              {loading && currentLanguage === lang.code ? t.processing : lang.name}
            </button>
          ))}
        </div>
        
        {currentLanguage && (
          <div className="text-sm text-white/60 text-center">
            {t.changed} {languages.find(lang => lang.code === currentLanguage)?.name}
          </div>
        )}
      </section>
    </main>
  )
}
