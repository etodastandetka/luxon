"use client"

type Bank = { code: string; name: string; emoji?: string; image?: string }
const BANKS: Bank[] = [
  { code: 'demirbank', name: 'DemirBank', emoji: 'üè¶', image: '/images/demirbank.jpg' },
  { code: 'omoney', name: 'O!Money', emoji: 'üü°', image: '/images/omoney.jpg' },
  { code: 'balance', name: 'Balance.kg', emoji: '‚öñÔ∏è', image: '/images/balance.jpg' },
  { code: 'bakai', name: 'Bakai', emoji: 'üè™', image: '/images/bakai.jpg' },
  { code: 'megapay', name: 'MegaPay', emoji: 'üí≥', image: '/images/megapay.jpg' },
  { code: 'mbank', name: 'MBank', emoji: 'üì±', image: '/images/mbank.png' },
  { code: 'optima', name: 'Optima', emoji: 'üíé', image: '/images/optima.jpg' },
  { code: 'kompanion', name: 'Kompanion', emoji: 'ü§ù', image: '/images/companion.png' },
]

export default function BankButtons({ onPick, selected, disabled, paymentUrl, allBankUrls, enabledBanks }: { 
  onPick: (code: string) => void; 
  selected?: string; 
  disabled?: boolean;
  paymentUrl?: string;
  allBankUrls?: Record<string, string>;
  enabledBanks?: string[];
}) {
  const handleBankClick = (bankCode: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–Ω–∫
    onPick(bankCode)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±–∞–Ω–∫–∞
    let bankUrl = paymentUrl // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É
    
    if (allBankUrls) {
      // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –±–∞–Ω–∫–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ API
      const bankMapping: Record<string, string> = {
        'demirbank': 'DemirBank',
        'omoney': 'O! bank',
        'balance': 'Balance.kg',
        'bakai': 'Bakai',
        'megapay': 'MegaPay',
        'mbank': 'MBank',
        'kompanion': '–ö–æ–º–ø–∞–Ω—å–æ–Ω'
      }
      
      const apiBankName = bankMapping[bankCode]
      if (apiBankName && allBankUrls[apiBankName]) {
        bankUrl = allBankUrls[apiBankName]
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (bankUrl) {
      window.open(bankUrl, '_blank')
    }
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  const bankMapping: Record<string, string> = {
    'demirbank': 'demir',
    'omoney': 'omoney',
    'balance': 'balance',
    'bakai': 'bakai',
    'megapay': 'megapay',
    'mbank': 'mbank',
    'kompanion': 'kompanion'
  }

  const filteredBanks = BANKS.filter(bank => {
    if (!enabledBanks || enabledBanks.length === 0) return true
    const bankKey = bankMapping[bank.code]
    return enabledBanks.includes(bankKey)
  })

  return (
    <div className="grid grid-cols-2 gap-1">
      {filteredBanks.map(b => (
        <button 
          key={b.code} 
          className={`btn transition-all duration-200 text-sm flex items-center justify-center gap-3 py-3 px-4 h-16 ${
            selected === b.code 
              ? 'btn-primary' 
              : 'btn-ghost'
          } ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:btn-primary'}`}
          onClick={() => !disabled && handleBankClick(b.code)}
          disabled={disabled}
        >
          {b.image ? (
            <img 
              src={b.image} 
              alt={b.name}
              className="w-8 h-8 object-contain rounded"
            />
          ) : (
            <span className="mr-1 text-xl">{b.emoji}</span>
          )}
          <span className="truncate">{b.name}</span>
        </button>
      ))}
    </div>
  )
}