"use client"

type Bank = { code: string; name: string; emoji?: string; image?: string }
const BANKS: Bank[] = [
  { code: 'demirbank', name: 'DemirBank', emoji: 'üè¶', image: '/images/demirbank.jpg' },
  { code: 'omoney', name: 'O!Money', emoji: 'üü°', image: '/images/omoney.jpg' },
  { code: 'balance', name: 'Balance.kg', emoji: '‚öñÔ∏è', image: '/images/balance.jpg' },
  { code: 'bakai', name: 'Bakai', emoji: 'üè™', image: '/images/bakai.jpg' },
  { code: 'megapay', name: 'MegaPay', emoji: 'üí≥', image: '/images/megapay.jpg' },
  { code: 'mbank', name: 'MBank', emoji: 'üì±', image: '/images/mbank.png' },
]

export default function BankButtons({ onPick, selected, disabled, paymentUrl, allBankUrls, enabledBanks }: { 
  onPick: (code: string) => void; 
  selected?: string; 
  disabled?: boolean;
  paymentUrl?: string;
  allBankUrls?: Record<string, string>;
  enabledBanks?: string[];
}) {
  const handleBankClick = (bankCode: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–Ω–∫
    onPick(bankCode)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±–∞–Ω–∫–∞
    let bankUrl = paymentUrl // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É
    
    console.log('üè¶ Bank clicked:', bankCode)
    console.log('üì¶ All bank URLs:', allBankUrls)
    console.log('üîó Default payment URL:', paymentUrl)
    
    if (allBankUrls) {
      // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –±–∞–Ω–∫–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ API
      const bankMapping: Record<string, string> = {
        'demirbank': 'DemirBank',
        'omoney': 'O!Money',
        'balance': 'Balance.kg',
        'bakai': 'Bakai',
        'megapay': 'MegaPay',
        'mbank': 'MBank'
      }
      
      const apiBankName = bankMapping[bankCode]
      console.log('üîç Looking for bank:', apiBankName)
      
      if (apiBankName && allBankUrls[apiBankName]) {
        bankUrl = allBankUrls[apiBankName]
        console.log('‚úÖ Found bank URL:', bankUrl)
      } else {
        console.warn('‚ö†Ô∏è Bank URL not found for:', apiBankName)
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (bankUrl) {
      console.log('üöÄ Opening URL:', bankUrl)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤–Ω–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        console.log('‚úÖ Opening with Telegram WebApp API')
        window.Telegram.WebApp.openLink(bankUrl)
      } else {
        console.log('‚ö†Ô∏è Telegram WebApp not available, using fallback')
        window.open(bankUrl, '_blank')
      }
    } else {
      console.error('‚ùå No payment URL available!')
    }
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  // –ú–∞–ø–ø–∏–Ω–≥: –∫–æ–¥ –±–∞–Ω–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ -> –∫–æ–¥ –±–∞–Ω–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∫–∏
  const bankMappingToAdmin: Record<string, string> = {
    'demirbank': 'demir',
    'omoney': 'omoney',
    'balance': 'balance',
    'bakai': 'bakai',
    'megapay': 'megapay',
    'mbank': 'mbank',
    'kompanion': 'kompanion' // –î–ª—è –≤—ã–≤–æ–¥–æ–≤
  }
  
  // –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: –∫–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ -> –∫–æ–¥ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  const bankMappingFromAdmin: Record<string, string> = {
    'demir': 'demirbank',
    'demirbank': 'demirbank',
    'omoney': 'omoney',
    'balance': 'balance',
    'bakai': 'bakai',
    'megapay': 'megapay',
    'mbank': 'mbank',
    'kompanion': 'kompanion',
    'odengi': 'omoney' // O!Money –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  // –ï—Å–ª–∏ enabledBanks –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (undefined), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–∞–Ω–∫–∏
  // –ï—Å–ª–∏ enabledBanks –ø–µ—Ä–µ–¥–∞–Ω (–¥–∞–∂–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤), —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ
  const filteredBanks = BANKS.filter(bank => {
    // –ï—Å–ª–∏ enabledBanks –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤–æ–æ–±—â–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if (enabledBanks === undefined) {
      return true
    }
    
    // –ï—Å–ª–∏ enabledBanks –ø–µ—Ä–µ–¥–∞–Ω, –¥–∞–∂–µ –ø—É—Å—Ç–æ–π - —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–Ω–∫ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (—É—á–∏—Ç—ã–≤–∞–µ–º –æ–±–∞ –º–∞–ø–ø–∏–Ω–≥–∞)
    const adminCode = bankMappingToAdmin[bank.code]
    const componentCode = bankMappingFromAdmin[bank.code] || bank.code
    
    return enabledBanks.includes(adminCode) || 
           enabledBanks.includes(componentCode) || 
           enabledBanks.includes(bank.code)
  })
  
  console.log('üè¶ BankButtons - enabledBanks:', enabledBanks)
  console.log('üè¶ BankButtons - filteredBanks:', filteredBanks.map(b => b.code))

  return (
    <div className="grid grid-cols-2 gap-1">
      {filteredBanks.map(b => (
        <button 
          key={b.code} 
          className={`btn transition-all duration-200 text-sm flex items-center justify-center gap-3 py-3 px-4 h-16 ${
            selected === b.code 
              ? 'btn-primary' 
              : 'btn-ghost'
          } ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:btn-primary'}`}
          onClick={() => !disabled && handleBankClick(b.code)}
          disabled={disabled}
        >
          {b.image ? (
            <img 
              src={b.image} 
              alt={b.name}
              className="w-8 h-8 object-contain rounded"
            />
          ) : (
            <span className="mr-1 text-xl">{b.emoji}</span>
          )}
          <span className="truncate">{b.name}</span>
        </button>
      ))}
    </div>
  )
}