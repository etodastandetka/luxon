#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-—Å—Å—ã–ª–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å qr_utils.py –¥–ª—è C2C –ø–ª–∞—Ç–µ–∂–µ–π
"""
import os
import sys
from typing import Dict, Optional, Tuple
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

try:
    from qr_utils import (
        build_qr_and_url, 
        get_bank_links_by_type,
        build_payment_links,
        get_active_requisite_from_db,
        update_amount_in_qr_hash_proper
    )
    from config import BANKS
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure qr_utils.py and config.py are in the same directory")
    sys.exit(1)

class QRService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-—Å—Å—ã–ª–æ–∫ –¥–ª—è C2C –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self):
        self.banks = BANKS
    
    def generate_payment_url(self, bank_key: str, amount: float, player_id: str = None) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫
        
        Args:
            bank_key: –ö–ª—é—á –±–∞–Ω–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            player_id: ID –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            Dict —Å hash –∏ url –¥–ª—è –æ–ø–ª–∞—Ç—ã
        """
        if bank_key not in self.banks:
            raise ValueError(f"–ë–∞–Ω–∫ {bank_key} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        bank_config = self.banks[bank_key]
        bank_code = bank_config['bank_code']
        qr_generator = bank_config.get('qr_generator', 'generic')
        
        try:
            if qr_generator == 'demirbank':
                # –î–ª—è DemirBank –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                qr, links = build_payment_links(amount)
                return {
                    'hash': qr,
                    'url': links.get('DemirBank', ''),
                    'bank_name': bank_config['name']
                }
            
            elif qr_generator in ['bakai', 'mbank', 'optima']:
                # –î–ª—è —ç—Ç–∏—Ö –±–∞–Ω–∫–æ–≤ –Ω—É–∂–µ–Ω base_hash –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                base_hash = self._get_base_hash_for_bank(bank_code)
                if not base_hash:
                    raise ValueError(f"Base hash –¥–ª—è {bank_config['name']} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ")
                
                result = build_qr_and_url(
                    bank_code=bank_code,
                    amount=amount,
                    base_hash=base_hash,
                    static_qr=True
                )
                result['bank_name'] = bank_config['name']
                return result
            
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º generic –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                return self._generate_generic_qr(bank_key, amount)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –¥–ª—è {bank_config['name']}: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É
            return self._generate_fallback_url(bank_key, amount)
    
    def _get_base_hash_for_bank(self, bank_code: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç base_hash –¥–ª—è –±–∞–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è base_hash
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return None
        except Exception:
            return None
    
    def _generate_generic_qr(self, bank_key: str, amount: float) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç generic QR –¥–ª—è –±–∞–Ω–∫–æ–≤ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        bank_config = self.banks[bank_key]
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        import hashlib
        import time
        
        data = f"{amount}_{int(time.time())}_{bank_key}"
        qr_hash = hashlib.sha256(data.encode()).hexdigest()[:32]
        
        url = bank_config['url_template'].format(qr_hash=qr_hash)
        
        return {
            'hash': qr_hash,
            'url': url,
            'bank_name': bank_config['name']
        }
    
    def _generate_fallback_url(self, bank_key: str, amount: float) -> Dict[str, str]:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        bank_config = self.banks[bank_key]
        
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        qr_hash = f"fallback_{amount}_{bank_key}"
        url = bank_config['url_template'].format(qr_hash=qr_hash)
        
        return {
            'hash': qr_hash,
            'url': url,
            'bank_name': bank_config['name']
        }
    
    def get_available_banks(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤"""
        return {k: v for k, v in self.banks.items() if v['enabled']}
    
    def validate_amount(self, amount: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã"""
        try:
            amount_decimal = Decimal(str(amount))
            return 0 < amount_decimal <= 1000000  # –ú–∞–∫—Å–∏–º—É–º 1,000,000 —Å–æ–º
        except:
            return False
    
    def format_amount(self, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"{amount:,.2f} —Å–æ–º"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
qr_service = QRService()

def generate_payment_url(bank_key: str, amount: float, player_id: str = None) -> Dict[str, str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –æ–ø–ª–∞—Ç—ã"""
    return qr_service.generate_payment_url(bank_key, amount, player_id)

def get_available_banks() -> Dict[str, Dict]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤"""
    return qr_service.get_available_banks()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR Service...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
    test_amount = 1000.50
    test_banks = ['demirbank', 'bakai', 'megapay', 'optima']
    
    for bank_key in test_banks:
        try:
            result = generate_payment_url(bank_key, test_amount, "test_player")
            print(f"‚úÖ {result['bank_name']}: {result['url'][:50]}...")
        except Exception as e:
            print(f"‚ùå {bank_key}: {e}")
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏:")
    banks = get_available_banks()
    for key, bank in banks.items():
        print(f"  {bank['emoji']} {bank['name']} ({key})")

