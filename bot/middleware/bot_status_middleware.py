"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
"""
import logging
import sqlite3
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update
from aiogram.filters import Command
from translations import get_translation

logger = logging.getLogger(__name__)

class BotStatusMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    
    def __init__(self, db_path: str = "universal_bot.db"):
        self.db_path = db_path
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, Message):
            user_id = event.from_user.id
            user_language = data.get('user_language', 'ru')
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            user_language = data.get('user_language', 'ru')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ callback, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        logger.debug(f"[BotStatusMiddleware] Using DB: {self.db_path}")
        if not await self.is_bot_active():
            # –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö –¥–ª—è –ª—é–±—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            maintenance_message = await self.get_maintenance_message()
            logger.info(f"[BotStatusMiddleware] Bot paused. Sending maintenance message. Event type: {type(event).__name__}")
            if isinstance(event, Message):
                try:
                    preview = (maintenance_message or '').replace('\n', ' ')[:80]
                    logger.debug(f"[BotStatusMiddleware] Reply to Message: '{preview}...' ")
                except Exception:
                    pass
                await event.answer(maintenance_message)
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            elif isinstance(event, CallbackQuery):
                try:
                    preview = (maintenance_message or '').replace('\n', ' ')[:80]
                    logger.debug(f"[BotStatusMiddleware] Answer to Callback: '{preview}...' ")
                except Exception:
                    pass
                await event.answer(maintenance_message, show_alert=True)
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–ª—å—à–µ
        
        # –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
    
    async def is_bot_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT value FROM bot_settings WHERE key = 'is_active'
            ''')
            result = cursor.fetchone()
            
            conn.close()
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            if not result:
                logger.warning("[BotStatusMiddleware] 'is_active' not found in bot_settings. Assuming active.")
                return True
            
            is_active = bool(int(result[0]))
            logger.debug(f"[BotStatusMiddleware] is_active={is_active}")
            return is_active
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            return True
    
    async def get_maintenance_message(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT value FROM bot_settings WHERE key = 'maintenance_message'
            ''')
            result = cursor.fetchone()
            
            conn.close()
            
            if result:
                logger.debug("[BotStatusMiddleware] Loaded maintenance_message from DB")
                return result[0]
            else:
                logger.debug("[BotStatusMiddleware] maintenance_message not set, using default")
                return "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö: {e}")
            return "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."





























