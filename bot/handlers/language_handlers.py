#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–∑—ã–∫–∞
"""
import logging
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from translations import get_translation

logger = logging.getLogger(__name__)

async def handle_language_selection(message: types.Message, language: str, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        translations = get_translation(language)
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫: {language}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞", callback_data="lang_ky")],
            [InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="lang_uz")]
        ])
        
        text = translations.get('select_language', 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:')
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.callback_query(lambda c: c.data and c.data.startswith('lang_'))
    async def handle_language_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        try:
            lang_code = callback.data.split('_')[1]
            user_id = callback.from_user.id
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫: {lang_code}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            db.save_user_language(user_id, lang_code)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
            translations = get_translation(lang_code)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ {lang_code}: {list(translations.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
            required_keys = ['deposit', 'withdraw', 'referral', 'support', 'history', 'faq', 'language', 'welcome']
            missing_keys = [key for key in required_keys if key not in translations]
            
            if missing_keys:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –¥–ª—è —è–∑—ã–∫–∞ {lang_code}: {missing_keys}")
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ {lang_code}")
                return
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
                    [KeyboardButton(text=translations['referral'])],
                    [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
                    [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
                ],
                resize_keyboard=True
            )
            
            text = f"{translations['welcome'].format(user_name=callback.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', admin_username='@luxon_support')}"
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!")
            
            logger.info(f"–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")
    

