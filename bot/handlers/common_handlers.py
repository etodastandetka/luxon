#!/usr/bin/env python3
"""
–û–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
"""
import logging
from typing import Dict, Any, List
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç bot_texts

logger = logging.getLogger(__name__)

class CommonStates(StatesGroup):
    """–û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    waiting_for_amount = State()
    waiting_for_withdraw_amount = State()
    waiting_for_bank = State()
    waiting_for_phone = State()
    waiting_for_name = State()
    waiting_for_id = State()
    waiting_for_qr_amount = State()

def create_main_keyboard(bot_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞"""
    texts = {
        'deposit': get_bot_text(bot_name, 'deposit'),
        'withdraw': get_bot_text(bot_name, 'withdraw'),
        'qr_generator': get_bot_text(bot_name, 'qr_generator'),
        'support': get_bot_text(bot_name, 'support'),
        'channel': get_bot_text(bot_name, 'channel')
    }
    
    buttons = [
        {'text': texts['deposit'], 'callback_data': f'deposit_{bot_name}'},
        {'text': texts['withdraw'], 'callback_data': f'withdraw_{bot_name}'},
        {'text': texts['qr_generator'], 'callback_data': f'qr_generator_{bot_name}'},
        {'text': texts['support'], 'callback_data': f'support_{bot_name}'},
        {'text': texts['channel'], 'callback_data': f'channel_{bot_name}'}
    ]
    
    builder = InlineKeyboardBuilder()
    for button in buttons:
        builder.add(InlineKeyboardButton(
            text=button['text'],
            callback_data=button['callback_data']
        ))
    builder.adjust(2)
    return builder.as_markup()

def create_bank_keyboard(banks: Dict[str, str], bot_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–Ω–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    for bank_code, bank_name in banks.items():
        builder.add(InlineKeyboardButton(
            text=bank_name,
            callback_data=f'bank_{bot_name}_{bank_code}'
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f'cancel_{bot_name}'
    ))
    
    builder.adjust(2)
    return builder.as_markup()

def create_cancel_keyboard(bot_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f'cancel_{bot_name}'
    ))
    return builder.as_markup()

async def handle_start_command(message: types.Message, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = get_bot_text(bot_name, 'welcome')
    keyboard = create_main_keyboard(bot_name)
    
    await message.answer(welcome_text, reply_markup=keyboard)

async def handle_help_command(message: types.Message, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É {bot_name.upper()}

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/deposit - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
/withdraw - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
/qr - QR-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @operator_luxkassa
    """
    
    keyboard = create_main_keyboard(bot_name)
    await message.answer(help_text, reply_markup=keyboard)

async def handle_deposit_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    text = get_bot_text(bot_name, 'enter_amount')
    keyboard = create_cancel_keyboard(bot_name)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

async def handle_withdraw_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞"""
    text = get_bot_text(bot_name, 'enter_withdraw_amount')
    keyboard = create_cancel_keyboard(bot_name)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

async def handle_qr_generator_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ QR-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    text = "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:"
    keyboard = create_cancel_keyboard(bot_name)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

async def handle_support_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    admin_contact = get_bot_text(bot_name, 'admin_contact')
    text = f"üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {bot_name.upper()}\n\n{admin_contact}"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f'back_to_main_{bot_name}'
    ))
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()

async def handle_channel_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    text = f"üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {bot_name.upper()}:\n\nhttps://t.me/luxkassa"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
        url="https://t.me/luxkassa"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f'back_to_main_{bot_name}'
    ))
    keyboard.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()

async def handle_back_to_main_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = get_bot_text(bot_name, 'welcome')
    keyboard = create_main_keyboard(bot_name)
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()

async def handle_cancel_callback(callback: types.CallbackQuery, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    welcome_text = get_bot_text(bot_name, 'welcome')
    keyboard = create_main_keyboard(bot_name)
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()

def validate_amount(amount_str: str) -> float:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã"""
    try:
        amount = float(amount_str.replace(',', '.'))
        if amount <= 0:
            return None
        return amount
    except ValueError:
        return None

def format_amount(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
    return f"{amount:,.2f}".replace(',', ' ')
