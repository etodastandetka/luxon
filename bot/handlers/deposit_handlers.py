#!/usr/bin/env python3
"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
"""
import logging
import random
import asyncio
from datetime import datetime
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from translations import get_translation
from config import BOOKMAKERS, BOT_TOKEN

logger = logging.getLogger(__name__)

async def update_payment_timer(message, user_id: int, amount: float, translations, db):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É"""
    try:
        timer_minutes = 5
        timer_seconds = 0
        total_seconds = timer_minutes * 60 + timer_seconds
        
        # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–≤–æ–π –ø—Ä–∞–≤–∫–∏ —Å —Ç–µ–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (5:00 —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        for remaining_seconds in range(total_seconds - 1, -1, -1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = db.get_user_data(user_id, 'current_state')
            if current_state != 'waiting_for_receipt':
                logger.info(f"Timer stopped for user {user_id}, state changed to: {current_state}")
                break
                
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
            mins = remaining_seconds // 60
            secs = remaining_seconds % 60
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å/—Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ —Ñ–æ—Ç–æ+caption)
            try:
                message_text = (
                    f"<b>üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} —Å–æ–º</b>\n\n"
                    f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>{mins}:{secs:02d}</b>\n\n"
                    f"<b>‚ö†Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω–æ –¥–æ –∫–æ–ø–µ–µ–∫!</b>\n"
                    f"üì∏ –ñ–¥—ë–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
                )
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ)
                try:
                    await message.edit_caption(
                        caption=message_text,
                        reply_markup=message.reply_markup,
                        parse_mode="HTML"
                    )
                except Exception as e_inner:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await message.edit_text(
                        message_text,
                        reply_markup=message.reply_markup,
                        parse_mode="HTML"
                    )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "message is not modified"
                if "message is not modified" in str(e).lower():
                    await asyncio.sleep(1)
                    continue
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "there is no text in the message to edit" –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π edit_caption
                if "there is no text in the message to edit" in str(e).lower():
                    await asyncio.sleep(1)
                    continue
                logger.error(f"Error updating timer message: {e}")
                break
                
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(1)
            
        # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω –ª–∏ —á–µ–∫ –∏ –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –µ—â—ë –Ω–∞ 5 –º–∏–Ω—É—Ç
        if remaining_seconds == 0:
            try:
                import sqlite3
                # –í—ã—è—Å–Ω—è–µ–º –ø—É—Ç—å –ë–î —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                try:
                    db_path = getattr(db, 'db_path') or ''
                except Exception:
                    db_path = ''
                if not db_path:
                    from pathlib import Path
                    bot_dir = Path(__file__).resolve().parent.parent
                    db_path = str(bot_dir / 'universal_bot.db')

                conn = sqlite3.connect(db_path)
                cur = conn.cursor()
                req_id = db.get_user_data(user_id, 'current_request_id')

                extended_wait = False
                seconds_left = 0
                if req_id:
                    # –û–±–µ—Å–ø–µ—á–∏–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    try:
                        cur.execute("ALTER TABLE requests ADD COLUMN receipt_received INTEGER DEFAULT 0")
                    except Exception:
                        pass
                    try:
                        cur.execute("ALTER TABLE requests ADD COLUMN receipt_received_at TIMESTAMP")
                    except Exception:
                        pass
                    try:
                        cur.execute("ALTER TABLE requests ADD COLUMN pending_deadline TIMESTAMP")
                    except Exception:
                        pass
                    conn.commit()

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥–ª—ë–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω –æ–∂–∏–¥–∞–Ω–∏—è
                    cur.execute("SELECT COALESCE(receipt_received,0), pending_deadline FROM requests WHERE id=?", (int(req_id),))
                    row = cur.fetchone()
                    if row:
                        receipt_received, pending_deadline = row
                        if receipt_received and pending_deadline:
                            try:
                                cur.execute("SELECT CAST((strftime('%s', ?) - strftime('%s','now')) AS INTEGER)", (pending_deadline,))
                                seconds_left = cur.fetchone()[0] or 0
                                if seconds_left > 0:
                                    extended_wait = True
                            except Exception:
                                pass

                if extended_wait and seconds_left > 0:
                    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ (–±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å): –∂–¥—ë–º –¥–æ pending_deadline
                    try:
                        await message.edit_text(
                            f"{message.text}\n\n‚è≥ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–∞–Ω–∫–∞...",
                            reply_markup=message.reply_markup
                        )
                    except Exception:
                        pass
                    # –ñ–¥—ë–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
                    while seconds_left > 0:
                        current_state = db.get_user_data(user_id, 'current_state')
                        if current_state != 'waiting_for_receipt':
                            logger.info(f"Extended wait stopped for user {user_id}, state changed to: {current_state}")
                            break
                        await asyncio.sleep(min(5, seconds_left))
                        seconds_left -= 5

                # –ü–æ –∏—Ç–æ–≥–∞–º ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –µ—â—ë –≤ pending
                try:
                    if req_id:
                        cur.execute(
                            "UPDATE requests SET status='awaiting_manual', updated_at=CURRENT_TIMESTAMP WHERE id=? AND status='pending'",
                            (int(req_id),)
                        )
                        conn.commit()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É –≤ awaiting_manual: {e}")
                finally:
                    conn.close()

                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
                cancel_text = (
                    "‚è≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—à–ª–æ\n\n"
                    "‚ùå–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ —Å—Ç–∞—Ä—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–Ω–æ–≥–æ –Ω–∞–∂–∞–≤ –Ω–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å "
                )
                try:
                    await message.edit_text(
                        cancel_text,
                        reply_markup=None
                    )
                except Exception:
                    # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    try:
                        await message.answer(cancel_text)
                    except Exception:
                        pass
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                db.save_user_data(user_id, 'current_state', '')
                try:
                    language2 = db.get_user_language(user_id)
                    from handlers.deposit_handlers import show_main_menu as _show_main_menu
                    await _show_main_menu(message, language2)
                except Exception:
                    pass
            except Exception as e:
                logger.error(f"Error sending timer expired message: {e}")
            
    except Exception as e:
        logger.error(f"Error in payment timer: {e}")

async def send_deposit_request_to_group(bot, user_id: int, amount: float, bookmaker: str, id_value: str, photo_file_id: str = None, db=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É
    db –Ω—É–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ user_data (current_request_id), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await bot.get_chat(user_id)
        username = user_info.username or "–ù–µ—Ç username"
        first_name = user_info.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–∫–º–µ–∫–µ—Ä–∞
        bookmaker_config = BOOKMAKERS.get(bookmaker, {})
        group_id = bookmaker_config.get('deposit_group_id')
        
        if not group_id:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω group_id –¥–ª—è –±—É–∫–º–µ–∫–µ—Ä–∞ {bookmaker}")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        request_text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}
üÜî <b>ID:</b> {user_id}
üè¢ <b>–ë—É–∫–º–µ–∫–µ—Ä:</b> {bookmaker_config.get('name', bookmaker.upper())}
üí∞ <b>–°—É–º–º–∞:</b> {amount:.2f} —Å–æ–º
üÜî <b>ID —Å—á–µ—Ç–∞:</b> {id_value}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (request_id –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º...", callback_data="noop")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if photo_file_id:
            sent_msg = await bot.send_photo(
                chat_id=group_id,
                photo=photo_file_id,
                caption=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            sent_msg = await bot.send_message(
                chat_id=group_id,
                text=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ä–∞–Ω–Ω—è—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é)
        try:
            import sqlite3
            import os
            from pathlib import Path
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å –ë–î, —á—Ç–æ –∏ –æ–±—ä–µ–∫—Ç db, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ —Å –≤–æ—Ç—á–µ—Ä–æ–º
            try:
                db_path = getattr(db, 'db_path') or ''
            except Exception:
                db_path = ''
            if not db_path:
                bot_dir = Path(__file__).resolve().parent.parent  # .../bot
                db_path = str(bot_dir / 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É requests, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    bookmaker TEXT,
                    account_id TEXT,
                    amount REAL NOT NULL DEFAULT 0,
                    request_type TEXT NOT NULL,            -- deposit | withdraw
                    status TEXT NOT NULL DEFAULT 'pending',
                    withdrawal_code TEXT,
                    photo_file_id TEXT,
                    photo_file_url TEXT,
                    bank TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP,
                    processed_at TIMESTAMP
                )
            ''')
            
            # –ü–æ–ª—É—á–∏–º –ø—Ä—è–º–æ–π URL –∫ —Ñ–∞–π–ª—É –æ—Ç Telegram API (–µ—Å–ª–∏ –µ—Å—Ç—å), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤ –ë–î, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–∞–π—Ç
            photo_file_url = None
            if photo_file_id:
                try:
                    file_info = await bot.get_file(photo_file_id)
                    file_path = getattr(file_info, 'file_path', None)
                    if file_path:
                        photo_file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_path –¥–ª—è —á–µ–∫–∞: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ä–∞–Ω–Ω—é—é –∑–∞–ø–∏—Å—å
            current_request_id = None
            try:
                if db is not None:
                    current_request_id = db.get_user_data(user_id, 'current_request_id')
            except Exception:
                current_request_id = None
            request_id = None
            if current_request_id:
                try:
                    cursor.execute('''
                        UPDATE requests
                        SET username=?, first_name=?, bookmaker=?, account_id=?, amount=?, photo_file_id=?, photo_file_url=?, updated_at=CURRENT_TIMESTAMP
                        WHERE id=?
                    ''', (username, first_name, bookmaker, id_value, amount, photo_file_id, photo_file_url, int(current_request_id)))
                    if cursor.rowcount > 0:
                        request_id = int(current_request_id)
                except Exception:
                    pass

            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±—ã–ª–æ —Ä–∞–Ω–Ω–µ–π –∑–∞–ø–∏—Å–∏) ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            if not request_id:
                cursor.execute('''
                    INSERT INTO requests
                    (user_id, username, first_name, bookmaker, account_id, amount, request_type, status, photo_file_id, photo_file_url)
                    VALUES (?, ?, ?, ?, ?, ?, 'deposit', 'pending', ?, ?)
                ''', (user_id, username, first_name, bookmaker, id_value, amount, photo_file_id, photo_file_url))
                request_id = cursor.lastrowid
                # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ user_data –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                if request_id and db is not None:
                    try:
                        db.save_user_data(user_id, 'current_request_id', str(request_id))
                    except Exception:
                        pass
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞ ‚Äî –æ—Ç–º–µ—Ç–∏–º –∏ –ø—Ä–æ–¥–ª–∏–º –¥–µ–¥–ª–∞–π–Ω –æ–∂–∏–¥–∞–Ω–∏—è –µ—â—ë –Ω–∞ 5 –º–∏–Ω—É—Ç
            try:
                if photo_file_id:
                    cursor.execute(
                        "UPDATE requests SET receipt_received=1, receipt_received_at=CURRENT_TIMESTAMP, pending_deadline=datetime('now','+5 minutes') WHERE id=?",
                        (request_id,)
                    )
            except Exception:
                pass
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
            try:
                cursor.execute(
                    'UPDATE requests SET admin_chat_id=?, admin_message_id=? WHERE id=?',
                    (group_id, getattr(sent_msg, 'message_id', None), request_id)
                )
            except Exception:
                pass
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (id={request_id})")

            # –ï—Å–ª–∏ –±–∞–Ω–∫ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ (email –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ), –∑–∞–≤–µ—Ä—à–∏–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞
            try:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
                import sqlite3 as _sqlite3
                conn2 = _sqlite3.connect(db_path)
                cur2 = conn2.cursor()
                cur2.execute("SELECT COALESCE(bank_received,0) FROM requests WHERE id=?", (request_id,))
                row2 = cur2.fetchone()
                conn2.close()
                if row2 and int(row2[0]) == 1:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
                    from handlers.api_handlers import process_deposit_via_api, send_deposit_processed
                    result = await process_deposit_via_api(bookmaker, str(id_value), float(amount))
                    is_success = (result.get('success') == True or (result.get('data') or {}).get('Success') == True)
                    if is_success:
                        conn3 = _sqlite3.connect(db_path)
                        cur3 = conn3.cursor()
                        # –û–±–µ—Å–ø–µ—á–∏–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ auto_completed
                        try:
                            cur3.execute("ALTER TABLE requests ADD COLUMN auto_completed INTEGER DEFAULT 0")
                        except Exception:
                            pass
                        cur3.execute(
                            "UPDATE requests SET status='completed', auto_completed=1, updated_at=CURRENT_TIMESTAMP, processed_at=CURRENT_TIMESTAMP WHERE id=?",
                            (request_id,)
                        )
                        conn3.commit()
                        # –°–Ω–∏–º–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–∏
                        try:
                            if group_id and getattr(sent_msg, 'message_id', None):
                                try:
                                    await bot.edit_message_caption(chat_id=group_id, message_id=sent_msg.message_id, caption="‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –ø–æ —á–µ–∫—É", reply_markup=None)
                                except Exception:
                                    await bot.edit_message_text(chat_id=group_id, message_id=sent_msg.message_id, text="‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –ø–æ —á–µ–∫—É", reply_markup=None)
                        except Exception:
                            pass
                        conn3.close()
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å–∞–π—Ç: —Å—Ä–∞–∑—É completed
                        try:
                            sync_to_django_admin(
                                user_id=user_id,
                                username=message.from_user.username or '',
                                first_name=message.from_user.first_name or '',
                                bookmaker=bookmaker,
                                amount=float(amount),
                                account_id=str(id_value),
                                photo_file_id=photo_file_id or '',
                                status='completed',
                                photo_file_url=photo_file_url or None,
                                request_type='deposit'
                            )
                        except Exception as _e:
                            logger.warning(f"Auto-completed sync_to_django_admin failed: {_e}")
                        # –£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                        await send_deposit_processed(bot, user_id, float(amount), str(id_value), request_id=request_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ —á–µ–∫—É –ø—Ä–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø–∏—Å—å–º–µ: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º request_id
            try:
                new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîó –û–±—Ä–∞–±–æ—Ç–∞—Ç—å API", callback_data=f"process_api_deposit_{request_id}")
                    ],
                    [
                        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_deposit_{request_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_deposit_{request_id}")
                    ]
                ])
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º markup
                if photo_file_id:
                    await bot.edit_message_reply_markup(chat_id=group_id, message_id=sent_msg.message_id, reply_markup=new_keyboard)
                else:
                    await bot.edit_message_reply_markup(chat_id=group_id, message_id=sent_msg.message_id, reply_markup=new_keyboard)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}: {e}")

            # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ –ø–∞–º—è—Ç—å –¥–ª—è API-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—á—Ç–æ–±—ã —Ç–∞–º –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id)
            try:
                import handlers.api_handlers as api_handlers
                api_handlers.pending_requests[request_id] = {
                    'user_id': user_id,
                    'amount': amount,
                    'bookmaker': bookmaker,
                    'xbet_id': id_value,
                }
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å pending_requests –¥–ª—è {request_id}: {e}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Django –∞–¥–º–∏–Ω–∫–æ–π
            try:
                sync_to_django_admin(user_id, username, first_name, bookmaker, amount, id_value, photo_file_id, 'pending', photo_file_url, request_type='deposit')
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Django –∞–¥–º–∏–Ω–∫–æ–π: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        return True
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        return False

def sync_to_django_admin(user_id, username, first_name, bookmaker, amount, account_id, photo_file_id, status, photo_file_url=None, request_type: str = 'deposit', auto_completed: int = 0):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ —Å Django –∞–¥–º–∏–Ω–∫–æ–π"""
    try:
        import requests
        import json
        import os
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'user_id': user_id,
            'username': username or '',
            'first_name': first_name or '',
            'bookmaker': bookmaker,
            'amount': amount,
            'account_id': account_id,
            'receipt_photo': photo_file_id or '',
            'receipt_photo_url': photo_file_url or '',
            'status': status,
            'request_type': request_type,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã —è–≤–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            'type': 'deposit',
            'direction': 'in',
            'is_deposit': True
        }
        
        # URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DJANGO_ADMIN_URL
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8081 (–∫–∞–∫ —É —Ç–µ–±—è)
        base_url = os.getenv('DJANGO_ADMIN_URL', 'http://localhost:8081')
        endpoint = f"{base_url.rstrip('/')}/bot/api/bot/deposit-request/"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ Django API
        response = requests.post(endpoint, json=data, timeout=8)
        
        if response.status_code in (200, 201):
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Django –∞–¥–º–∏–Ω–∫–æ–π")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Django: {e}")

def get_bot_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ Django –∞–¥–º–∏–Ω–∫–∏"""
    try:
        import requests
        response = requests.get('http://localhost:8081/bot/api/bot-settings/', timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
    return {
        'pause': False,
        'deposits': {'enabled': True, 'banks': []},
        'withdrawals': {'enabled': True, 'banks': []},
        'channel': {'enabled': False, 'name': '@bingokg_news'}
    }

def get_bank_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤"""
    return {
        'demirbank': {'deposit_enabled': True, 'withdraw_enabled': True},
        'odengi': {'deposit_enabled': True, 'withdraw_enabled': True},
        'bakai': {'deposit_enabled': True, 'withdraw_enabled': True},
        'balance': {'deposit_enabled': True, 'withdraw_enabled': True},
        'megapay': {'deposit_enabled': True, 'withdraw_enabled': True},
        'mbank': {'deposit_enabled': True, 'withdraw_enabled': True},
    }

async def show_main_menu(message: types.Message, language: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    translations = get_translation(language)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
            [KeyboardButton(text=translations['referral'])],
            [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
            [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
        ],
        resize_keyboard=True
    )
    await message.answer(translations['welcome'].format(user_name=message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', admin_username='@luxon_support'), reply_markup=keyboard)

async def start_deposit(message: types.Message, state: FSMContext = None, bookmaker: str = None, language: str = None, db = None, bookmakers = None):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –®–∞–≥ 1: –í–≤–æ–¥ ID"""
    if not all([bookmaker, language, db, bookmakers]):
        logger.error("Missing required parameters for start_deposit")
        return
        
    user_id = message.from_user.id
    translations = get_translation(language)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–º–µ–∫–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_user_data(user_id, 'current_bookmaker', bookmaker)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞
    saved_id = db.get_user_data(user_id, 'id', bookmaker)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    rows = []
    if saved_id:
        rows.append([KeyboardButton(text=str(saved_id))])
    rows.append([KeyboardButton(text=translations.get('back_to_menu', 'üîô –ù–∞–∑–∞–¥'))])
    keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞ (–∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ BOOKMAKERS)
    bookmaker_display = BOOKMAKERS.get(bookmaker, {}).get('name', (bookmaker or '').upper())
    text_template = translations.get(
        'deposit_instruction',
        'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID {bookmaker_name}\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n\n‚ùå –û—à–∏–±–∫–∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.'
    )
    text = text_template.format(bookmaker_name=bookmaker_display)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Å –ø—Ä–∏–º–µ—Ä–æ–º ID (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    from pathlib import Path
    photo_path = Path(f"images/{bookmaker}-id.jpg")
    if photo_path.exists():
        try:
            photo = FSInputFile(str(photo_path))
            await message.answer_photo(
                photo=photo,
                caption=text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–∞ ID: {e}")
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text, reply_markup=keyboard)
    else:
        # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
        await message.answer(text, reply_markup=keyboard)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.save_user_data(user_id, 'current_state', 'waiting_for_id')

async def handle_id_input(message: types.Message, state: FSMContext, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 2: –í–≤–æ–¥ —Å—É–º–º—ã"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
        if text == translations.get('back_to_menu', 'üîô –ù–∞–∑–∞–¥'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        if not text.isdigit():
            await message.answer(translations['id_digits_only'])
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        db.save_user_data(user_id, 'id', text, bookmaker)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ª–∏–º–∏—Ç–∞–º–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID
        await message.answer(
            translations['enter_amount_with_limits'].format(account_id=text),
            reply_markup=keyboard
        )
        db.save_user_data(user_id, 'current_state', 'waiting_for_amount')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
async def handle_amount_input(message: types.Message, state: FSMContext, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 3: –í—ã–±–æ—Ä –±–∞–Ω–∫–∞"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
        if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
        
        try:
            amount = float(text)
            if amount < 35 or amount > 100000:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 35 –¥–æ 100,000 KGS")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
        db.save_user_data(user_id, 'current_amount', str(amount))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await show_bank_selection(message, amount, db, bookmakers)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_bank_selection(message: types.Message, amount: float, db, bookmakers):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - –®–∞–≥ 3"""
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    import time
    import asyncio
    timer_minutes = 5
    timer_seconds = 0
    
    message_text = (
        f"<b>üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} —Å–æ–º</b>\n\n"
        f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>{timer_minutes}:{timer_seconds:02d}</b>\n\n"
        f"<b>‚ö†Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω–æ –¥–æ –∫–æ–ø–µ–µ–∫!</b>\n"
        f"üì∏ –ñ–¥—ë–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–∞–Ω–∫–æ–≤
    kb = InlineKeyboardBuilder()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å QR –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
    from qr_utils import (
        build_demirbank_qr_by_template,
        get_active_requisite_from_db,
        get_bank_links_by_type,
        enforce_amount_with_kopecks,
    )

    # –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ –ë–î
    active_req = get_active_requisite_from_db()
    if not active_req:
        await message.answer("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.error("Active requisite not found in DB")
        return

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ø–µ–µ–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã (—É–ª—É—á—à–∞–µ—Ç –∞–≤—Ç–æ-–º–∞—Ç—á–∏–Ω–≥)
    try:
        amount = enforce_amount_with_kopecks(float(amount))
    except Exception:
        pass

    # –°–æ–±–∏—Ä–∞–µ–º QR —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É: –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∫–≤–∏–∑–∏—Ç –∏ —Å—É–º–º—É
    try:
        fixed_qr_hash = build_demirbank_qr_by_template(requisite=active_req, amount=amount, static_qr=True)
    except Exception as e:
        logger.error(f"Failed to build QR by template: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤. –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –ö–†–û–ú–ï "–ö–æ–º–ø–∞–Ω—å–æ–Ω". –ö–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º.
    logger.info(f"[DEPOSIT] QR by template built: {fixed_qr_hash[:80]}...")
    bank_links = get_bank_links_by_type(fixed_qr_hash, 'DEMIRBANK')
    for service_name, link in bank_links.items():
        if service_name == "–ö–æ–º–ø–∞–Ω—å–æ–Ω":
            continue
        kb.button(text=service_name, url=link)
    kb.adjust(2)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–∞–∫ —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –±–∞–Ω–∫–æ–≤
    try:
        # –°—Ç—Ä–æ–∏–º URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (fallback, –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode)
        from urllib.parse import quote
        # –ü–æ –ø—Ä–æ—Å—å–±–µ: –∫–æ–¥–∏—Ä—É–µ–º –≤ QR —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ O! bank —Å –Ω–∞—à–∏–º hash
        qr_payload = f"https://api.dengi.o.kg/ru/qr/#{fixed_qr_hash}"
        qr_url = f"https://quickchart.io/qr?text={quote(qr_payload)}&size=512&margin=2"
        sent_message = await message.answer_photo(
            qr_url,
            caption=message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        # –§–æ–ª–±—ç–∫: —Ç–µ–∫—Å—Ç–æ–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        sent_message = await message.answer(
            message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ø–µ–π–∫–∞–º–∏)
    db.save_user_data(user_id, 'current_amount', str(amount))
    db.save_user_data(user_id, 'current_qr_hash', fixed_qr_hash)
    db.save_user_data(user_id, 'current_state', 'waiting_for_receipt')
    
    # –†–ê–ù–ï–ï —Å–æ–∑–¥–∞–µ–º pending-–∑–∞—è–≤–∫—É –≤ –µ–¥–∏–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ requests, —á—Ç–æ–±—ã –∞–≤—Ç–æ-–¥–µ–ø–æ–∑–∏—Ç —Å–º–æ–≥ —Å—Ä–∞–∑—É –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    try:
        import sqlite3
        from pathlib import Path
        bookmaker = db.get_user_data(user_id, 'current_bookmaker') or '1xbet'
        account_id = db.get_user_data(user_id, 'id', bookmaker) or user_id
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å –ë–î, —á—Ç–æ –∏ –æ–±—ä–µ–∫—Ç db, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ —Å –≤–æ—Ç—á–µ—Ä–æ–º
        try:
            db_path = getattr(db, 'db_path') or ''
        except Exception:
            db_path = ''
        if not db_path:
            # –§–æ–ª–±—ç–∫: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ë–î —Ä—è–¥–æ–º —Å –ø–∞–ø–∫–æ–π bot
            bot_dir = Path(__file__).resolve().parent.parent
            db_path = str(bot_dir / 'universal_bot.db')
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        # ensure table
        cur.execute('''
            CREATE TABLE IF NOT EXISTS requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                bookmaker TEXT,
                account_id TEXT,
                amount REAL NOT NULL DEFAULT 0,
                request_type TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT 'pending',
                withdrawal_code TEXT,
                photo_file_id TEXT,
                photo_file_url TEXT,
                bank TEXT,
                admin_chat_id INTEGER,
                admin_message_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP,
                processed_at TIMESTAMP
            )
        ''')
        # username/first_name –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–æ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É, –∑–¥–µ—Å—å –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ –º–∏–Ω–∏–º—É–º—É
        cur.execute('''
            INSERT INTO requests (user_id, bookmaker, account_id, amount, request_type, status)
            VALUES (?, ?, ?, ?, 'deposit', 'pending')
        ''', (user_id, bookmaker, str(account_id), float(amount)))
        request_id = cur.lastrowid
        conn.commit()
        conn.close()
        # —Å–æ—Ö—Ä–∞–Ω–∏–º request_id –≤ user_data, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç—É –∂–µ –∑–∞–ø–∏—Å—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ awaiting_manual –ø—Ä–∏ —Ç–∞–π–º-–∞—É—Ç–µ
        if request_id:
            db.save_user_data(user_id, 'current_request_id', str(request_id))
        logger.info(f"[DEPOSIT] Pending request created early for auto-deposit matching (id={request_id}, amount={amount:.2f})")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–Ω—é—é pending-–∑–∞—è–≤–∫—É: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    asyncio.create_task(update_payment_timer(sent_message, user_id, amount, translations, db))

async def process_receipt_photo(message: types.Message, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    try:
        user_id = message.from_user.id
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        amount = float(db.get_user_data(user_id, 'current_amount'))
        id_value = db.get_user_data(user_id, 'id', bookmaker)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è bookmakers
            group_id = bookmakers[bookmaker]['deposit_group_id']
            logger.info(f"Sending deposit request to group {group_id} for bookmaker {bookmaker}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
            request_id = random.randint(1000, 9999)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            import handlers.api_handlers as api_handlers
            api_handlers.pending_requests[request_id] = {
                'user_id': user_id,
                'amount': amount,
                'xbet_id': id_value,
                'bookmaker': bookmaker,
                'type': 'deposit'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                conn = db.db_path
                import sqlite3
                conn = sqlite3.connect(conn)
                cursor = conn.cursor()
                
                # –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                cursor.execute('SELECT referrer_id FROM referrals WHERE referred_id = ?', (user_id,))
                referrer_result = cursor.fetchone()
                
                if referrer_result:
                    referrer_id = referrer_result[0]
                    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
                    from handlers.referral_handlers import add_referral_commission
                    add_referral_commission(db, referrer_id, user_id, amount, bookmaker)
                    logger.info(f"Added referral commission for {referrer_id} from {user_id} deposit {amount}")
                
                conn.close()
            except Exception as e:
                logger.error(f"Error processing referral commission: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
            application_text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or '–±–µ–∑ username'}
üÜî <b>ID:</b> <code>{id_value}</code>
üè¢ <b>–ë—É–∫–º–µ–∫–µ—Ä:</b> {bookmakers[bookmaker]['name']}
üí∞ <b>–°—É–º–º–∞:</b> {amount} —Å–æ–º
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> {request_id}
"""
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_deposit_{request_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_deposit_{request_id}")
                ],
                [
                    InlineKeyboardButton(text="üîó –û–±—Ä–∞–±–æ—Ç–∞—Ç—å API", callback_data=f"process_api_deposit_{request_id}")
                ]
            ])
            # –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π.
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∏–∂–µ —á–µ—Ä–µ–∑ send_deposit_request_to_group().
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
                    [KeyboardButton(text=translations['referral'])],
                    [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
                    [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
                ],
                resize_keyboard=True
            )
            
            success_message = translations['deposit_request_sent'].format(
                request_id=request_id,
                amount=amount,
                xbet_id=id_value
            )
            
            await message.answer(success_message, reply_markup=keyboard, parse_mode="HTML")
            # –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî
            # —Å—á–∏—Ç–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
            try:
                import sqlite3 as _sqlite3
                db_path = getattr(db, 'db_path', '') or ''
                if db_path:
                    conn_upd = _sqlite3.connect(db_path)
                    cur_upd = conn_upd.cursor()
                    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ä–∞–Ω–Ω—é—é pending-–∑–∞—è–≤–∫—É, –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ current_request_id
                    try:
                        early_req_id = db.get_user_data(user_id, 'current_request_id')
                    except Exception:
                        early_req_id = None
                    if early_req_id:
                        try:
                            cur_upd.execute(
                                "UPDATE requests SET created_at=CURRENT_TIMESTAMP WHERE id=?",
                                (int(early_req_id),)
                            )
                            conn_upd.commit()
                        except Exception:
                            pass
                    conn_upd.close()
            except Exception:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É (–µ–¥–∏—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)
            await send_deposit_request_to_group(
                bot=message.bot,
                user_id=user_id,
                amount=amount,
                bookmaker=bookmaker,
                id_value=id_value,
                photo_file_id=message.photo[-1].file_id if message.photo else None,
                db=db
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            db.save_user_data(user_id, 'current_state', '')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(lambda message: message.text and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_id')
    async def handle_id_input_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await handle_id_input(message, None, db, bookmakers)
    
    @dp.message(lambda message: message.text and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_amount')
    async def handle_amount_input_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await handle_amount_input(message, None, db, bookmakers)
    
    @dp.message(lambda message: message.photo and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_receipt')
    async def handle_receipt_photo_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await process_receipt_photo(message, db, bookmakers)