#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import logging
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from translations import get_translation
import os
import urllib.parse
import requests

logger = logging.getLogger(__name__)

def get_bot_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ Django –∞–¥–º–∏–Ω–∫–∏"""
    try:
        response = requests.get('http://localhost:8081/bot/api/bot-settings/', timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
    return {
        'pause': False,
        'deposits': {'enabled': True, 'banks': []},
        'withdrawals': {'enabled': True, 'banks': []},
        'channel': {'enabled': False, 'name': '@bingokg_news'}
    }

async def check_channel_subscription(bot, user_id, channel_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(channel_name, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_name}: {e}")
        return False

async def handle_start(message: types.Message, state: FSMContext, db, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
    await state.clear()
    
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.save_user_data(user_id, 'current_state', '')
        db.save_user_data(user_id, 'current_action', '')
        db.save_user_data(user_id, 'current_bookmaker', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        bot_settings = get_bot_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if bot_settings.get('channel', {}).get('enabled', False):
            channel_name = bot_settings.get('channel', {}).get('name', '@bingokg_news')
            is_subscribed = await check_channel_subscription(bot, user_id, channel_name)
            
            if not is_subscribed:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                await message.answer(
                    f"üì¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!</b>\n\n"
                    f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
                    f"üîó {channel_name}\n\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.save_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        start_param = None
        if message.text and len(message.text.split()) > 1:
            start_param = message.text.split()[1]
        
        if start_param and start_param.startswith('ref_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            try:
                referrer_id = int(start_param.replace('ref_', ''))
                if referrer_id and referrer_id != user_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    db.save_referral(referrer_id, user_id)
                    logger.info(f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user_id} –æ—Ç {referrer_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    try:
                        referrer_lang = db.get_user_language(referrer_id)
                        referrer_translations = get_translation(referrer_lang)
                        
                        await bot.send_message(
                            referrer_id, 
                            f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\nüë§ @{message.from_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\nüí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 2% —Å –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤!"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {start_param}")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–æ–π
        # –ê–¥—Ä–µ—Å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ WEB_APP_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://luxservice.online)
        web_url = os.getenv('WEB_APP_URL', 'https://luxservice.online')
        try:
            bot_username = (await bot.get_me()).username or 'Lux_on_bot'
        except Exception:
            bot_username = 'Lux_on_bot'
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        share_text = translations.get('referral_invite', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å LUXON!')
        share_url = "https://t.me/share/url?" + urllib.parse.urlencode({
            'url': referral_link,
            'text': share_text
        })

        # –î–æ–±–∞–≤–∏–º user_id –∏ –≤–µ—Ä—Å–∏—é v=timestamp, —á—Ç–æ–±—ã –æ–±—Ö–æ–¥–∏—Ç—å –∫–µ—à Telegram WebView –Ω–∞ —á–∞–Ω–∫–∞—Ö
        web_url_with_uid = web_url
        try:
            from urllib.parse import urlparse, urlencode, parse_qsl, urlunparse
            import time
            parts = urlparse(web_url)
            q = dict(parse_qsl(parts.query))
            q['uid'] = str(user_id)
            q['v'] = str(int(time.time()))
            new_query = urlencode(q)
            web_url_with_uid = urlunparse((parts.scheme, parts.netloc, parts.path or '/', parts.params, new_query, parts.fragment))
        except Exception:
            import time
            web_url_with_uid = f"{web_url.rstrip('/')}?uid={user_id}&v={int(time.time())}"

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app=WebAppInfo(url=web_url_with_uid))],
            [InlineKeyboardButton(text='üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π', url=share_url)]
        ])

        text = (
            f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>\n\n"
            f"–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π.\n"
            f"<i>–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ ‚Äò–ü–æ–¥–µ–ª–∏—Ç—å—Å—è‚Äô.</i>"
        )

        await message.answer(text, reply_markup=inline_kb, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None, bot=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command('start'))
    async def handle_start_wrapper(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await handle_start(message, state, db, bot)
    
    @dp.message(Command('help'))
    async def handle_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            user_id = message.from_user.id
            language = db.get_user_language(user_id)
            translations = get_translation(language)
            
            help_text = translations['help_text'].format(
                bot_name="LUXON",
                admin_username='@luxon_support'
            )
            
            await message.answer(help_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")
    
    @dp.message(Command('clear'))
    async def handle_clear(message: types.Message):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.save_user_data(user_id, 'current_state', '')
            db.save_user_data(user_id, 'current_action', '')
            db.save_user_data(user_id, 'current_bookmaker', '')
            db.save_user_data(user_id, 'current_amount', '')
            db.save_user_data(user_id, 'current_qr_hash', '')
            db.save_user_data(user_id, 'qr_photo_id', '')
            db.save_user_data(user_id, 'withdraw_id', '')
            db.save_user_data(user_id, 'withdraw_code', '')
            db.save_user_data(user_id, 'selected_bank', '')
            
            await message.answer("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    
    

