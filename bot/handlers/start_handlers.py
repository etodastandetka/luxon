#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import logging
from aiogram import Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from translations import get_translation
import os
import urllib.parse
import re
import requests

logger = logging.getLogger(__name__)

def get_bot_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ Django –∞–¥–º–∏–Ω–∫–∏"""
    try:
        response = requests.get('http://localhost:8081/bot/api/bot-settings/', timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
    return {
        'pause': False,
        'deposits': {'enabled': True, 'banks': []},
        'withdrawals': {'enabled': True, 'banks': []},
        'channel': {'enabled': False, 'name': '@bingokg_news'}
    }

async def check_channel_subscription(bot, user_id, channel_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(channel_name, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_name}: {e}")
        return False

async def handle_start(message: types.Message, state: FSMContext, db, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
    await state.clear()
    
    try:
        logger.info(f"/start received text='{message.text}' from user_id={message.from_user.id}")
        user_id = message.from_user.id
        user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.save_user_data(user_id, 'current_state', '')
        db.save_user_data(user_id, 'current_action', '')
        db.save_user_data(user_id, 'current_bookmaker', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        bot_settings = get_bot_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if bot_settings.get('channel', {}).get('enabled', False):
            channel_name = bot_settings.get('channel', {}).get('name', '@bingokg_news')
            is_subscribed = await check_channel_subscription(bot, user_id, channel_name)
            
            if not is_subscribed:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                await message.answer(
                    f"üì¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!</b>\n\n"
                    f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
                    f"üîó {channel_name}\n\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.save_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (—Ä–æ–±–∞—Å—Ç–Ω–æ):
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: "/start ref_123", "/startref_123", –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä, —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ "ref_123" –≤ —Ç–µ–∫—Å—Ç–µ
        raw = (message.text or '').strip()
        referrer_id = None
        try:
            m = re.search(r"\bref[_=]?(\d{5,})\b", raw, flags=re.IGNORECASE)
            if m:
                referrer_id = int(m.group(1))
            elif raw.lower().startswith('/startref_'):
                # fallback –¥–ª—è —Ä–µ–¥–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                digits = re.sub(r"\D", "", raw[len('/start'):])
                referrer_id = int(digits) if digits else None
        except Exception:
            referrer_id = None

        if referrer_id:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            try:
                if referrer_id and referrer_id != user_id:
                    saved = db.save_referral(referrer_id, user_id)
                    if saved:
                        logger.info(f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user_id} –æ—Ç {referrer_id}")
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–µ
                        try:
                            await bot.send_message(
                                referrer_id,
                                (
                                    "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                                    f"üë§ @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})\n"
                                    "üí∏ –ë–æ–Ω—É—Å—ã –Ω–∞—á–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤."
                                )
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")
                    else:
                        # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≠–¢–û–ú–£ –∂–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–∏–∑–∏—Ç–µ (–±–µ–∑ –¥—É–±–ª–µ–π –ø—Ä–∏–≤—è–∑–∫–∏)
                        existing_ref = db.get_referrer_id(user_id)
                        if existing_ref and int(existing_ref) == int(referrer_id):
                            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏
                            from datetime import datetime
                            key = f"ref_visit_notified_{referrer_id}"
                            last = db.get_user_data(user_id, key)
                            today = datetime.utcnow().strftime('%Y-%m-%d')
                            if last != today:
                                try:
                                    await bot.send_message(
                                        referrer_id,
                                        (
                                            "‚úÖ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n\n"
                                            f"üë§ @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})"
                                        )
                                    )
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–∏–∑–∏—Ç): {e}")
                                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                                db.save_user_data(user_id, key, today)
                        else:
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É ({existing_ref}), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∏ –≤—ã–π–¥–µ–º
        language = db.get_user_language(user_id)
        if not language:
            try:
                from handlers.language_handlers import handle_language_selection as _handle_language_selection
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º RU –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                await _handle_language_selection(message, 'ru', db)
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
                # –§–æ–ª–±—ç–∫: –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ä—É—Å—Å–∫–∏–º, –Ω–æ –ª—É—á—à–µ –¥–∞—Ç—å –≤—ã–±–æ—Ä
                language = 'ru'
        translations = get_translation(language)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        try:
            from handlers.deposit_handlers import show_main_menu
            await show_main_menu(message, language)
        except Exception as e:
            # –§–æ–ª–±—ç–∫: –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await message.answer(
                translations.get('welcome', f"–ü—Ä–∏–≤–µ—Ç, {user_name}!").format(user_name=user_name, admin_username='@luxon_support'),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None, bot=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è"""
    # /start (–æ–±—ã—á–Ω—ã–π)
    @dp.message(Command('start'))
    async def _start_cmd(message: types.Message, state: FSMContext):
        await handle_start(message, state, db, bot)

    # /start —Å deep-link payload
    @dp.message(CommandStart(deep_link=True))
    async def _start_deeplink(message: types.Message, state: FSMContext):
        await handle_start(message, state, db, bot)

    # /help
    @dp.message(Command('help'))
    async def _help_cmd(message: types.Message):
        try:
            user_id = message.from_user.id
            language = db.get_user_language(user_id)
            translations = get_translation(language)
            help_text = translations['help_text'].format(
                bot_name="LUXON",
                admin_username='@luxon_support'
            )
            await message.answer(help_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")

    # /ref <telegram_id>
    @dp.message(Command('ref'))
    async def _ref_bind_cmd(message: types.Message):
        try:
            parts = (message.text or '').split()
            if len(parts) < 2:
                await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: /ref 123456789")
                return
            referrer_id = int(parts[1])
            user_id = message.from_user.id
            if referrer_id == user_id:
                await message.reply("–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                return
            ok = db.save_referral(referrer_id, user_id)
            if ok:
                await message.reply("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–ø–∞—Å–∏–±–æ!")
                try:
                    await bot.send_message(referrer_id, (
                        "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                        f"üë§ @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})\n"
                        "üí∏ –ë–æ–Ω—É—Å—ã –Ω–∞—á–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤."
                    ))
                except Exception as e:
                    logger.error(f"Notify referrer error: {e}")
            else:
                await message.reply("–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID.")
        except Exception as e:
            logger.error(f"/ref error: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /ref")

    # /clear ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    @dp.message(Command('clear'))
    async def _clear_cmd(message: types.Message):
        try:
            user_id = message.from_user.id
            db.save_user_data(user_id, 'current_state', '')
            db.save_user_data(user_id, 'current_action', '')
            db.save_user_data(user_id, 'current_bookmaker', '')
            db.save_user_data(user_id, 'current_amount', '')
            db.save_user_data(user_id, 'current_qr_hash', '')
            db.save_user_data(user_id, 'qr_photo_id', '')
            db.save_user_data(user_id, 'withdraw_id', '')
            db.save_user_data(user_id, 'withdraw_code', '')
            db.save_user_data(user_id, 'selected_bank', '')
            await message.answer("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
