"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ Django API
"""

import logging
import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..database import Database
from ..translations import get_translation as get_text
from ..core.base_bot import BaseBot

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django API
DJANGO_API_URL = "http://147.45.141.113:8081/bot/api"

class AutoDepositStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    waiting_for_amount = State()
    waiting_for_confirmation = State()

class AutoDepositHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, bot: BaseBot):
        self.bot = bot
        self.db = Database()
    
    async def start_auto_deposit(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
            active_request = await self.get_active_deposit_request(user_id)
            if active_request:
                await message.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n"
                    f"üí∞ –°—É–º–º–∞: {active_request['amount']} KGS\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {active_request['status']}\n\n"
                    f"–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë."
                )
                return
            
            # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è)
            lang = 'ru'
            text = get_text(lang, 'user_found_account', account_id=user_id, min_amount=35, max_amount=100000)
            await message.answer(text, parse_mode="HTML")
            
            await state.set_state(AutoDepositStates.waiting_for_amount)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_amount(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É"""
        try:
            user_id = message.from_user.id
            text = message.text.strip()
            
            # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
            try:
                amount = float(text)
                if amount <= 0:
                    await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                
                if amount < 10:
                    await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10 KGS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                
                if amount > 10000:
                    await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10,000 KGS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                    
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.50):")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(amount=amount)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            request_id = await self.create_deposit_request(user_id, amount)
            
            if request_id:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                await self.show_deposit_instructions(message, amount, request_id)
                await state.set_state(AutoDepositStates.waiting_for_confirmation)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.finish()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.finish()
    
    async def show_deposit_instructions(self, message: types.Message, amount: float, request_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            qr_info = await self.get_qr_code_info()
            
            instructions = f"""
üéØ **–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!**

üí∞ **–°—É–º–º–∞:** {amount} KGS
üÜî **ID –∑–∞—è–≤–∫–∏:** {request_id}
üìä **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

üì± **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞
2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ **—Ç–æ—á–Ω–æ {amount} KGS** –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç
3. –î–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
4. –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

‚è∞ **–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:** 10 –º–∏–Ω—É—Ç
üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤

üí° **–í–∞–∂–Ω–æ:** –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ {amount} KGS!
            """.strip()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_deposit_{request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"cancel_deposit_{request_id}")
            )
            
            if qr_info:
                keyboard.add(InlineKeyboardButton("üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", callback_data=f"show_qr_{request_id}"))
            
            await message.answer(instructions, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
    
    async def create_deposit_request(self, user_id: int, amount: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Django API"""
        try:
            url = f"{DJANGO_API_URL}/manual-deposit/"
            data = {
                "user_id": user_id,
                "amount": amount,
                "bank_name": "Auto Deposit",
                "request_type": "auto_deposit"
            }
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                return result.get("request_id", f"auto_{user_id}_{int(amount * 100)}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    async def get_active_deposit_request(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        try:
            url = f"{DJANGO_API_URL}/player-balance/{user_id}/"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "amount": data.get("pending_amount", 0),
                    "status": data.get("status", "none")
                }
            else:
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    async def get_qr_code_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ QR-–∫–æ–¥–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "qr_data": "bank_account_info",
                "account_number": "1234567890"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            return None
    
    async def check_deposit_status(self, callback_query: types.CallbackQuery):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            user_id = callback_query.from_user.id
            request_id = callback_query.data.split("_")[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            url = f"{DJANGO_API_URL}/player-balance/{user_id}/"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                balance = data.get("balance", 0)
                last_updated = data.get("last_updated", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                await callback_query.message.edit_text(
                    f"üìä **–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏**\n\n"
                    f"üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance} KGS\n"
                    f"üïê **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {last_updated}\n"
                    f"üÜî **ID –∑–∞—è–≤–∫–∏:** {request_id}\n\n"
                    f"–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def cancel_deposit_request(self, callback_query: types.CallbackQuery):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        try:
            user_id = callback_query.from_user.id
            request_id = callback_query.data.split("_")[-1]
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
            await callback_query.message.edit_text(
                f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                f"üÜî **ID –∑–∞—è–≤–∫–∏:** {request_id}\n"
                f"üìä **–°—Ç–∞—Ç—É—Å:** –û—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def show_qr_code(self, callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            request_id = callback_query.data.split("_")[-1]
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞
            await callback_query.message.answer(
                f"üì± **QR-–∫–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è**\n\n"
                f"üÜî **ID –∑–∞—è–≤–∫–∏:** {request_id}\n"
                f"üí≥ **–°—á–µ—Ç:** 1234567890\n"
                f"üè¶ **–ë–∞–Ω–∫:** OptimaBank\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ QR-–∫–æ–¥–∞: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_auto_deposit_handlers(dp, bot: BaseBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    handlers = AutoDepositHandlers(bot)
    
    # –ö–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã - –∞–≤—Ç–æ –¥–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —É–±—Ä–∞–Ω–∞ - –∞–≤—Ç–æ –¥–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
    
    # Callback queries
    dp.register_callback_query_handler(
        handlers.check_deposit_status,
        lambda c: c.data.startswith('check_deposit_')
    )
    
    dp.register_callback_query_handler(
        handlers.cancel_deposit_request,
        lambda c: c.data.startswith('cancel_deposit_')
    )
    
    dp.register_callback_query_handler(
        handlers.show_qr_code,
        lambda c: c.data.startswith('show_qr_')
    )













