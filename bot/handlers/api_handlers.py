def _get_site_base() -> str:
    """–ë–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞ (Django), –∫—É–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç callback-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ò—Å—Ç–æ—á–Ω–∏–∫–∏, –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
    - DJANGO_BASE
    - SITE_BASE
    - Fallback: http://127.0.0.1:8000
    –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π: https://xendro.pro, https://api.xendro.pro
    """
    base = os.getenv('DJANGO_BASE') or os.getenv('SITE_BASE') or 'http://127.0.0.1:8000'
    return base.rstrip('/')

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –±–æ—Ç–∞
"""
import logging
import os
from typing import Dict
from aiogram import types, Dispatcher, F
import requests

from api_clients.onexbet_client import OneXBetAPIClient
from api_clients.melbet_client import MelbetAPIClient
from api_clients.onewin_client import OneWinAPIClient
from api_clients.mostbet_client import MostbetAPI
from config import BOOKMAKERS

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
pending_requests = {}

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    return True

async def process_deposit_via_api(bookmaker: str, user_id: str, amount: float) -> Dict:
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞"""
    try:
        config = BOOKMAKERS.get(bookmaker, {}).get('api_config', {})
        if not config:
            return {"success": False, "error": f"–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {bookmaker}"}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±—É–∫–º–µ–∫–µ—Ä–∞
        if bookmaker == '1xbet':
            client = OneXBetAPIClient(config)
        elif bookmaker == 'melbet':
            client = MelbetAPIClient(config)
        elif bookmaker == '1win':
            client = OneWinAPIClient(config)
        elif bookmaker == 'mostbet':
            client = MostbetAPI(config)
        else:
            return {"success": False, "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—É–∫–º–µ–∫–µ—Ä: {bookmaker}"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if bookmaker == 'mostbet':
            result = await client.deposit_user(user_id, amount)
        else:
            result = client.deposit(user_id, amount)
        
        logger.info(f"API {bookmaker} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        is_success = (result.get('success') == True or 
                     result.get('data', {}).get('Success') == True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–ª–∞–≥–æ–º success
        if is_success:
            result['success'] = True
        else:
            result['success'] = False
            
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API {bookmaker}: {e}")
        return {"success": False, "error": str(e)}

def _get_request_status(db_path: str, request_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ ‚Äî –ø—É—Å—Ç–æ."""
    try:
        import sqlite3
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("SELECT status FROM requests WHERE id=?", (int(request_id),))
        row = cur.fetchone()
        conn.close()
        return (row[0] if row else '') or ''
    except Exception as e:
        logger.warning(f"_get_request_status error: {e}")
        return ''

def _set_request_status(db_path: str, request_id: int, status: str) -> None:
    """–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ requests —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        import sqlite3
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute(
            "UPDATE requests SET status=?, updated_at=CURRENT_TIMESTAMP, processed_at=(CASE WHEN ? IN ('completed','rejected','auto_completed') THEN CURRENT_TIMESTAMP ELSE processed_at END) WHERE id=?",
            (status, status, int(request_id))
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.warning(f"_set_request_status error: {e}")

def _notify_site_update_status(request_id: int, status: str, request_type: str = 'deposit') -> None:
    """–®–ª—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–∞–π—Ç, —á—Ç–æ–±—ã UI –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è."""
    try:
        payload = {
            'request_type': request_type,
            'request_id': int(request_id),
            'status': status,
            'source': 'bot'
        }
        # URL —Å–∞–π—Ç–∞ –±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π
        url = f"{_get_site_base()}/bot/api/bot/update-status/"
        r = requests.post(url, json=payload, timeout=5)
        logger.info(f"update-status -> {r.status_code} {r.text[:200]}")
    except Exception as e:
        logger.warning(f"Failed to notify site update-status: {e}")

def create_request_keyboard(request_id: int, request_type: str, bookmaker: str = "1xbet") -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_type}_{request_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_type}_{request_id}")
        ],
        [
            types.InlineKeyboardButton(text="üîó –û–±—Ä–∞–±–æ—Ç–∞—Ç—å API", callback_data=f"process_api_{request_type}_{request_id}")
        ]
    ])
    return keyboard

def create_api_processing_keyboard(request_id: int, bookmaker: str = "1xbet") -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ API"""
    bookmaker_names = {
        '1xbet': '1XBET',
        'melbet': 'MELBET', 
        '1win': '1WIN',
        'mostbet': 'MOSTBET'
    }
    bookmaker_name = bookmaker_names.get(bookmaker, bookmaker.upper())
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text=f"‚úÖ API {bookmaker_name}", callback_data=f"api_confirm_{request_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"api_cancel_{request_id}")
        ]
    ])
    return keyboard

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ API"""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
    
    @dp.callback_query(F.data == "back_to_menu")
    async def handle_back_to_menu(callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ –∫–æ–ª–ª–±—ç–∫—É back_to_menu."""
        try:
            user_id = callback.from_user.id
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            try:
                db.save_user_data(user_id, 'current_state', '')
                db.save_user_data(user_id, 'current_action', '')
                db.save_user_data(user_id, 'current_bookmaker', '')
                db.save_user_data(user_id, 'current_amount', '')
                db.save_user_data(user_id, 'current_qr_hash', '')
                db.save_user_data(user_id, 'qr_photo_id', '')
                db.save_user_data(user_id, 'withdraw_id', '')
                db.save_user_data(user_id, 'withdraw_code', '')
                db.save_user_data(user_id, 'selected_bank', '')
            except Exception:
                pass

            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            from translations import get_translation
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            language = db.get_user_language(user_id)
            tr = get_translation(language)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=tr['deposit']), KeyboardButton(text=tr['withdraw'])],
                    [KeyboardButton(text=tr['referral'])],
                    [KeyboardButton(text=tr['support']), KeyboardButton(text=tr['history'])],
                    [KeyboardButton(text=tr['faq']), KeyboardButton(text=tr['language'])]
                ],
                resize_keyboard=True
            )
            welcome_text = tr['welcome'].format(
                user_name=(callback.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                admin_username='@luxon_support'
            )
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await callback.message.answer(welcome_text, reply_markup=keyboard, parse_mode='HTML')
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ back_to_menu: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    @dp.callback_query(F.data.startswith("process_api_"))
    async def handle_process_api(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å API' –¥–ª—è –∑–∞—è–≤–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            parts = callback.data.split("_")
            request_type = parts[2]
            request_id = int(parts[3])
            
            if request_id not in pending_requests:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î (–±–æ—Ç –º–æ–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è)
                try:
                    import sqlite3
                    conn = sqlite3.connect(db.db_path)
                    cur = conn.cursor()
                    cur.execute('''
                        SELECT user_id, amount, bookmaker, account_id
                        FROM requests
                        WHERE id = ? AND request_type = 'deposit'
                    ''', (request_id,))
                    row = cur.fetchone()
                    conn.close()
                    if row:
                        pending_requests[request_id] = {
                            'user_id': row[0],
                            'amount': row[1],
                            'bookmaker': (row[2] or '1xbet'),
                            'xbet_id': row[3] or row[0],
                        }
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ", show_alert=True)
                        return
                except Exception as e:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", show_alert=True)
                    return
            
            request_data = pending_requests[request_id]
            bookmaker = request_data.get('bookmaker', '1xbet')
            user_id_api = request_data.get('user_id')
            xbet_id = request_data.get('xbet_id', user_id_api)
            amount = request_data.get('amount')

            if request_type == "deposit":
                # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∞–º, —á—Ç–æ —É–π–¥–µ—Ç –≤ API
                info_block = f"\n\nüßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ API\n–ë–ö: {bookmaker.upper()}\nAccount ID: {xbet_id}\n–°—É–º–º–∞: {amount}"
                try:
                    await callback.message.edit_caption(
                        caption=(callback.message.caption or '') + info_block,
                        reply_markup=create_api_processing_keyboard(request_id, bookmaker)
                    )
                except Exception:
                    await callback.message.edit_text(
                        (callback.message.text or '') + info_block,
                        reply_markup=create_api_processing_keyboard(request_id, bookmaker)
                    )
                await callback.answer("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ API")
            else:
                await callback.answer("‚ùå API –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")

    @dp.callback_query(F.data.startswith("check_api_"))
    async def handle_check_api_legacy(callback: types.CallbackQuery):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–æ–π: check_api_<user_id>_<amount>
        –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é pending-–∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ requests –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ process_api_.
        """
        try:
            parts = callback.data.split("_")
            # check_api_{user_id}_{amount}
            legacy_user_id = int(parts[2])
            try:
                legacy_amount = float(parts[3])
            except Exception:
                legacy_amount = None

            import sqlite3, time
            try:
                conn = sqlite3.connect(db.db_path)
                cur = conn.cursor()
                # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é pending-–∑–∞—è–≤–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –∂—ë—Å—Ç–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É–º–º–µ)
                cur.execute('''
                    SELECT id, user_id, amount, bookmaker, account_id
                    FROM requests
                    WHERE request_type='deposit' AND status='pending' AND user_id=?
                    ORDER BY created_at DESC LIMIT 1
                ''', (legacy_user_id,))
                row = cur.fetchone()
                conn.close()

                if not row:
                    # –ù–µ—Ç —Å—Ç—Ä–æ–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é pending-–∑–∞—è–≤–∫—É –≤ –ø–∞–º—è—Ç–∏
                    req_id = int(time.time())
                    bookmaker = '1xbet'
                    pending_requests[req_id] = {
                        'user_id': legacy_user_id,
                        'amount': legacy_amount or 0.0,
                        'bookmaker': bookmaker,
                        'xbet_id': legacy_user_id,
                    }
                    api_keyboard = create_api_processing_keyboard(req_id, bookmaker)
                    await callback.message.edit_reply_markup(reply_markup=api_keyboard)
                    await callback.answer("‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ 'API –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'", show_alert=True)
                else:
                    req_id, u_id, amount, bookmaker, account_id = row
                    pending_requests[req_id] = {
                        'user_id': u_id,
                        'amount': amount,
                        'bookmaker': (bookmaker or '1xbet'),
                        'xbet_id': account_id or u_id,
                    }
                    api_keyboard = create_api_processing_keyboard(req_id, (bookmaker or '1xbet'))
                    await callback.message.edit_reply_markup(reply_markup=api_keyboard)
                    await callback.answer("üîó –ì–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ 'API –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'", show_alert=False)
            except sqlite3.OperationalError as e:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                if 'no such table' in str(e).lower():
                    req_id = int(time.time())
                    bookmaker = '1xbet'
                    pending_requests[req_id] = {
                        'user_id': legacy_user_id,
                        'amount': legacy_amount or 0.0,
                        'bookmaker': bookmaker,
                        'xbet_id': legacy_user_id,
                    }
                    api_keyboard = create_api_processing_keyboard(req_id, bookmaker)
                    await callback.message.edit_reply_markup(reply_markup=api_keyboard)
                    await callback.answer("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ requests –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ 'API –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'", show_alert=True)
                else:
                    raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ legacy check_api_: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ legacy-–∫–Ω–æ–ø–∫–∏", show_alert=True)

    @dp.callback_query(F.data.startswith("confirm_deposit_"))
    async def handle_confirm_deposit_legacy(callback: types.CallbackQuery):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–æ–π: confirm_deposit_<user_id>_<amount>
        –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç API-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Å–ª–µ–¥–Ω—é—é pending-–∑–∞—è–≤–∫—É,
        –∏–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–∞–±–ª–∏—Ü—ã requests.
        """
        try:
            parts = callback.data.split("_")
            legacy_user_id = int(parts[2])
            try:
                legacy_amount = float(parts[3])
            except Exception:
                legacy_amount = 0.0

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞—è–≤–∫—É
            import sqlite3
            bookmaker = '1xbet'
            xbet_id = legacy_user_id
            try:
                conn = sqlite3.connect(db.db_path)
                cur = conn.cursor()
                cur.execute('''
                    SELECT id, user_id, amount, bookmaker, account_id
                    FROM requests
                    WHERE request_type='deposit' AND status='pending' AND user_id=?
                    ORDER BY created_at DESC LIMIT 1
                ''', (legacy_user_id,))
                row = cur.fetchone()
                conn.close()
                if row:
                    _, u_id, amount, bookmaker_db, account_id = row
                    legacy_amount = amount or legacy_amount
                    bookmaker = bookmaker_db or bookmaker
                    xbet_id = account_id or u_id
                    # –ï—Å–ª–∏ account_id –ø—É—Å—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω TG ID ‚Äî –±–µ—Ä—ë–º –∏–∑ user_data
                    if (not account_id) or (str(account_id) == str(u_id)):
                        try:
                            from database import Database
                            db_local = Database(db.db_path)
                            acc_from_user_data = db_local.get_user_data(u_id, 'id', bookmaker)
                            if acc_from_user_data:
                                xbet_id = acc_from_user_data
                        except Exception:
                            pass
            except sqlite3.OperationalError:
                # –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ
                pass

            # –í—ã–ø–æ–ª–Ω—è–µ–º API –≤—ã–∑–æ–≤
            # –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram user_id –∫–∞–∫ account_id –≤ API
            if not xbet_id or str(xbet_id) == str(legacy_user_id):
                await callback.answer("‚ùå Account ID –±—É–∫–º–µ–∫–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                return

            result = await process_deposit_via_api(bookmaker, str(xbet_id), legacy_amount)
            is_success = (result.get('success') == True or result.get('data', {}).get('Success') == True)

            if is_success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ request_id, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
                await send_deposit_processed(callback.bot, legacy_user_id, legacy_amount, str(xbet_id), request_id=None)
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º –∏ –ë–î: –æ—Ç–º–µ—Ç–∏–º –∫–∞–∫ completed
                try:
                    # 1) –û–±–Ω–æ–≤–∏–º unified requests: –µ—Å–ª–∏ id –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é pending-–∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑
                    try:
                        real_req_id = None
                        if isinstance(req_id, int):
                            real_req_id = req_id
                        else:
                            # –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–Ω–∞–π—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            conn2 = sqlite3.connect(db.db_path)
                            cur2 = conn2.cursor()
                            cur2.execute('''
                                SELECT id FROM requests 
                                WHERE request_type='deposit' AND status='pending' AND user_id=?
                                ORDER BY created_at DESC LIMIT 1
                            ''', (legacy_user_id,))
                            row2 = cur2.fetchone()
                            conn2.close()
                            if row2:
                                real_req_id = int(row2[0])
                        if real_req_id:
                            _set_request_status(db.db_path, real_req_id, 'completed')
                            _notify_site_update_status(real_req_id, 'completed', 'deposit')
                    except Exception as _e:
                        logger.warning(f"Could not set status in unified requests: {_e}")
                    # 2) –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –¥–µ—Ä–≥–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∞–π—Ç–µ)
                    try:
                        from handlers.deposit_handlers import sync_to_django_admin
                        sync_to_django_admin(
                            user_id=legacy_user_id,
                            username='',
                            first_name='',
                            bookmaker=bookmaker,
                            amount=legacy_amount,
                            account_id=str(xbet_id),
                            photo_file_id='',
                            status='completed',
                            photo_file_url=None,
                            request_type='deposit'
                        )
                    except Exception:
                        pass
                except Exception as e:
                    logger.warning(f"Sync to Django after legacy confirm failed: {e}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                try:
                    await callback.message.edit_caption(
                        caption=(callback.message.caption or '') + f"\n\nüåê API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ({bookmaker.upper()})\nüí∞ –°—É–º–º–∞: {legacy_amount} —Å–æ–º",
                        reply_markup=None
                    )
                except Exception:
                    await callback.message.edit_text(
                        (callback.message.text or '') + f"\n\nüåê API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ({bookmaker.upper()})\nüí∞ –°—É–º–º–∞: {legacy_amount} —Å–æ–º",
                        reply_markup=None
                    )
                await callback.answer("‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            else:
                err = (
                    result.get('error')
                    or result.get('message')
                    or (result.get('data') or {}).get('Message')
                    or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                )
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {err}", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ legacy confirm_deposit_: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ confirm_deposit", show_alert=True)

    @dp.callback_query(F.data.startswith("api_confirm_"))
    async def handle_api_confirm(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å API' –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            parts = callback.data.split("_")
            request_id = int(parts[2])

            if request_id not in pending_requests:
                # Fallback –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ë–î
                try:
                    import sqlite3
                    conn = sqlite3.connect(db.db_path)
                    cur = conn.cursor()
                    cur.execute('''
                        SELECT user_id, amount, bookmaker, account_id
                        FROM requests
                        WHERE id = ? AND request_type = 'deposit'
                    ''', (request_id,))
                    row = cur.fetchone()
                    conn.close()
                    if row:
                        pending_requests[request_id] = {
                            'user_id': row[0],
                            'amount': row[1],
                            'bookmaker': (row[2] or '1xbet'),
                            'xbet_id': row[3] or row[0],
                        }
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                        return
                except Exception as e:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", show_alert=True)
                    return

            # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            status_now = _get_request_status(db.db_path, request_id)
            if status_now and status_now != 'pending':
                await callback.answer(f"–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: {status_now}")
                try:
                    await callback.message.edit_reply_markup(reply_markup=None)
                except Exception:
                    pass
                return

            request_data = pending_requests.get(request_id) or {}
            user_id = request_data.get('user_id')
            amount = request_data.get('amount')
            bookmaker = request_data.get('bookmaker', '1xbet')
            xbet_id = request_data.get('xbet_id', user_id)
            # –ï—Å–ª–∏ xbet_id –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ TG ID ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—á–∏—Ç–∞—Ç—å –∏–∑ user_data
            if str(xbet_id) == str(user_id):
                try:
                    from database import Database
                    db_local = Database(db.db_path)
                    acc_from_user_data = db_local.get_user_data(user_id, 'id', bookmaker)
                    if acc_from_user_data:
                        xbet_id = acc_from_user_data
                except Exception:
                    pass
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ API –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {bookmaker}, ID: {xbet_id}, —Å—É–º–º–∞: {amount}")

            # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ pending ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
            try:
                status_now = _get_request_status(db.db_path, request_id)
                if status_now and status_now != 'pending':
                    await callback.answer(f"–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: {status_now}", show_alert=True)
                    try:
                        await callback.message.edit_reply_markup(reply_markup=None)
                    except Exception:
                        pass
                    return
            except Exception:
                pass
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
            # –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram user_id –∫–∞–∫ account_id –≤ API
            if not xbet_id or str(xbet_id) == str(user_id):
                await callback.answer("‚ùå Account ID –±—É–∫–º–µ–∫–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞—è–≤–∫—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–µ–π —É–∫–∞–∑–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
                return


            result = await process_deposit_via_api(bookmaker, xbet_id, amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            is_success = (result.get('success') == True or 
                         result.get('data', {}).get('Success') == True)
            
            if is_success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∑–∞—è–≤–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è)
                await send_deposit_processed(callback.bot, user_id, amount, xbet_id, request_id=request_id)
                # –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ —Å–æ–æ–±—â–∏–º —Å–∞–π—Ç—É
                _set_request_status(db.db_path, request_id, 'completed')
                _notify_site_update_status(request_id, 'completed', 'deposit')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                try:
                    await callback.message.edit_caption(
                        caption=(callback.message.caption or '') + f"\n\n{result.get('data', {}).get('Message') or ''}",
                        reply_markup=None
                    )
                except Exception:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–µ–¥–∏–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await callback.message.edit_text(
                        (callback.message.text or '') + f"\n\nüåê –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API {bookmaker.upper()}\nüí∞ –°—É–º–º–∞: {amount} —Å–æ–º",
                        reply_markup=None
                    )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                del pending_requests[request_id]
                
                await callback.answer(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ API {bookmaker.upper()}")
            else:
                error_msg = (
                    result.get('error')
                    or result.get('message')
                    or (result.get('data') or {}).get('Message')
                    or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                )
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}", show_alert=True)
                logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è API: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

    @dp.callback_query(F.data.startswith("api_cancel_"))
    async def handle_api_cancel(callback: types.CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ API-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã API: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∞—Ö—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ª–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã–µ callback'–∏
    @dp.callback_query(lambda c: (c.data or '') and not (c.data.startswith('withdraw_bank_')
                                                        or c.data.startswith('approve_')
                                                        or c.data.startswith('reject_')
                                                        or c.data.startswith('process_api_')
                                                        or c.data.startswith('api_confirm_')
                                                        or c.data.startswith('api_cancel_')
                                                        or c.data.startswith('history_page_')
                                                        or c.data == 'history_back_to_menu'
                                                        or c.data == 'back_to_menu'))
    async def handle_unknown_callback(callback: types.CallbackQuery):
        data = callback.data or '<empty>'
        logger.warning(f"[API handlers] Unhandled callback: {data}")
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
        await callback.answer()
    @dp.callback_query(lambda c: c.data.startswith("approve_"))
    async def handle_approve(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–¥–æ–±—Ä–∏—Ç—å'"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            parts = callback.data.split("_")
            request_type = parts[1]
            request_id = int(parts[2])
            
            if request_id not in pending_requests:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç deposit/withdraw)
                try:
                    import sqlite3
                    conn = sqlite3.connect(db.db_path)
                    cur = conn.cursor()
                    cur.execute('''
                        SELECT user_id, amount, bookmaker, account_id, COALESCE(request_type,'deposit')
                        FROM requests
                        WHERE id = ?
                    ''', (request_id,))
                    row = cur.fetchone()
                    conn.close()
                    if row:
                        pending_requests[request_id] = {
                            'user_id': row[0],
                            'amount': row[1],
                            'bookmaker': (row[2] or '1xbet'),
                            'xbet_id': row[3] or row[0],
                            'type': row[4]
                        }
                        # –ü–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–∏–º —Ç–∏–ø –∏–∑ –ë–î, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                        request_type = row[4]
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return
                except Exception as e:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", show_alert=True)
                    return
            
            # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            status_now = _get_request_status(db.db_path, request_id)
            if status_now and status_now != 'pending':
                await callback.answer(f"–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: {status_now}")
                try:
                    await callback.message.edit_reply_markup(reply_markup=None)
                except Exception:
                    pass
                return

            request_data = pending_requests.get(request_id) or {}
            user_id = request_data.get('user_id')
            amount = request_data.get('amount')
            xbet_id = request_data.get('xbet_id', user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if request_type == "deposit":
                await send_deposit_processed(callback.bot, user_id, amount, xbet_id, request_id=request_id)
            else:
                await send_withdrawal_processed(callback.bot, user_id, amount, xbet_id)
            
            # –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ —Å–æ–æ–±—â–∏–º —Å–∞–π—Ç—É
            _set_request_status(db.db_path, request_id, 'completed')
            _notify_site_update_status(request_id, 'completed', request_type)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            try:
                await callback.message.edit_caption(
                    caption=(callback.message.caption or '') + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                    reply_markup=None
                )
            except Exception:
                try:
                    await callback.message.edit_text(
                        (callback.message.text or '') + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                        reply_markup=None
                    )
                except Exception:
                    pass
            
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del pending_requests[request_id]
            
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")

    @dp.callback_query(lambda c: c.data.startswith("reject_"))
    async def handle_reject(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            parts = callback.data.split("_")
            request_type = parts[1]
            request_id = int(parts[2])
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏
            if request_id not in pending_requests:
                try:
                    import sqlite3
                    conn = sqlite3.connect(db.db_path)
                    cur = conn.cursor()
                    cur.execute('''
                        SELECT user_id, amount, bookmaker, account_id, COALESCE(request_type,'deposit')
                        FROM requests
                        WHERE id = ?
                    ''', (request_id,))
                    row = cur.fetchone()
                    conn.close()
                    if row:
                        pending_requests[request_id] = {
                            'user_id': row[0],
                            'amount': row[1],
                            'bookmaker': (row[2] or '1xbet'),
                            'xbet_id': row[3] or row[0],
                            'type': row[4]
                        }
                        # –ü–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–∏–º —Ç–∏–ø –∏–∑ –ë–î, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                        request_type = row[4]
                    else:
                        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                        return
                except Exception as e:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", show_alert=True)
                    return

            request_data = pending_requests.get(request_id) or {}
            user_id = request_data.get('user_id')
            amount = request_data.get('amount')
            xbet_id = request_data.get('xbet_id', user_id)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (–µ–¥–∏–Ω—ã–π —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç)
            await send_deposit_rejected(callback.bot, user_id, amount, xbet_id, request_id=request_id)

            # –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ —Å–æ–æ–±—â–∏–º —Å–∞–π—Ç—É
            _set_request_status(db.db_path, request_id, 'rejected')
            _notify_site_update_status(request_id, 'rejected', request_type)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            try:
                await callback.message.edit_caption(
                    caption=(callback.message.caption or '') + "\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    reply_markup=None
                )
            except Exception:
                try:
                    await callback.message.edit_text(
                        (callback.message.text or '') + "\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                        reply_markup=None
                    )
                except Exception:
                    pass
            
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            try:
                del pending_requests[request_id]
            except Exception:
                pass
            
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")

async def send_withdrawal_processed(bot, user_id: int, amount: float, xbet_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        from translations import get_translation
        # –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ —É –Ω–∞—Å –Ω–µ—Ç —è–∑—ã–∫–∞ –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ —á–µ—Ä–µ–∑ –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            from database import Database
            db = Database()
            language = db.get_user_language(user_id)
            tr = get_translation(language)
        except Exception:
            tr = get_translation('ru')

        text = tr.get('withdrawal_processed_message', "‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!\nüí∞ –°—É–º–º–∞: {amount} —Å–æ–º\nüÜî ID: {xbet_id}").format(
            amount=amount,
            xbet_id=xbet_id
        )
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ: {e}")

async def send_deposit_processed(bot, user_id: int, amount: float, xbet_id: str, request_id: int = None, duration_seconds: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    1) duration_seconds (—è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –∫–æ–¥–∞)
    2) –ü–æ request_id: now - created_at
    3) –ò–Ω–∞—á–µ ‚Äî –±–µ–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: "üï∞Ô∏è  15s"; –µ—Å–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 600—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "üï∞Ô∏è  10m+".
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º duration_line
        duration_line = ""
        try:
            if duration_seconds is not None:
                secs = max(0, int(duration_seconds))
            elif request_id is not None:
                # –ù–∞–¥—ë–∂–Ω–æ —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø—Ä—è–º–æ –≤ SQLite, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç
                from database import Database
                import sqlite3
                db = Database()
                conn = sqlite3.connect(db.db_path)
                cur = conn.cursor()
                try:
                    cur.execute("SELECT CAST(strftime('%s','now') - strftime('%s', created_at) AS INTEGER) FROM requests WHERE id=?", (int(request_id),))
                    row = cur.fetchone()
                    secs = int(row[0]) if row and row[0] is not None else None
                    if secs is not None and secs < 0:
                        secs = 0
                finally:
                    conn.close()
            else:
                secs = None

            if secs is not None:
                # –ú–∏–Ω–∏–º—É–º 1s –ø—Ä–∏ –ø–æ—á—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                secs_display = max(1, int(secs))
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 10m+
                if secs_display > 600:
                    duration_line = "üï∞Ô∏è  10m+\n"
                else:
                    duration_line = f"üï∞Ô∏è  {secs_display}s\n"
        except Exception:
            duration_line = ""

        # –§–æ—Ä–º–∞—Ç —Å—É–º–º—ã: –±–µ–∑ –∫–æ–ø–µ–µ–∫, –µ—Å–ª–∏ —Ü–µ–ª–æ–µ
        try:
            amt = float(amount or 0)
            amount_str = f"{amt:.0f} KGS" if abs(amt - round(amt)) < 1e-6 else f"{amt:.2f} KGS"
        except Exception:
            amount_str = f"{amount} KGS"

        text = (
            "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n"
            f"{duration_line}"
            f"üÜî  {xbet_id}\n"
            f"üíµ  {amount_str}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å."
        )
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")

async def send_deposit_rejected(bot, user_id: int, amount: float, xbet_id: str, request_id: int = None, reason: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    try:
        # –§–æ—Ä–º–∞—Ç —Å—É–º–º—ã
        try:
            amt = float(amount or 0)
            amount_str = f"{amt:.0f} KGS" if abs(amt - round(amt)) < 1e-6 else f"{amt:.2f} KGS"
        except Exception:
            amount_str = f"{amount} KGS"

        reason_line = f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}" if (reason and str(reason).strip()) else ""
        text = (
            "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n"
            f"üÜî  {xbet_id}\n"
            f"üíµ  {amount_str}{reason_line}\n\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: @operator_luxon"
        )
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
