
#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤
"""
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from utils.translations import get_translation
from utils.bot_texts import get_bot_text

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from handlers.deposit_handlers import (
    handle_deposit_message, handle_id_input, handle_amount_input, handle_cancel_deposit
)
from handlers.withdraw_handlers import (
    handle_withdraw_message, handle_withdraw_id_input, 
    handle_withdraw_code_input, handle_withdraw_qr_photo, handle_cancel_withdraw
)
from handlers.faq_handlers import (
    handle_faq_command, handle_faq_deposit, handle_faq_withdraw, 
    handle_faq_technical, handle_faq_limits, handle_faq_time
)
from handlers.history_handlers import (
    handle_history_command, handle_history_page_callback, handle_history_back_to_menu
)
from handlers.qr_handlers import (
    handle_qr_generator_start, handle_qr_amount_input
)
from handlers.support_handlers import (
    handle_support_message, handle_channel_command
)

from handlers.states import ExtendedStates
from handlers.utils import get_user_language, get_text_for_user, create_main_reply_keyboard

logger = logging.getLogger(__name__)

def create_language_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="switch_lang_ru")],
            [InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞", callback_data="switch_lang_ky")],
            [InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="switch_lang_uz")]
        ]
    )
    return keyboard

async def handle_start_command_extended(message: types.Message, state: FSMContext, bot_name: str, 
                                       user_languages: Dict[int, str], db_manager, last_bot_message_id: Dict[int, int]):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    start_param = message.text.split()[1] if len(message.text.split()) > 1 else ""
    if start_param.startswith("ref"):
        try:
            from handlers.referral_handlers import handle_referral_start_parameter
            await handle_referral_start_parameter(message, state, bot_name, user_languages, db_manager)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    if user_id in last_bot_message_id:
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å bot –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # await bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id[user_id])
            del last_bot_message_id[user_id]
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±–∏—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫ —Ä–∞–Ω–µ–µ
    user_data = db_manager.get_user(user_id)
    has_selected_language = user_data and user_data.get('language_selected', False)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª —è–∑—ã–∫ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    if not has_selected_language:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="switch_lang_ru")],
                [InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞", callback_data="switch_lang_ky")],
                [InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="switch_lang_uz")]
            ]
        )
        
        welcome_text = (
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n\n"
            "üåê –ö–æ—à –∫–µ–ª–∏“£–∏–∑! –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:\n\n"
            "üåê Xush kelibsiz! Tilni tanlang:"
        )
        
        await message.answer(welcome_text, reply_markup=keyboard)
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –±–æ—Ç–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    bot_display_names = {
        "1xbet": "1XBET",
        "1win": "1WIN", 
        "melbet": "MELBET",
        "mostbet": "MOSTBET"
    }
    
    bot_display_name = bot_display_names.get(bot_name, bot_name.upper())
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª —è–∑—ã–∫ —Ä–∞–Ω–µ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    admin_username = "@operator_luxkassa"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = get_user_language(user_id, user_languages, db_manager)
    
    welcome_text = get_translation(language, 'welcome', user_name=user_name, admin_username=admin_username)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await message.answer(welcome_text, reply_markup=keyboard)

async def handle_language_switch(callback: types.CallbackQuery, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    language = callback.data.split('_')[-1]  # switch_lang_ru -> ru
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ –≤ –ë–î
    db_manager.add_user(user_id, callback.from_user.username, callback.from_user.first_name, callback.from_user.last_name)
    db_manager.update_user_language(user_id, language)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –∫—ç—à–µ
    user_languages[user_id] = language
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –±–æ—Ç–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    bot_display_names = {
        "1xbet": "1XBET",
        "1win": "1WIN", 
        "melbet": "MELBET",
        "mostbet": "MOSTBET"
    }
    
    bot_display_name = bot_display_names.get(bot_name, bot_name.upper())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    user_name = callback.from_user.first_name or callback.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    admin_username = "@operator_luxkassa"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_translation –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    welcome_text = get_translation(language, 'welcome', user_name=user_name, admin_username=admin_username)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(welcome_text, reply_markup=keyboard)
    await callback.answer(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è {bot_display_name}!")

async def handle_cancel_message(message: types.Message, state: FSMContext, bot_name: str, 
                               user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = message.from_user.id
    
    await state.clear()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –±–æ—Ç–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    bot_display_names = {
        "1xbet": "1XBET",
        "1win": "1WIN", 
        "melbet": "MELBET",
        "mostbet": "MOSTBET"
    }
    
    bot_display_name = bot_display_names.get(bot_name, bot_name.upper())
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    language = get_user_language(user_id, user_languages, db_manager)
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    admin_username = "@operator_luxkassa"
    
    welcome_text = get_translation(language, 'welcome', user_name=user_name, admin_username=admin_username)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await message.answer(welcome_text, reply_markup=keyboard)

async def handle_help_command(message: types.Message, bot_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –±–æ—Ç–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    bot_display_names = {
        "1xbet": "1XBET",
        "1win": "1WIN", 
        "melbet": "MELBET",
        "mostbet": "MOSTBET"
    }
    
    bot_display_name = bot_display_names.get(bot_name, bot_name.upper())
    
    help_text = f"""
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É {bot_display_name}

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @operator_luxkassa
    """
    
    await message.answer(help_text)

async def handle_referral_message(message: types.Message, state: FSMContext, bot_name: str,
                                 user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"""
    from handlers.referral_handlers import handle_referral_start
    
    await handle_referral_start(message, state, bot_name, user_languages, db_manager)
