#!/usr/bin/env python3
"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
"""
import logging
import random
from datetime import datetime
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from translations import get_translation
from config import BOOKMAKERS, BOT_TOKEN

logger = logging.getLogger(__name__)

async def send_withdraw_request_to_group(bot, user_id: int, amount: float, bookmaker: str, bank_code: str, withdraw_id: str, code: str, photo_file_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await bot.get_chat(user_id)
        username = user_info.username or "–ù–µ—Ç username"
        first_name = user_info.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–∫–º–µ–∫–µ—Ä–∞
        bookmaker_config = BOOKMAKERS.get(bookmaker, {})
        group_id = bookmaker_config.get('withdraw_group_id')
        
        if not group_id:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω group_id –¥–ª—è –±—É–∫–º–µ–∫–µ—Ä–∞ {bookmaker}")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        request_text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}
üÜî <b>ID:</b> {user_id}
üè¢ <b>–ë—É–∫–º–µ–∫–µ—Ä:</b> {bookmaker_config.get('name', bookmaker.upper())}
üí∞ <b>–°—É–º–º–∞:</b> {amount:.2f} —Å–æ–º
üè¶ <b>–ë–∞–Ω–∫:</b> {bank_code.upper()}
üÜî <b>ID —Å—á–µ—Ç–∞:</b> {withdraw_id}
üîê <b>–ö–æ–¥ –≤—ã–≤–æ–¥–∞:</b> —Å–∫—Ä—ã—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è API)

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_withdraw_{user_id}_{amount}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}_{amount}")
            ],
            [
                InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API", callback_data=f"check_withdraw_api_{user_id}_{amount}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
        if photo_file_id:
            await bot.send_photo(
                chat_id=group_id,
                photo=photo_file_id,
                caption=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=group_id,
                text=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        return False

def get_bot_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ Django –∞–¥–º–∏–Ω–∫–∏"""
    try:
        import requests
        response = requests.get('http://localhost:8081/bot/api/bot-settings/', timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
    return {
        'pause': False,
        'deposits': {'enabled': True, 'banks': []},
        'withdrawals': {'enabled': True, 'banks': []},
        'channel': {'enabled': False, 'name': '@bingokg_news'}
    }

def get_bank_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤"""
    return {
        'demirbank': {'deposit_enabled': True, 'withdraw_enabled': True},
        'odengi': {'deposit_enabled': True, 'withdraw_enabled': True},
        'bakai': {'deposit_enabled': True, 'withdraw_enabled': True},
        'balance': {'deposit_enabled': True, 'withdraw_enabled': True},
        'megapay': {'deposit_enabled': True, 'withdraw_enabled': True},
        'mbank': {'deposit_enabled': True, 'withdraw_enabled': True},
    }

async def show_main_menu(message: types.Message, language: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    translations = get_translation(language)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
            [KeyboardButton(text=translations['referral'])],
            [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
            [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
        ],
        resize_keyboard=True
    )
    await message.answer(translations['welcome'].format(user_name=message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', admin_username='@luxon_support'), reply_markup=keyboard)

async def start_withdrawal(message: types.Message, state: FSMContext = None, bookmaker: str = None, language: str = None, db = None, bookmakers = None):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ - –®–∞–≥ 1: –í—ã–±–æ—Ä –±–∞–Ω–∫–∞"""
    if not all([bookmaker, language, db, bookmakers]):
        logger.error("Missing required parameters for start_withdrawal")
        return
        
    user_id = message.from_user.id
    translations = get_translation(language)
    
    logger.info(f"Starting withdrawal process for user {user_id}, bookmaker: {bookmaker}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–º–µ–∫–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_user_data(user_id, 'current_bookmaker', bookmaker)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    await show_bank_selection_for_withdrawal(message, db, bookmakers)

async def show_bank_selection_for_withdrawal(message: types.Message, db, bookmakers):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - –®–∞–≥ 1 (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏)"""
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    logger.info(f"Showing bank selection for withdrawal to user {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–Ω–∫–∞–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    kb = InlineKeyboardBuilder()

    # –ü—Ä–æ—á–∏—Ç–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—ã–≤–æ–¥–∞ –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ –∏–∑ bot_settings
    def _read_withdraw_settings():
        try:
            import sqlite3, json
            db_path = getattr(db, 'db_path', '') or ''
            if not db_path:
                from pathlib import Path
                db_path = str(Path(__file__).resolve().parents[1] / 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("SELECT value FROM bot_settings WHERE key='withdrawals_enabled'")
            row_en = cur.fetchone()
            cur.execute("SELECT value FROM bot_settings WHERE key='withdraw_banks'")
            row_banks = cur.fetchone()
            conn.close()
            enabled = True if not row_en else (str(row_en[0]).strip() in ('1','true','True'))
            banks = []
            try:
                banks = json.loads(row_banks[0]) if row_banks and row_banks[0] else []
            except Exception:
                banks = []
            valid = {'–ö–æ–º–ø–∞–Ω—å–æ–Ω','–û! –î–µ–Ω—å–≥–∏','–ë–∞–∫–∞–π','Balance.kg','MegaPay','MBank'}
            banks = [b for b in banks if b in valid]
            return enabled, set(banks)
        except Exception:
            return True, set()

    w_enabled, allowed_banks = _read_withdraw_settings()
    if not w_enabled:
        await message.answer("‚õî –í—ã–≤–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, language)
        return
    
    # –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
    banks = [
        ("–ö–æ–º–ø–∞–Ω—å–æ–Ω", "kompanion"),
        ("–û! –î–µ–Ω—å–≥–∏", "odengi"),
        ("–ë–∞–∫–∞–π", "bakai"),
        ("Balance.kg", "balance"),
        ("MegaPay", "megapay"),
        ("MBank", "mbank")
    ]

    # –†–µ–Ω–¥–µ—Ä–∏–º: —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚Äî –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ ‚Äî alert
    for bank_name, bank_code in banks:
        if not allowed_banks or bank_name in allowed_banks:
            kb.button(text=bank_name, callback_data=f"withdraw_bank_{bank_code}")
        else:
            kb.button(text=f"{bank_name} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"withdraw_bank_unavailable_{bank_code}")
    
    kb.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(2)
    
    bank_selection_text = f"""
{translations['withdraw_instruction']}

{translations['select_bank_for_withdraw']}
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –±–∞–Ω–∫–æ–≤
    await message.answer(bank_selection_text, reply_markup=kb.as_markup(), parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.save_user_data(user_id, 'current_state', 'waiting_for_bank_selection')
    logger.info(f"Bank selection shown, state set to waiting_for_bank_selection for user {user_id}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
    @message.bot.callback_query(F.data.startswith('withdraw_bank_unavailable_'))
    async def handle_unavailable(cb: types.CallbackQuery):
        try:
            await cb.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–∞ —ç—Ç–æ—Ç –±–∞–Ω–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        except Exception:
            try:
                await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            except Exception:
                pass

async def handle_withdraw_bank_selection(user_id: int, bank_code: str, db, bookmakers, bot, callback_message=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 2: –ó–∞–ø—Ä–æ—Å QR-–∫–æ–¥–∞"""
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    logger.info(f"Processing bank selection: {bank_code} for user {user_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫
    db.save_user_data(user_id, 'selected_bank', bank_code)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É QR-–∫–æ–¥–∞
    db.save_user_data(user_id, 'current_state', 'waiting_for_qr_photo')
    logger.info(f"State set to waiting_for_qr_photo for user {user_id}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    if callback_message:
        try:
            # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫
            await callback_message.edit_text(
                (callback_message.text or "") + f"\n\n‚úÖ <b>–í—ã–±—Ä–∞–Ω –±–∞–Ω–∫:</b> {bank_code.upper()}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é QR-–∫–æ–¥–∞
    qr_instruction = f"""
{translations['qr_instruction']}

{translations['send_qr_wallet']}
    """
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    
    logger.info(f"Sending QR instruction to user {user_id}")
    await bot.send_message(user_id, qr_instruction, reply_markup=keyboard, parse_mode="HTML")

async def handle_withdraw_id_input(message: types.Message, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 4: –í–≤–æ–¥ –∫–æ–¥–∞"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
        if text == translations.get('back_to_menu', 'üîô –ù–∞–∑–∞–¥'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        if not text.isdigit():
            await message.answer(translations['id_digits_only'])
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –∏ –∫–∞–∫ –æ–±—â–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞
        db.save_user_data(user_id, 'withdraw_id', text)
        bookmaker_for_save = db.get_user_data(user_id, 'current_bookmaker')
        if bookmaker_for_save:
            db.save_user_data(user_id, 'id', text, bookmaker_for_save)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞ –≤—ã–≤–æ–¥–∞
        db.save_user_data(user_id, 'current_state', 'waiting_for_withdraw_code')
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–º–µ–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–∫–∏
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞ –≤—ã–≤–æ–¥–∞
        from pathlib import Path
        photo_path = Path(f"images/{bookmaker}-code.jpg")
        if photo_path.exists():
            try:
                photo = FSInputFile(str(photo_path))
                await message.answer_photo(
                    photo=photo,
                    caption=translations['enter_withdraw_code_final'],
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞: {e}")
                await message.answer(translations['enter_withdraw_code_final'], reply_markup=keyboard)
        else:
            await message.answer(translations['enter_withdraw_code_final'], reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –¥–ª—è –≤—ã–≤–æ–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
async def process_qr_photo(message: types.Message, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ QR-—Ñ–æ—Ç–æ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 3: –í–≤–æ–¥ ID"""
    try:
        user_id = message.from_user.id
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        logger.info(f"Processing QR photo for user {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞
        qr_file_id = message.photo[-1].file_id
        db.save_user_data(user_id, 'qr_photo_id', qr_file_id)
        logger.info(f"QR photo saved for user {user_id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É ID
        db.save_user_data(user_id, 'current_state', 'waiting_for_withdraw_id')
        logger.info(f"State set to waiting_for_withdraw_id for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–º–µ–∫–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        saved_id = db.get_user_data(user_id, 'id', bookmaker)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=str(saved_id))] if saved_id else [],
                [KeyboardButton(text=translations.get('back_to_menu', 'üîô –ù–∞–∑–∞–¥'))]
            ],
            resize_keyboard=True
        )
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        text = f"""
{translations['enter_withdraw_id']}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Å –ø—Ä–∏–º–µ—Ä–æ–º ID
        from pathlib import Path
        photo_path = Path(f"images/{bookmaker}-id.jpg")
        if photo_path.exists():
            try:
                photo = FSInputFile(str(photo_path))
                await message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–∞ ID: {e}")
                await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-—Ñ–æ—Ç–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
async def handle_withdraw_code_input(message: types.Message, db, bookmakers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤—ã–≤–æ–¥–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
        if text == translations.get('back_to_menu', 'üîô –ù–∞–∑–∞–¥'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤—ã–≤–æ–¥–∞
        db.save_user_data(user_id, 'withdraw_code', text)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        bank_code = db.get_user_data(user_id, 'selected_bank')
        withdraw_id = db.get_user_data(user_id, 'withdraw_id')
        qr_photo_id = db.get_user_data(user_id, 'qr_photo_id')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —á–µ—Ä–µ–∑ API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—É–∫–º–µ–∫–µ—Ä–∞ –∏–∑ BOOKMAKERS (–∏–∑–±–µ–≥–∞–µ–º –∏–º–ø–æ—Ä—Ç–∞ BOOKMAKER_CONFIGS)
            bookmaker_config = BOOKMAKERS.get(bookmaker, {})
            if not bookmaker_config:
                logger.error(f"No config found for bookmaker: {bookmaker}")
                amount = 0
            else:
                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±—É–∫–º–µ–∫–µ—Ä–∞
                if bookmaker == "1xbet":
                    from api_clients.onexbet_client import OneXBetAPIClient
                    # –í 1XBET –∫–æ–Ω—Ñ–∏–≥ –ª–µ–∂–∏—Ç –≤ —Å–µ–∫—Ü–∏–∏ api_config (–∫–∞–∫ –∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤)
                    api_client = OneXBetAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.payout(withdraw_id, text)
                elif bookmaker == "1win":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç 1WIN, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                    from api_clients.onewin_client import OneWinAPIClient
                    api_client = OneWinAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.withdrawal(int(withdraw_id), text)
                elif bookmaker == "melbet":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º base_url
                    from api_clients.melbet_client import MelbetAPIClient
                    api_client = MelbetAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.payout(withdraw_id, text)
                elif bookmaker == "mostbet":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Mostbet –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ø–æ transactionId+code
                    from api_clients.mostbet_client import MostbetAPI
                    api_client = MostbetAPI(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    try:
                        resp = await api_client.confirm_cashout(int(withdraw_id), text)
                    except Exception as e:
                        logger.error(f"Mostbet confirm_cashout call error: {e}")
                        resp = None
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É
                    if resp and isinstance(resp, dict):
                        if resp.get('success') is True:
                            payout_result = {"success": True, "data": resp.get('data') or {}}
                        else:
                            payout_result = {
                                "success": False,
                                "error": (resp.get('error') or '').strip() or 'Mostbet error',
                                "status_code": resp.get('status_code')
                            }
                    else:
                        payout_result = {"success": False, "error": "Mostbet no response"}
                else:
                    logger.error(f"Unknown bookmaker: {bookmaker}")
                    amount = 0
                    payout_result = None
                
                if payout_result and payout_result.get("success"):
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ API (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏: amount/summa)
                    data_obj = payout_result.get("data", {}) or {}
                    amount = (
                        data_obj.get("amount")
                        or data_obj.get("summa")
                        or data_obj.get("Sum")
                        or 0
                    )
                    try:
                        amount = float(amount)
                    except Exception:
                        amount = float(amount or 0)
                    logger.info(f"API payout successful: {amount} for ID: {withdraw_id}, code: {text}, bookmaker: {bookmaker}")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥
                    raw_msg = ""
                    if payout_result:
                        raw_msg = (
                            payout_result.get("message")
                            or (payout_result.get("data") or {}).get("message")
                            or (payout_result.get("data") or {}).get("Message")
                            or payout_result.get("error")
                            or ""
                        )
                    error_message = (raw_msg or "").lower()
                    # Fallback: –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "100.39" –∏–ª–∏ "100,39")
                    if not (payout_result and payout_result.get("success")):
                        try:
                            import re
                            m = re.search(r"(\d+[\.,]\d{2})", raw_msg or "")
                            if m:
                                amt_str = m.group(1).replace(',', '.')
                                amount = float(amt_str)
                        except Exception:
                            pass
                    status_code = (payout_result or {}).get('status_code')
                    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Ç–µ–∫—Å—Ç "–æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" –¥–∞–∂–µ –µ—Å–ª–∏ success=false ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
                    if any(x in error_message for x in ["—É—Å–ø–µ—à–Ω", "operation completed successfully", "successfully"]):
                        data_obj = (payout_result or {}).get("data", {}) or {}
                        amount = (
                            data_obj.get("amount")
                            or data_obj.get("summa")
                            or data_obj.get("Sum")
                            or 0
                        )
                        try:
                            amount = float(amount)
                        except Exception:
                            amount = float(amount or 0)
                        logger.warning("Provider returned success-like message but success flag is false. Proceeding as success.")
                        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—Å–ø–µ—Ö (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏–∂–µ)
                    elif (
                        "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in error_message or "not found" in error_message or "–Ω–µ—Ç —Ç–∞–∫–æ–π" in error_message
                        or status_code == 404
                    ):
                        # –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω—É—é (–æ—Å—Ç–∞–≤–∏–º pending –Ω–∞ —Å–∞–π—Ç–µ)
                        await message.answer(translations.get('withdrawal_not_found', "‚ùå –¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é."))
                        # –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤–Ω–∏–∑: —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ pending
                    else:
                        logger.error(f"API payout failed: {raw_msg or (payout_result or {}).get('error', 'No response')}")
                        # –ü–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if raw_msg:
                            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {raw_msg}. –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                        else:
                            await message.answer(translations['withdrawal_api_error'])
                        # –Ω–µ –≤—ã—Ö–æ–¥–∏–º ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ pending
            
        except Exception as e:
            logger.error(f"Error calling API for payout: {e}")
            amount = 0  # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É requests (–¥–ª—è —Å–∞–π—Ç–∞)
            import sqlite3
            from pathlib import Path
            # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ –∏ —É Django (settings.BOT_DATABASE_PATH)
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø—É—Ç—å –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ db
            db_path = getattr(db, 'db_path', None)
            if not db_path:
                # Fallback: –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ (bets/universal_bot.db), –∞ –Ω–µ bot/universal_bot.db
                db_path = str(Path(__file__).resolve().parents[2] / 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã requests —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            cur.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    bookmaker TEXT,
                    account_id TEXT,
                    amount REAL NOT NULL DEFAULT 0,
                    request_type TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT 'pending',
                    withdrawal_code TEXT,
                    photo_file_id TEXT,
                    photo_file_url TEXT,
                    bank TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP,
                    processed_at TIMESTAMP
                )
            ''')

            # –ü–æ–ª—É—á–∏–º –ø—Ä—è–º–æ–π URL –∫ —Ñ–∞–π–ª—É –æ—Ç Telegram API (–µ—Å–ª–∏ –µ—Å—Ç—å)
            photo_file_url = None
            if qr_photo_id:
                try:
                    file_info = await message.bot.get_file(qr_photo_id)
                    fpath = getattr(file_info, 'file_path', None)
                    if fpath:
                        photo_file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{fpath}"
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π URL —Ñ–æ—Ç–æ –≤—ã–≤–æ–¥–∞: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ requests
            cur.execute('''
                INSERT INTO requests
                (user_id, username, first_name, bookmaker, account_id, amount, request_type, status,
                 withdrawal_code, photo_file_id, photo_file_url, bank)
                VALUES (?, ?, ?, ?, ?, ?, 'withdraw', 'pending', ?, ?, ?, ?)
            ''', (
                user_id,
                message.from_user.username or '',
                message.from_user.first_name or '',
                bookmaker,
                withdraw_id or '',
                float(amount or 0),
                text,
                qr_photo_id,
                photo_file_url,
                bank_code
            ))
            conn.commit()
            conn.close()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º (Django): –æ—Ç–ø—Ä–∞–≤–∏–º –∏ file_id, –∏ –ø—Ä—è–º–æ–π URL –∫ —Ñ–æ—Ç–æ
            try:
                sync_withdraw_to_django_admin(
                    user_id=user_id,
                    username=message.from_user.username or '',
                    first_name=message.from_user.first_name or '',
                    bookmaker=bookmaker,
                    amount=amount,
                    withdraw_id=withdraw_id,
                    bank_code=bank_code,
                    withdraw_code=text,
                    photo_file_id=qr_photo_id,
                    photo_file_url=photo_file_url,
                    status='pending'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å Django: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
            group_id = bookmakers[bookmaker]['withdraw_group_id']
            logger.info(f"Sending withdraw request to group {group_id} for bookmaker {bookmaker}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
            request_id = random.randint(1000, 9999)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            import handlers.api_handlers as api_handlers
            api_handlers.pending_requests[request_id] = {
                'user_id': user_id,
                'amount': amount,  # –°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ API
                'xbet_id': withdraw_id,
                'bookmaker': bookmaker,
                'type': 'withdraw',
                'bank_code': bank_code,
                'withdraw_code': text
            }
            
            application_text = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or '–±–µ–∑ username'}
üÜî <b>ID:</b> <code>{withdraw_id}</code>
üè¢ <b>–ë—É–∫–º–µ–∫–µ—Ä:</b> {bookmakers[bookmaker]['name']}
üè¶ <b>–ë–∞–Ω–∫:</b> {bank_code.title()}
üí∞ <b>–°—É–º–º–∞:</b> {amount} —Å–æ–º
üîê <b>–ö–æ–¥ –≤—ã–≤–æ–¥–∞:</b> —Å–∫—Ä—ã—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è API)
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> {request_id}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_withdraw_{request_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{request_id}")
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É —Å QR-—Ñ–æ—Ç–æ
            await message.bot.send_photo(
                chat_id=group_id,
                photo=qr_photo_id,
                caption=application_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
                    [KeyboardButton(text=translations['referral'])],
                    [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
                    [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
                ],
                resize_keyboard=True
            )
            
            success_message = translations['withdrawal_request_sent_simple'].format(
                amount=float(amount or 0),
                xbet_id=withdraw_id
            )
            
            await message.answer(success_message, reply_markup=keyboard, parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É
            await send_withdraw_request_to_group(
                bot=message.bot,
                user_id=user_id,
                amount=amount,
                bookmaker=bookmaker,
                bank_code=bank_code,
                withdraw_id=withdraw_id,
                code=text,
                photo_file_id=qr_photo_id
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            db.save_user_data(user_id, 'current_state', '')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –≤—ã–≤–æ–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def sync_withdraw_to_django_admin(*, user_id, username, first_name, bookmaker, amount, withdraw_id, bank_code, withdraw_code, photo_file_id, photo_file_url, status):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ —Å–∞–π—Ç (Django) —Å URL —á–µ–∫–∞."""
    try:
        import requests
        import os
        data = {
            'user_id': user_id,
            'username': username or '',
            'first_name': first_name or '',
            'bookmaker': bookmaker,
            'amount': amount,
            'withdraw_id': withdraw_id,
            'account_id': withdraw_id,
            'bank': bank_code,
            'withdrawal_code': withdraw_code,
            'receipt_photo': photo_file_id or '',
            'receipt_photo_url': photo_file_url or '',
            'status': status,
        }
        base_url = os.getenv('DJANGO_ADMIN_URL', 'http://localhost:8081')
        endpoint = f"{base_url.rstrip('/')}/bot/api/bot/withdraw-request/"
        resp = requests.post(endpoint, json=data, timeout=8)
        if resp.status_code in (200, 201):
            logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Django –∞–¥–º–∏–Ω–∫–æ–π")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –≤ Django: {e}")

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—ã–≤–æ–¥–∞
    @dp.message(lambda message: message.text and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_withdraw_id')
    async def handle_withdraw_id_input_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        await handle_withdraw_id_input(message, db, bookmakers)
    
    
    @dp.message(lambda message: message.text and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_withdraw_code')
    async def handle_withdraw_code_input_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤—ã–≤–æ–¥–∞"""
        await handle_withdraw_code_input(message, db, bookmakers)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    @dp.callback_query(F.data.startswith("withdraw_bank_"))
    async def handle_withdraw_bank_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        bank_code = callback.data.split("_")[-1]
        try:
            await handle_withdraw_bank_selection(
                user_id=user_id,
                bank_code=bank_code,
                db=db,
                bookmakers=bookmakers,
                bot=callback.bot,
                callback_message=callback.message
            )
            await callback.answer("–ë–∞–Ω–∫ –≤—ã–±—Ä–∞–Ω")
        except Exception as e:
            logger.error(f"withdraw bank callback error: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)