#!/usr/bin/env python3
"""
ламљла┬хлалЁламЉла┬╗ла┬хлАлѓлАРђ╣ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░ лАлЃлАлѓла┬хламЉлАлЃлАРђџлалє - лАЛЊлаЛЌлАлѓлаЛЋлАРђ░ла┬хлалЁлалЁлАРђ╣лаРёќ лаЛЌлАлѓлаЛЋлАРђала┬хлАлЃлАлЃ
"""
import logging
import random
from datetime import datetime
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from translations import get_translation
from config import BOOKMAKERS, BOT_TOKEN

logger = logging.getLogger(__name__)

async def send_withdraw_request_to_group(bot, user_id: int, amount: float, bookmaker: str, bank_code: str, withdraw_id: str, code: str, photo_file_id: str = None):
    """лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлАРђџ ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ ла┬░ламЉлаЛўлаЛЉлалЁлАЛЊ"""
    try:
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лаЛЉлалЁлАРђълаЛЋлАлѓлаЛўла┬░лАРђалаЛЉлАлІ лаЛЋ лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗ла┬х
        user_info = await bot.get_chat(user_id)
        username = user_info.username or "лаЛюла┬хлАРђџ username"
        first_name = user_info.first_name or "лаЛюла┬хлАРђџ лаЛЉлаЛўла┬хлалЁлаЛЉ"
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лалЁла┬░лАлЃлАРђџлАлѓлаЛЋлаРёќлаЛћлаЛЉ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░
        bookmaker_config = BOOKMAKERS.get(bookmaker, {})
        group_id = bookmaker_config.get('withdraw_group_id')
        
        if not group_id:
            logger.error(f"лаЛюла┬х лалЁла┬░лаРёќламЉла┬хлалЁ group_id ламЉла┬╗лАлЈ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░ {bookmaker}")
            return False
            
        # лалјлаЛЋла┬иламЉла┬░ла┬хлаЛў лАРђџла┬хлаЛћлАлЃлАРђџ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ
        request_text = f"""
ЛђЛЪРђЮРђЮ <b>лаЛюлаЛЋлалєла┬░лАлЈ ла┬ила┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ</b>

ЛђЛЪРђў┬ц <b>лаЛЪлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі:</b> @{username}
ЛђЛЪРђаРђЮ <b>ID:</b> {user_id}
ЛђЛЪлЈЛъ <b>лаРђўлАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓ:</b> {bookmaker_config.get('name', bookmaker.upper())}
ЛђЛЪРђЎ┬░ <b>лалјлАЛЊлаЛўлаЛўла┬░:</b> {amount:.2f} лАлЃлаЛЋлаЛў
ЛђЛЪлЈ┬д <b>лаРђўла┬░лалЁлаЛћ:</b> {bank_code.upper()}
ЛђЛЪРђаРђЮ <b>ID лАлЃлАРђАла┬хлАРђџла┬░:</b> {withdraw_id}
ЛђЛЪРђЮЛњ <b>лаЛЎлаЛЋламЉ лалєлАРђ╣лалєлаЛЋламЉла┬░:</b> лАлЃлаЛћлАлѓлАРђ╣лАРђџ (лАРђџлаЛЋла┬╗лАлілаЛћлаЛЋ ламЉла┬╗лАлЈ API)

л▓лЈ┬░ <b>лаРђЎлАлѓла┬хлаЛўлАлЈ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        # лАлЙлил┤л░ЛЉл╝ л║л╗л░л▓лИл░ЛѓЛЃЛђЛЃ л┤л╗ЛЈ лЙл▒Лђл░л▒лЙЛѓл║лИ лил░ЛЈл▓л║лИ (лИЛЂл┐Лђл░л▓л╗лхлйЛІ Лѓлхл║ЛЂЛѓЛІ UTF-8)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="РюЁ лЪлЙл┤Лѓл▓лхЛђл┤лИЛѓЛї", callback_data=f"confirm_withdraw_{user_id}_{amount}"),
                InlineKeyboardButton(text="Рюќ№ИЈ лъЛѓл║л╗лЙлйлИЛѓЛї", callback_data=f"reject_withdraw_{user_id}_{amount}")
            ],
            [
                InlineKeyboardButton(text="­ЪћЇ лЪЛђлЙл▓лхЛђлИЛѓЛї API", callback_data=f"check_withdraw_api_{user_id}_{amount}")
            ]
        ])
        
        # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ
        if photo_file_id:
            await bot.send_photo(
                chat_id=group_id,
                photo=photo_file_id,
                caption=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=group_id,
                text=request_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        logger.info(f"л▓ЛџРђд лаРђћла┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєла┬╗ла┬хлалЁла┬░ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ {group_id}")
        return True
        
    except Exception as e:
        logger.error(f"л▓Люлі лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛћлаЛЉ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ: {e}")
        return False

def get_bot_settings():
    """лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлАРђџ лалЁла┬░лАлЃлАРђџлАлѓлаЛЋлаРёќлаЛћлаЛЉ ла┬▒лаЛЋлАРђџла┬░ лаЛЉла┬и Django ла┬░ламЉлаЛўлаЛЉлалЁлаЛћлаЛЉ"""
    try:
        import requests
        response = requests.get('http://localhost:8081/bot/api/bot-settings/', timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлаЛЋла┬╗лАЛЊлАРђАла┬хлалЁлаЛЉлАлЈ лалЁла┬░лАлЃлАРђџлАлѓлаЛЋла┬хлаЛћ ла┬▒лаЛЋлАРђџла┬░: {e}")
    return {
        'pause': False,
        'deposits': {'enabled': True, 'banks': []},
        'withdrawals': {'enabled': True, 'banks': []},
        'channel': {'enabled': False, 'name': '@bingokg_news'}
    }

def get_bank_settings():
    """лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлАРђџ лалЁла┬░лАлЃлАРђџлАлѓлаЛЋлаРёќлаЛћлаЛЉ ла┬▒ла┬░лалЁлаЛћлаЛЋлалє"""
    return {
        'demirbank': {'deposit_enabled': True, 'withdraw_enabled': True},
        'odengi': {'deposit_enabled': True, 'withdraw_enabled': True},
        'bakai': {'deposit_enabled': True, 'withdraw_enabled': True},
        'balance': {'deposit_enabled': True, 'withdraw_enabled': True},
        'megapay': {'deposit_enabled': True, 'withdraw_enabled': True},
        'mbank': {'deposit_enabled': True, 'withdraw_enabled': True},
    }

async def show_main_menu(message: types.Message, language: str):
    """лаЛЪлаЛЋлаЛћла┬░ла┬ила┬░лАРђџлАлі лаЛќла┬╗ла┬░лалєлалЁлаЛЋла┬х лаЛўла┬хлалЁлАлІ"""
    translations = get_translation(language)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
            [KeyboardButton(text=translations['referral'])],
            [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
            [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
        ],
        resize_keyboard=True
    )
    await message.answer(translations['welcome'].format(user_name=message.from_user.first_name or 'лаЛЪлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі', admin_username='@luxon_support'), reply_markup=keyboard)

async def start_withdrawal(message: types.Message, state: FSMContext = None, bookmaker: str = None, language: str = None, db = None, bookmakers = None):
    """лаЛюла┬░лАРђАла┬░ла┬╗лаЛЋ лаЛЌлАлѓлаЛЋлАРђала┬хлАлЃлАлЃла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░ - лалЂла┬░лаЛќ 1: лаРђЎлАРђ╣ла┬▒лаЛЋлАлѓ ла┬▒ла┬░лалЁлаЛћла┬░"""
    if not all([bookmaker, language, db, bookmakers]):
        logger.error("Missing required parameters for start_withdrawal")
        return
        
    user_id = message.from_user.id
    translations = get_translation(language)
    
    logger.info(f"Starting withdrawal process for user {user_id}, bookmaker: {bookmaker}")
    
    # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лалєлАРђ╣ла┬▒лАлѓла┬░лалЁлалЁлАРђ╣лаРёќ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓ лалє ла┬▒ла┬░ла┬ила┬х ламЉла┬░лалЁлалЁлАРђ╣лАРђд
    db.save_user_data(user_id, 'current_bookmaker', bookmaker)
    
    # лаЛЪлаЛЋлаЛћла┬░ла┬илАРђ╣лалєла┬░ла┬хлаЛў лалєлАРђ╣ла┬▒лаЛЋлАлѓ ла┬▒ла┬░лалЁлаЛћла┬░ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░
    await show_bank_selection_for_withdrawal(message, db, bookmakers)

async def show_bank_selection_for_withdrawal(message: types.Message, db, bookmakers):
    """лаЛЪлаЛЋлаЛћла┬░ла┬ила┬░лАРђџлАлі лалєлАРђ╣ла┬▒лаЛЋлАлѓ ла┬▒ла┬░лалЁлаЛћла┬░ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░ - лалЂла┬░лаЛќ 1 (лаЛЋламЉлалЁлаЛЋ лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉла┬х лАлЃ лаЛЉлалЁла┬╗ла┬░лаРёќлалЁ-лаЛћлалЁлаЛЋлаЛЌлаЛћла┬░лаЛўлаЛЉ)"""
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    logger.info(f"Showing bank selection for withdrawal to user {user_id}")
    
    # лалјлаЛЋла┬иламЉла┬░ла┬хлаЛў лаЛЉлалЁла┬╗ла┬░лаРёќлалЁ лаЛћла┬╗ла┬░лалєлаЛЉла┬░лАРђџлАЛЊлАлѓлАЛЊ лАлЃ ла┬▒ла┬░лалЁлаЛћла┬░лаЛўлаЛЉ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░
    kb = InlineKeyboardBuilder()

    # лаЛЪлАлѓлаЛЋлАРђАлаЛЉлАРђџла┬░ла┬хлаЛў лаЛќла┬╗лаЛЋла┬▒ла┬░ла┬╗лАлілалЁлАЛЊлАлІ лалЁла┬░лАлЃлАРђџлАлѓлаЛЋлаРёќлаЛћлАЛЊ лалєлАРђ╣лалєлаЛЋламЉла┬░ лаЛЉ лАлѓла┬░ла┬илАлѓла┬хлАРѓглАРђўлалЁлалЁлАРђ╣ла┬х ла┬▒ла┬░лалЁлаЛћлаЛЉ лаЛЉла┬и bot_settings
    def _read_withdraw_settings():
        try:
            import sqlite3, json
            db_path = getattr(db, 'db_path', '') or ''
            if not db_path:
                from pathlib import Path
                db_path = str(Path(__file__).resolve().parents[1] / 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("SELECT value FROM bot_settings WHERE key='withdrawals_enabled'")
            row_en = cur.fetchone()
            cur.execute("SELECT value FROM bot_settings WHERE key='withdraw_banks'")
            row_banks = cur.fetchone()
            conn.close()
            enabled = True if not row_en else (str(row_en[0]).strip() in ('1','true','True'))
            banks = []
            try:
                banks = json.loads(row_banks[0]) if row_banks and row_banks[0] else []
            except Exception:
                banks = []
            # лњл░л╗лИл┤лйЛІлх лйл░лил▓л░лйлИЛЈ л▒л░лйл║лЙл▓ (UTF-8)
            valid = {'лџлЙл╝л┐л░лйЛїлЙлй','лъ! лћлхлйЛїл│лИ','лЉл░л║л░лИ','Balance.kg','MegaPay','MBank'}
            banks = [b for b in banks if b in valid]
            return enabled, set(banks)
        except Exception:
            return True, set()

    w_enabled, allowed_banks = _read_withdraw_settings()
    if not w_enabled:
        await message.answer("РЏћ лњЛІл▓лЙл┤ЛІ л▓Лђлхл╝лхлйлйлЙ лйлх Лђл░л▒лЙЛѓл░ЛјЛѓ. лЪлЙл┐ЛђлЙл▒ЛЃл╣Лѓлх л┐лЙлилХлх.")
        # лњлЙлил▓Лђл░ЛЅл░лхл╝ л│л╗л░л▓лйлЙлх л╝лхлйЛј
        await show_main_menu(message, language)
        return
    
    # лалјлаЛЌлаЛЉлАлЃлаЛЋлаЛћ ла┬▒ла┬░лалЁлаЛћлаЛЋлалє ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░
    banks = [
        ("лџлЙл╝л┐л░лйЛїлЙлй", "kompanion"),
        ("лъ! лћлхлйЛїл│лИ", "odengi"),
        ("лЉл░л║л░лИ", "bakai"),
        ("Balance.kg", "balance"),
        ("MegaPay", "megapay"),
        ("MBank", "mbank")
    ]

    # ла┬ала┬хлалЁламЉла┬хлАлѓлаЛЉлаЛў: лАлѓла┬░ла┬илАлѓла┬хлАРѓглАРђўлалЁлалЁлАРђ╣ла┬х ла┬▒ла┬░лалЁлаЛћлаЛЉ л▓лѓРђЮ лаЛЋла┬▒лАРђ╣лАРђАлалЁлАРђ╣ла┬х лаЛћлалЁлаЛЋлаЛЌлаЛћлаЛЉ, ла┬ила┬░лаЛЌлАлѓла┬хлАРђ░лАРђўлалЁлалЁлАРђ╣ла┬х л▓лѓРђЮ alert
    for bank_name, bank_code in banks:
        if not allowed_banks or bank_name in allowed_banks:
            kb.button(text=bank_name, callback_data=f"withdraw_bank_{bank_code}")
        else:
            kb.button(text=f"{bank_name} (лйлхл┤лЙЛЂЛѓЛЃл┐лйлЙ)", callback_data=f"withdraw_bank_unavailable_{bank_code}")
    
    kb.button(text="­ЪћЎ лЮл░лил░л┤ л▓ л╝лхлйЛј", callback_data="back_to_menu")
    kb.adjust(2)
    
    bank_selection_text = f"""
{translations['withdraw_instruction']}

{translations['select_bank_for_withdraw']}
    """

    # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лаЛЏлаРђЮлаЛюлаЛЏ лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉла┬х лАлЃ лАРђџла┬хлаЛћлАлЃлАРђџлаЛЋлаЛў лаЛЉ лаЛЉлалЁла┬╗ла┬░лаРёќлалЁ-лаЛћлалЁлаЛЋлаЛЌлаЛћла┬░лаЛўлаЛЉ ла┬▒ла┬░лалЁлаЛћлаЛЋлалє
    await message.answer(bank_selection_text, reply_markup=kb.as_markup(), parse_mode="HTML")
    
    # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лАлЃлаЛЋлАлЃлАРђџлаЛЋлАлЈлалЁлаЛЉла┬х
    db.save_user_data(user_id, 'current_state', 'waiting_for_bank_selection')
    logger.info(f"Bank selection shown, state set to waiting_for_bank_selection for user {user_id}")

    # лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлАРђАлаЛЉлаЛћ ламЉла┬╗лАлЈ лалЁла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлАРђ╣лАРђд ла┬▒ла┬░лалЁлаЛћлаЛЋлалє л▓лѓРђЮ лАлѓла┬хлаЛќлаЛЉлАлЃлАРђџлАлѓлаЛЉлАлѓлАЛЊла┬хлАРђџлАлЃлАлЈ лалє register_handlers

async def handle_withdraw_bank_selection(user_id: int, bank_code: str, db, bookmakers, bot, callback_message=None):
    """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лалєлАРђ╣ла┬▒лаЛЋлАлѓла┬░ ла┬▒ла┬░лалЁлаЛћла┬░ - лаЛЌла┬хлАлѓла┬хлАРђдлаЛЋламЉ лаЛћ лалЂла┬░лаЛќлАЛЊ 2: лаРђћла┬░лаЛЌлАлѓлаЛЋлАлЃ QR-лаЛћлаЛЋламЉла┬░"""
    language = db.get_user_language(user_id)
    translations = get_translation(language)
    
    logger.info(f"Processing bank selection: {bank_code} for user {user_id}")
    
    # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лалєлАРђ╣ла┬▒лАлѓла┬░лалЁлалЁлАРђ╣лаРёќ ла┬▒ла┬░лалЁлаЛћ
    db.save_user_data(user_id, 'selected_bank', bank_code)
    
    # лаЛЪла┬хлАлѓла┬хлАРђдлаЛЋламЉлаЛЉлаЛў лаЛћ ла┬ила┬░лаЛЌлАлѓлаЛЋлАлЃлАЛЊ QR-лаЛћлаЛЋламЉла┬░
    db.save_user_data(user_id, 'current_state', 'waiting_for_qr_photo')
    logger.info(f"State set to waiting_for_qr_photo for user {user_id}")
    
    # лаРђблАлЃла┬╗лаЛЉ ла┬хлАлЃлАРђџлАлі лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉла┬х лАлЃ лаЛћлалЁлаЛЋлаЛЌлаЛћла┬░лаЛўлаЛЉ, лАлѓла┬хламЉла┬░лаЛћлАРђџлаЛЉлАлѓлАЛЊла┬хлаЛў ла┬хлаЛќлаЛЋ, лАЛЊла┬▒лаЛЉлАлѓла┬░лАлЈ лаЛћлалЁлаЛЋлаЛЌлаЛћлаЛЉ
    if callback_message:
        try:
            # лалѕла┬▒лаЛЉлАлѓла┬░ла┬хлаЛў лаЛЉлалЁла┬╗ла┬░лаРёќлалЁ-лаЛћлалЁлаЛЋлаЛЌлаЛћлаЛЉ лаЛЉ ламЉлаЛЋлаЛЌлаЛЉлАлЃлАРђ╣лалєла┬░ла┬хлаЛў лалєлАРђ╣ла┬▒лАлѓла┬░лалЁлалЁлАРђ╣лаРёќ ла┬▒ла┬░лалЁлаЛћ
            await callback_message.edit_text(
                (callback_message.text or "") + f"\n\nл▓ЛџРђд <b>лаРђЎлАРђ╣ла┬▒лАлѓла┬░лалЁ ла┬▒ла┬░лалЁлаЛћ:</b> {bank_code.upper()}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
    
    # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лаЛЉлалЁлАлЃлАРђџлАлѓлАЛЊлаЛћлАРђалаЛЉлАлІ лаЛЌлаЛЋ лаЛЌлаЛЋла┬╗лАЛЊлАРђАла┬хлалЁлаЛЉлАлІ QR-лаЛћлаЛЋламЉла┬░
    qr_instruction = f"""
{translations.get('qr_instruction', ru_tr.get('qr_instruction', 'лъЛѓл┐Лђл░л▓ЛїЛѓлх QR-л║лЙл┤ л┤л╗ЛЈ л┐лхЛђлхл▓лЙл┤л░.'))}

{translations.get('send_qr_wallet', ru_tr.get('send_qr_wallet', 'лъЛѓл┐Лђл░л▓ЛїЛѓлх QR л║лЙл┤ л▓л░Лѕлхл│лЙ л║лЙЛѕлхл╗Лїл║л░:'))}
    """
    
    # лалѕла┬▒лаЛЉлАлѓла┬░ла┬хлаЛў лаЛћла┬╗ла┬░лалєлаЛЉла┬░лАРђџлАЛЊлАлѓлАЛЊ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ лалє лаЛўла┬хлалЁлАлІ")]],
        resize_keyboard=True
    )
    
    logger.info(f"Sending QR instruction to user {user_id}")
    await bot.send_message(user_id, qr_instruction, reply_markup=keyboard, parse_mode="HTML")

async def handle_withdraw_id_input(message: types.Message, db, bookmakers):
    """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лалєлалєлаЛЋламЉла┬░ ID - лаЛЌла┬хлАлѓла┬хлАРђдлаЛЋламЉ лаЛћ лалЂла┬░лаЛќлАЛЊ 4: лаРђЎлалєлаЛЋламЉ лаЛћлаЛЋламЉла┬░"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
            
        # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў, лалЁла┬х лалЁла┬░ла┬Хла┬░ла┬╗ ла┬╗лаЛЉ лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі "лаЛюла┬░ла┬ила┬░ламЉ"
        if text == translations.get('back_to_menu', 'ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
        
        # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў, лАРђАлАРђџлаЛЋ ID лАлЃлаЛЋлАлЃлАРђџлаЛЋлаЛЉлАРђџ лАРђџлаЛЋла┬╗лАлілаЛћлаЛЋ лаЛЉла┬и лАРђалаЛЉлАРђълАлѓ
        if not text.isdigit():
            await message.answer(translations['id_digits_only'])
            return
            
        # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў ID лаЛћла┬░лаЛћ лАРђџла┬хлаЛћлАЛЊлАРђ░лаЛЉлаРёќ лаЛЉ лаЛћла┬░лаЛћ лаЛЋла┬▒лАРђ░лаЛЉлаРёќ лАлЃлаЛЋлАРђдлАлѓла┬░лалЁлАРђўлалЁлалЁлАРђ╣лаРёќ ламЉла┬╗лАлЈ лалєлАРђ╣ла┬▒лАлѓла┬░лалЁлалЁлаЛЋлаЛќлаЛЋ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░
        db.save_user_data(user_id, 'withdraw_id', text)
        bookmaker_for_save = db.get_user_data(user_id, 'current_bookmaker')
        if bookmaker_for_save:
            db.save_user_data(user_id, 'id', text, bookmaker_for_save)
        
        # лаЛЪла┬хлАлѓла┬хлАРђдлаЛЋламЉлаЛЉлаЛў лаЛћ лалєлалєлаЛЋламЉлАЛЊ лаЛћлаЛЋламЉла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░
        db.save_user_data(user_id, 'current_state', 'waiting_for_withdraw_code')
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░ ламЉла┬╗лАлЈ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛћлаЛЉ лАРђълаЛЋлАРђџлаЛћлаЛЉ
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        
        # лалѕла┬▒лаЛЉлАлѓла┬░ла┬хлаЛў лаЛћлалЁлаЛЋлаЛЌлаЛћлаЛЉ лаЛЉ лаЛЋлАлЃлАРђџла┬░лалєла┬╗лАлЈла┬хлаЛў лАРђџлаЛЋла┬╗лАлілаЛћлаЛЋ "лаЛюла┬░ла┬ила┬░ламЉ лалє лаЛўла┬хлалЁлАлІ"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ лалє лаЛўла┬хлалЁлАлІ")]],
            resize_keyboard=True
        )
        
        # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лАРђълаЛЋлАРђџлаЛћлАЛЊ лАлЃ лаЛЌлАлѓлаЛЉлаЛўла┬хлАлѓлаЛЋлаЛў лаЛћлаЛЋламЉла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░
        from pathlib import Path
        photo_path = Path(f"images/{bookmaker}-code.jpg")
        if photo_path.exists():
            try:
                photo = FSInputFile(str(photo_path))
                await message.answer_photo(
                    photo=photo,
                    caption=translations['enter_withdraw_code_final'],
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"лаЛюла┬х лАЛЊламЉла┬░ла┬╗лаЛЋлАлЃлАлі лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛЉлАРђџлАлі лАРђълаЛЋлАРђџлаЛЋ лаЛЌлАлѓлаЛЉлаЛўла┬хлАлѓла┬░ лаЛћлаЛЋламЉла┬░: {e}")
                await message.answer(translations['enter_withdraw_code_final'], reply_markup=keyboard)
        else:
            await message.answer(translations['enter_withdraw_code_final'], reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬х ID ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░: {e}")
        await message.answer("лаЛЪлАлѓлаЛЋлаЛЉла┬илаЛЋлАРѓгла┬╗ла┬░ лаЛЋлАРѓглаЛЉла┬▒лаЛћла┬░")
    
async def process_qr_photo(message: types.Message, db, bookmakers):
    """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ QR-лАРђълаЛЋлАРђџлаЛЋ - лаЛЌла┬хлАлѓла┬хлАРђдлаЛЋламЉ лаЛћ лалЂла┬░лаЛќлАЛЊ 3: лаРђЎлалєлаЛЋламЉ лалЁлаЛЋлаЛўла┬хлАлѓла┬░ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░"""
    try:
        user_id = message.from_user.id
        language = db.get_user_language(user_id)
        translations = get_translation(language)
        
        logger.info(f"Processing QR photo for user {user_id}")
        
        # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лАРђълаЛЋлАРђџлаЛЋ QR-лаЛћлаЛЋламЉла┬░
        qr_file_id = message.photo[-1].file_id
        db.save_user_data(user_id, 'qr_photo_id', qr_file_id)
        logger.info(f"QR photo saved for user {user_id}")
        
        # лаЛЪла┬хлАлѓла┬хлАРђдлаЛЋламЉлаЛЉлаЛў лаЛћ лалєлалєлаЛЋламЉлАЛЊ лалЁлаЛЋлаЛўла┬хлАлѓла┬░ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░
        db.save_user_data(user_id, 'current_state', 'waiting_for_withdraw_phone')
        logger.info(f"State set to waiting_for_withdraw_phone for user {user_id}")
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лАлЃлаЛЋлАРђдлАлѓла┬░лалЁла┬хлалЁлалЁлАРђ╣лаРёќ лалЁлаЛЋлаЛўла┬хлАлѓ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░ (ла┬хлАлЃла┬╗лаЛЉ ла┬хлАлЃлАРђџлАлі)
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        saved_phone = db.get_user_data(user_id, 'phone', bookmaker)
        
        # лалјлаЛЋла┬иламЉла┬░ла┬хлаЛў лаЛћла┬╗ла┬░лалєлаЛЉла┬░лАРђџлАЛЊлАлѓлАЛЊ лАлЃ лАлЃлаЛЋлАРђдлАлѓла┬░лалЁла┬хлалЁлалЁлАРђ╣лаЛў лалЁлаЛЋлаЛўла┬хлАлѓлаЛЋлаЛў
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=str(saved_phone))] if saved_phone else [],
                [KeyboardButton(text=translations.get('back_to_menu', 'ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ'))]
            ],
            resize_keyboard=True
        )
                
        # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉла┬х лАлЃ лаЛЉлалЁлАлЃлАРђџлАлѓлАЛЊлаЛћлАРђалаЛЉла┬хлаРёќ
        text = translations['enter_withdraw_phone']
        
        await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬х QR-лАРђълаЛЋлАРђџлаЛЋ: {e}")
        await message.answer("лаЛЪлАлѓлаЛЋлаЛЉла┬илаЛЋлАРѓгла┬╗ла┬░ лаЛЋлАРѓглаЛЉла┬▒лаЛћла┬░")

async def handle_withdraw_phone_input(message: types.Message, db, bookmakers):
    """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лалєлалєлаЛЋламЉла┬░ лалЁлаЛЋлаЛўла┬хлАлѓла┬░ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░ - лаЛЌла┬хлАлѓла┬хлАРђдлаЛЋламЉ лаЛћ лалЂла┬░лаЛќлАЛЊ 4: лаРђЎлалєлаЛЋламЉ ID"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
            
        # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў, лалЁла┬х лалЁла┬░ла┬Хла┬░ла┬╗ ла┬╗лаЛЉ лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі "лаЛюла┬░ла┬ила┬░ламЉ"
        if text == translations.get('back_to_menu', 'ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
        
        # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў лАРђълаЛЋлАлѓлаЛўла┬░лАРђџ лалЁлаЛЋлаЛўла┬хлАлѓла┬░ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░ (ламЉлаЛЋла┬╗ла┬Хла┬хлалЁ лалЁла┬░лАРђАлаЛЉлалЁла┬░лАРђџлАлілАлЃлАлЈ лАлЃ 996 лаЛЉ лАлЃлаЛЋламЉла┬хлАлѓла┬Хла┬░лАРђџлАлі 12 лАРђалаЛЉлАРђълАлѓ)
        phone_clean = text.strip().replace('+', '').replace(' ', '').replace('-', '')
        if not phone_clean.isdigit() or len(phone_clean) != 12 or not phone_clean.startswith('996'):
            await message.answer("л▓Люлі лаЛюла┬хлалєла┬хлАлѓлалЁлАРђ╣лаРёќ лАРђълаЛЋлАлѓлаЛўла┬░лАРђџ лалЁлаЛЋлаЛўла┬хлАлѓла┬░. лаРђЎлалєла┬хламЉлаЛЉлАРђџла┬х лалЁлаЛЋлаЛўла┬хлАлѓ лалє лАРђълаЛЋлАлѓлаЛўла┬░лАРђџла┬х: 996505000000")
            return
            
        # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лалЁлаЛЋлаЛўла┬хлАлѓ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░
        db.save_user_data(user_id, 'withdraw_phone', phone_clean)
        bookmaker_for_save = db.get_user_data(user_id, 'current_bookmaker')
        if bookmaker_for_save:
            db.save_user_data(user_id, 'phone', phone_clean, bookmaker_for_save)
        
        # лаЛЪла┬хлАлѓла┬хлАРђдлаЛЋламЉлаЛЉлаЛў лаЛћ лалєлалєлаЛЋламЉлАЛЊ ID
        db.save_user_data(user_id, 'current_state', 'waiting_for_withdraw_id')
        logger.info(f"State set to waiting_for_withdraw_id for user {user_id}")
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░ лаЛЉ лАлЃлаЛЋлАРђдлАлѓла┬░лалЁла┬хлалЁлалЁлАРђ╣лаРёќ ID
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        saved_id = db.get_user_data(user_id, 'id', bookmaker)
        
        # лалјлаЛЋла┬иламЉла┬░ла┬хлаЛў лаЛћла┬╗ла┬░лалєлаЛЉла┬░лАРђџлАЛЊлАлѓлАЛЊ лАлЃ лАлЃлаЛЋлАРђдлАлѓла┬░лалЁла┬хлалЁлалЁлАРђ╣лаЛў ID
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=str(saved_id))] if saved_id else [],
                [KeyboardButton(text=translations.get('back_to_menu', 'ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ'))]
            ],
            resize_keyboard=True
        )
                
        # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉла┬х лАлЃ лаЛЉлалЁлАлЃлАРђџлАлѓлАЛЊлаЛћлАРђалаЛЉла┬хлаРёќ
        text = f"""
{translations['enter_withdraw_id']}
        """
        
        # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў лАРђълаЛЋлАРђџлаЛћлАЛЊ лАлЃ лаЛЌлАлѓлаЛЉлаЛўла┬хлАлѓлаЛЋлаЛў ID
        from pathlib import Path
        photo_path = Path(f"images/{bookmaker}-id.jpg")
        if photo_path.exists():
            try:
                photo = FSInputFile(str(photo_path))
                await message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"лаЛюла┬х лАЛЊламЉла┬░ла┬╗лаЛЋлАлЃлАлі лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛЉлАРђџлАлі лАРђълаЛЋлАРђџлаЛЋ лаЛЌлАлѓлаЛЉлаЛўла┬хлАлѓла┬░ ID: {e}")
                await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬х лалЁлаЛЋлаЛўла┬хлАлѓла┬░ лАРђџла┬хла┬╗ла┬хлАРђълаЛЋлалЁла┬░ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░: {e}")
        await message.answer("лаЛЪлАлѓлаЛЋлаЛЉла┬илаЛЋлАРѓгла┬╗ла┬░ лаЛЋлАРѓглаЛЉла┬▒лаЛћла┬░")
    
async def handle_withdraw_code_input(message: types.Message, db, bookmakers):
    """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лалєлалєлаЛЋламЉла┬░ лаЛћлаЛЋламЉла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░ - лАРђълаЛЉлалЁла┬░ла┬╗лАлілалЁлАРђ╣лаРёќ лАРѓгла┬░лаЛќ"""
    try:
        user_id = message.from_user.id
        text = message.text
        language = db.get_user_language(user_id)
        translations = get_translation(language)
            
        # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў, лалЁла┬х лалЁла┬░ла┬Хла┬░ла┬╗ ла┬╗лаЛЉ лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі "лаЛюла┬░ла┬ила┬░ламЉ"
        if text == translations.get('back_to_menu', 'ЛђЛЪРђЮРёб лаЛюла┬░ла┬ила┬░ламЉ'):
            await show_main_menu(message, language)
            db.save_user_data(user_id, 'current_state', '')
            return
            
        # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў лаЛћлаЛЋламЉ лалєлАРђ╣лалєлаЛЋламЉла┬░
        db.save_user_data(user_id, 'withdraw_code', text)
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў ламЉла┬░лалЁлалЁлАРђ╣ла┬х ла┬ила┬░лАлЈлалєлаЛћлаЛЉ
        bookmaker = db.get_user_data(user_id, 'current_bookmaker')
        bank_code = db.get_user_data(user_id, 'selected_bank')
        withdraw_id = db.get_user_data(user_id, 'withdraw_id')
        withdraw_phone = db.get_user_data(user_id, 'withdraw_phone')
        qr_photo_id = db.get_user_data(user_id, 'qr_photo_id')
        
        # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лАлЃлАЛЊлаЛўлаЛўлАЛЊ лАРђАла┬хлАлѓла┬хла┬и API ламЉла┬╗лАлЈ лаЛћлаЛЋлалЁлаЛћлАлѓла┬хлАРђџлалЁлаЛЋлаЛќлаЛЋ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░
        try:
            # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лаЛћлаЛЋлалЁлАРђълаЛЉлаЛќлАЛЊлАлѓла┬░лАРђалаЛЉлАлІ ламЉла┬╗лАлЈ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░ лаЛЉла┬и BOOKMAKERS (лаЛЉла┬ила┬▒ла┬хлаЛќла┬░ла┬хлаЛў лаЛЉлаЛўлаЛЌлаЛЋлАлѓлАРђџла┬░ BOOKMAKER_CONFIGS)
            bookmaker_config = BOOKMAKERS.get(bookmaker, {})
            if not bookmaker_config:
                logger.error(f"No config found for bookmaker: {bookmaker}")
                amount = 0
            else:
                # лаРђЎлАРђ╣ла┬▒лаЛЉлАлѓла┬░ла┬хлаЛў лаЛЌлАлѓла┬░лалєлаЛЉла┬╗лАлілалЁлАРђ╣лаРёќ API лаЛћла┬╗лаЛЉла┬хлалЁлАРђџ ламЉла┬╗лАлЈ ла┬▒лАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓла┬░
                if bookmaker == "1xbet":
                    from api_clients.onexbet_client import OneXBetAPIClient
                    # лаРђЎ 1XBET лаЛћлаЛЋлалЁлАРђълаЛЉлаЛќ ла┬╗ла┬хла┬ХлаЛЉлАРђџ лалє лАлЃла┬хлаЛћлАРђалаЛЉлаЛЉ api_config (лаЛћла┬░лаЛћ лаЛЉ ламЉла┬╗лАлЈ ламЉла┬хлаЛЌлаЛЋла┬илаЛЉлАРђџлаЛЋлалє)
                    api_client = OneXBetAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.payout(withdraw_id, text)
                elif bookmaker == "1win":
                    # ла┬ўлАлЃлаЛЌлаЛЋла┬╗лАліла┬илАЛЊла┬хлаЛў лаЛЋлАРђълаЛЉлАРђалаЛЉла┬░ла┬╗лАлілалЁлАРђ╣лаРёќ лаЛћла┬╗лаЛЉла┬хлалЁлАРђџ 1WIN, лАРђАлАРђџлаЛЋла┬▒лАРђ╣ лаЛЌлаЛЋла┬╗лАЛЊлАРђАла┬░лАРђџлАлі лАлЃлАРђџлАлѓлАЛЊлаЛћлАРђџлАЛЊлАлѓлаЛЉлАлѓлаЛЋлалєла┬░лалЁлалЁлАРђ╣ла┬х лаЛЋлАРѓглаЛЉла┬▒лаЛћлаЛЉ
                    from api_clients.onewin_client import OneWinAPIClient
                    api_client = OneWinAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.withdrawal(int(withdraw_id), text)
                elif bookmaker == "melbet":
                    # ла┬ўлАлЃлаЛЌлаЛЋла┬╗лАліла┬илАЛЊла┬хлаЛў лАлЃлаЛЌла┬хлАРђалаЛЉла┬░ла┬╗лаЛЉла┬илаЛЉлАлѓлаЛЋлалєла┬░лалЁлалЁлАРђ╣лаРёќ лаЛћла┬╗лаЛЉла┬хлалЁлАРђџ лАлЃ лаЛћлаЛЋлАлѓлАлѓла┬хлаЛћлАРђџлалЁлАРђ╣лаЛў base_url
                    from api_clients.melbet_client import MelbetAPIClient
                    api_client = MelbetAPIClient(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    payout_result = api_client.payout(withdraw_id, text)
                elif bookmaker == "mostbet":
                    # ла┬ўлАлЃлаЛЌлаЛЋла┬╗лАліла┬илАЛЊла┬хлаЛў лаЛЋлАРђълаЛЉлАРђалаЛЉла┬░ла┬╗лАлілалЁлАРђ╣лаРёќ лаЛћла┬╗лаЛЉла┬хлалЁлАРђџ Mostbet лаЛЉ лаЛЌлаЛЋламЉлАРђџлалєла┬хлАлѓла┬ХламЉла┬хлалЁлаЛЉла┬х лалєлАРђ╣лалєлаЛЋламЉла┬░ лаЛЌлаЛЋ transactionId+code
                    from api_clients.mostbet_client import MostbetAPI
                    api_client = MostbetAPI(bookmaker_config.get('api_config', {}) or bookmaker_config)
                    try:
                        resp = await api_client.confirm_cashout(int(withdraw_id), text)
                    except Exception as e:
                        logger.error(f"Mostbet confirm_cashout call error: {e}")
                        resp = None
                    # лаЛЪлАлѓлаЛЉлалєлаЛЋламЉлаЛЉлаЛў лаЛћ лАЛЊлалЁлаЛЉлАРђълаЛЉлАРђалаЛЉлАлѓлаЛЋлалєла┬░лалЁлалЁлаЛЋлаЛўлАЛЊ лалєлаЛЉламЉлАЛЊ
                    if resp and isinstance(resp, dict):
                        if resp.get('success') is True:
                            payout_result = {"success": True, "data": resp.get('data') or {}}
                        else:
                            payout_result = {
                                "success": False,
                                "error": (resp.get('error') or '').strip() or 'Mostbet error',
                                "status_code": resp.get('status_code')
                            }
                    else:
                        payout_result = {"success": False, "error": "Mostbet no response"}
                else:
                    logger.error(f"Unknown bookmaker: {bookmaker}")
                    amount = 0
                    payout_result = None
                
                if payout_result and payout_result.get("success"):
                    # лаЛЪлаЛЋла┬╗лАЛЊлАРђАла┬░ла┬хлаЛў лАлЃлАЛЊлаЛўлаЛўлАЛЊ лаЛЉла┬и лаЛЋлАРђџлалєла┬хлАРђџла┬░ API (лАЛЊлАРђАлаЛЉлАРђџлАРђ╣лалєла┬░ла┬хлаЛў лАлѓла┬░ла┬илалЁлАРђ╣ла┬х лаЛћла┬╗лАлІлАРђАлаЛЉ: amount/summa)
                    data_obj = payout_result.get("data", {}) or {}
                    amount = (
                        data_obj.get("amount")
                        or data_obj.get("summa")
                        or data_obj.get("Sum")
                        or 0
                    )
                    try:
                        amount = float(amount)
                    except Exception:
                        amount = float(amount or 0)
                    logger.info(f"API payout successful: {amount} for ID: {withdraw_id}, code: {text}, bookmaker: {bookmaker}")
                else:
                    # лаЛЪлАлѓлаЛЋлалєла┬хлАлѓлАлЈла┬хлаЛў, ла┬хлАлЃлАРђџлАлі ла┬╗лаЛЉ ла┬ила┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ
                    raw_msg = ""
                    if payout_result:
                        raw_msg = (
                            payout_result.get("message")
                            or (payout_result.get("data") or {}).get("message")
                            or (payout_result.get("data") or {}).get("Message")
                            or payout_result.get("error")
                            or ""
                        )
                    error_message = (raw_msg or "").lower()
                    # Fallback: лаЛЌлАлѓлаЛЋла┬▒лАЛЊла┬хлаЛў лалєлАРђ╣лАРђџла┬░лАРђ░лаЛЉлАРђџлАлі лАлЃлАЛЊлаЛўлаЛўлАЛЊ лаЛЉла┬и лАРђџла┬хлаЛћлАлЃлАРђџла┬░ лаЛЋлАРђџлалєла┬хлАРђџла┬░ (лалЁла┬░лаЛЌлАлѓлаЛЉлаЛўла┬хлАлѓ, "100.39" лаЛЉла┬╗лаЛЉ "100,39")
                    if not (payout_result and payout_result.get("success")):
                        try:
                            import re
                            m = re.search(r"(\d+[\.,]\d{2})", raw_msg or "")
                            if m:
                                amt_str = m.group(1).replace(',', '.')
                                amount = float(amt_str)
                        except Exception:
                            pass
                    status_code = (payout_result or {}).get('status_code')
                    # лаЛюла┬хлаЛћлаЛЋлАРђџлаЛЋлАлѓлАРђ╣ла┬х лаЛЌлАлѓлаЛЋлалєла┬░лаРёќламЉла┬хлАлѓлАРђ╣ лаЛЌлАлѓлаЛЉлАлЃлАРђ╣ла┬╗ла┬░лАлІлАРђџ лАРђџла┬хлаЛћлАлЃлАРђџ "лаЛЋлаЛЌла┬хлАлѓла┬░лАРђалаЛЉлАлЈ лалєлАРђ╣лаЛЌлаЛЋла┬╗лалЁла┬хлалЁла┬░ лАЛЊлАлЃлаЛЌла┬хлАРѓглалЁлаЛЋ" ламЉла┬░ла┬Хла┬х ла┬хлАлЃла┬╗лаЛЉ success=false л▓лѓРђЮ лАлЃлАРђАлаЛЉлАРђџла┬░ла┬хлаЛў лАлїлАРђџлаЛЋ лАЛЊлАлЃлаЛЌла┬хлАРђдлаЛЋлаЛў
                    if any(x in error_message for x in ["лАЛЊлАлЃлаЛЌла┬хлАРѓглалЁ", "operation completed successfully", "successfully"]):
                        data_obj = (payout_result or {}).get("data", {}) or {}
                        amount = (
                            data_obj.get("amount")
                            or data_obj.get("summa")
                            or data_obj.get("Sum")
                            or 0
                        )
                        try:
                            amount = float(amount)
                        except Exception:
                            amount = float(amount or 0)
                        logger.warning("Provider returned success-like message but success flag is false. Proceeding as success.")
                        # лаЛюла┬х лалєлаЛЋла┬илалєлАлѓла┬░лАРђ░ла┬░ла┬хлаЛўлАлЃлАлЈ л▓лѓРђЮ лаЛЌлАлѓлаЛЋламЉлаЛЋла┬╗ла┬Хла┬░ла┬хлаЛў лаЛћла┬░лаЛћ лаЛЋла┬▒лАРђ╣лАРђАлалЁлАРђ╣лаРёќ лАЛЊлАлЃлаЛЌла┬хлАРђд (лАлЃлаЛЋлАРђдлАлѓла┬░лалЁла┬хлалЁлаЛЉла┬х ла┬ила┬░лАлЈлалєлаЛћлаЛЉ/лАЛЊлалєла┬хламЉлаЛЋлаЛўла┬╗ла┬хлалЁлаЛЉлАлЈ лалЁлаЛЉла┬Хла┬х)
                    elif (
                        "лалЁла┬х лалЁла┬░лаРёќламЉла┬хлалЁла┬░" in error_message or "not found" in error_message or "лалЁла┬хлАРђџ лАРђџла┬░лаЛћлаЛЋлаРёќ" in error_message
                        or status_code == 404
                    ):
                        # лаРђћла┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лалЁла┬х лалЁла┬░лаРёќламЉла┬хлалЁла┬░ лАЛЊ лаЛЌлАлѓлаЛЋлалєла┬░лаРёќламЉла┬хлАлѓла┬░ л▓лѓРђЮ лаЛЌлАлѓлаЛЋламЉлаЛЋла┬╗ла┬Хла┬░ла┬хлаЛў лаЛћла┬░лаЛћ лАлѓлАЛЊлАРђАлалЁлАЛЊлАлІ (лаЛЋлАлЃлАРђџла┬░лалєлаЛЉлаЛў pending лалЁла┬░ лАлЃла┬░лаРёќлАРђџла┬х)
                        await message.answer(translations.get('withdrawal_not_found', "л▓Люлі лаЛъла┬░лаЛћлаЛЋлаРёќ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лАЛЊ лаЛЌлАлѓлаЛЋлалєла┬░лаРёќламЉла┬хлАлѓла┬░ лалЁла┬х лалЁла┬░лаРёќламЉла┬хлалЁлаЛЋ. лаЛџлАРђ╣ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџла┬░ла┬хлаЛў ла┬хлАРђў лалєлАлѓлАЛЊлАРђАлалЁлАЛЊлАлІ."))
                        # лаЛЌлАлѓлаЛЋламЉлаЛЋла┬╗ла┬ХлаЛЉлаЛў лалєлалЁлаЛЉла┬и: лАлЃлаЛЋлАРђдлАлѓла┬░лалЁлаЛЉлаЛў лаЛћла┬░лаЛћ pending
                    else:
                        logger.error(f"API payout failed: {raw_msg or (payout_result or {}).get('error', 'No response')}")
                        # лаЛЪлаЛЋлаЛћла┬░ла┬Хла┬хлаЛў лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлІ лАРђџла┬хлаЛћлАлЃлАРђџ лаЛЋлАРѓглаЛЉла┬▒лаЛћлаЛЉ лаЛЋлАРђџ лаЛЌлАлѓлаЛЋлалєла┬░лаРёќламЉла┬хлАлѓла┬░, ла┬хлАлЃла┬╗лаЛЉ лаЛЋлалЁ ла┬хлАлЃлАРђџлАлі
                        if raw_msg:
                            await message.answer(f"л▓Люлі лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░: {raw_msg}. лаРђћла┬░лАлЈлалєлаЛћла┬░ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєла┬╗ла┬хлалЁла┬░ лалЁла┬░ лАлѓлАЛЊлАРђАлалЁлАЛЊлАлІ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћлАЛЊ.")
                        else:
                            await message.answer(translations['withdrawal_api_error'])
                        # лалЁла┬х лалєлАРђ╣лАРђдлаЛЋламЉлаЛЉлаЛў л▓лѓРђЮ лАлЃлаЛЋлАРђдлАлѓла┬░лалЁлаЛЉлаЛў лаЛћла┬░лаЛћ pending
            
        except Exception as e:
            logger.error(f"Error calling API for payout: {e}")
            amount = 0  # лаРђблАлЃла┬╗лаЛЉ API лалЁла┬х лАлѓла┬░ла┬▒лаЛЋлАРђџла┬░ла┬хлАРђџ, лаЛЉлАлЃлаЛЌлаЛЋла┬╗лАліла┬илАЛЊла┬хлаЛў 0
        
        try:
            # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє ла┬хламЉлаЛЉлалЁлАЛЊлАлІ лАРђџла┬░ла┬▒ла┬╗лаЛЉлАРђалАЛЊ requests (ламЉла┬╗лАлЈ лАлЃла┬░лаРёќлАРђџла┬░)
            import sqlite3
            from pathlib import Path
            # лаРђЎлаЛњлаРђЊлаЛюлаЛЏ: лаЛЉлАлЃлаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџлАлі лАРђџлаЛЋлАРђџ ла┬Хла┬х лаЛЌлАЛЊлАРђџлАлі, лАРђАлАРђџлаЛЋ лаЛЉ лАЛЊ Django (settings.BOT_DATABASE_PATH)
            # лалјлалЁла┬░лАРђАла┬░ла┬╗ла┬░ лаЛЌлАлѓлаЛЋла┬▒лАЛЊла┬хлаЛў лалєла┬илАлЈлАРђџлАлі лаЛЌлАЛЊлАРђџлАлі лаЛЉла┬и лаЛЌла┬хлАлѓла┬хламЉла┬░лалЁлалЁлаЛЋлаЛќлаЛЋ лаЛЋла┬▒лАлЅла┬хлаЛћлАРђџла┬░ db
            db_path = getattr(db, 'db_path', None)
            if not db_path:
                # Fallback: лаЛћлаЛЋлАлѓла┬хлалЁлАлі лАлѓла┬хлаЛЌлаЛЋ (bets/universal_bot.db), ла┬░ лалЁла┬х bot/universal_bot.db
                db_path = str(Path(__file__).resolve().parents[2] / 'universal_bot.db')
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            # лаРђюла┬░лАлѓла┬░лалЁлАРђџлаЛЉлАлѓлАЛЊла┬хлаЛў лалЁла┬░ла┬╗лаЛЉлАРђАлаЛЉла┬х лАРђџла┬░ла┬▒ла┬╗лаЛЉлАРђалАРђ╣ requests лАлЃ лалЁлАЛЊла┬ХлалЁлАРђ╣лаЛўлаЛЉ лаЛћлаЛЋла┬╗лаЛЋлалЁлаЛћла┬░лаЛўлаЛЉ
            cur.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    bookmaker TEXT,
                    account_id TEXT,
                    amount REAL NOT NULL DEFAULT 0,
                    request_type TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT 'pending',
                    withdrawal_code TEXT,
                    photo_file_id TEXT,
                    photo_file_url TEXT,
                    bank TEXT,
                    phone TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP,
                    processed_at TIMESTAMP
                )
            ''')
            
            # лаРђЮлаЛЋла┬▒ла┬░лалєла┬╗лАлЈла┬хлаЛў лаЛћлаЛЋла┬╗лаЛЋлалЁлаЛћлАЛЊ phone ла┬хлАлЃла┬╗лаЛЉ ла┬хлАРђў лалЁла┬хлАРђџ
            try:
                cur.execute("ALTER TABLE requests ADD COLUMN phone TEXT")
            except Exception:
                pass  # лаЛЎлаЛЋла┬╗лаЛЋлалЁлаЛћла┬░ лАЛЊла┬Хла┬х лАлЃлАЛЊлАРђ░ла┬хлАлЃлАРђџлалєлАЛЊла┬хлАРђџ

            # лаЛЪлаЛЋла┬╗лАЛЊлАРђАлаЛЉлаЛў лаЛЌлАлѓлАлЈлаЛўлаЛЋлаРёќ URL лаЛћ лАРђъла┬░лаРёќла┬╗лАЛЊ лаЛЋлАРђџ Telegram API (ла┬хлАлЃла┬╗лаЛЉ ла┬хлАлЃлАРђџлАлі)
            photo_file_url = None
            if qr_photo_id:
                try:
                    file_info = await message.bot.get_file(qr_photo_id)
                    fpath = getattr(file_info, 'file_path', None)
                    if fpath:
                        photo_file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{fpath}"
                except Exception as e:
                    logger.warning(f"лаЛюла┬х лАЛЊламЉла┬░ла┬╗лаЛЋлАлЃлАлі лаЛЌлаЛЋла┬╗лАЛЊлАРђАлаЛЉлАРђџлАлі лаЛЌлАлѓлАлЈлаЛўлаЛЋлаРёќ URL лАРђълаЛЋлАРђџлаЛЋ лалєлАРђ╣лалєлаЛЋламЉла┬░: {e}")

            # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє requests
            cur.execute('''
                INSERT INTO requests
                (user_id, username, first_name, bookmaker, account_id, amount, request_type, status,
                 withdrawal_code, photo_file_id, photo_file_url, bank, phone)
                VALUES (?, ?, ?, ?, ?, ?, 'withdraw', 'pending', ?, ?, ?, ?, ?)
            ''', (
                user_id,
                message.from_user.username or '',
                message.from_user.first_name or '',
                bookmaker,
                withdraw_id or '',
                float(amount or 0),
                text,
                qr_photo_id,
                photo_file_url,
                bank_code,
                withdraw_phone or ''
            ))
            conn.commit()
            conn.close()

            # лалјлаЛЉлалЁлАРђдлАлѓлаЛЋлалЁлаЛЉла┬ила┬░лАРђалаЛЉлАлЈ лАлЃ лАлЃла┬░лаРёќлАРђџлаЛЋлаЛў (Django): лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛЉлаЛў лаЛЉ file_id, лаЛЉ лаЛЌлАлѓлАлЈлаЛўлаЛЋлаРёќ URL лаЛћ лАРђълаЛЋлАРђџлаЛЋ
            try:
                sync_withdraw_to_django_admin(
                    user_id=user_id,
                    username=message.from_user.username or '',
                    first_name=message.from_user.first_name or '',
                    bookmaker=bookmaker,
                    amount=amount,
                    withdraw_id=withdraw_id,
                    bank_code=bank_code,
                    withdraw_code=text,
                    withdraw_phone=withdraw_phone,
                    photo_file_id=qr_photo_id,
                    photo_file_url=photo_file_url,
                    status='pending'
                )
            except Exception as e:
                logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лАлЃлаЛЉлалЁлАРђдлАлѓлаЛЋлалЁлаЛЉла┬ила┬░лАРђалаЛЉлаЛЉ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лАлЃ Django: {e}")

            # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ
            group_id = bookmakers[bookmaker]['withdraw_group_id']
            logger.info(f"Sending withdraw request to group {group_id} for bookmaker {bookmaker}")
            
            # лаРђюла┬хлалЁла┬хлАлѓлаЛЉлАлѓлАЛЊла┬хлаЛў лАЛЊлалЁлаЛЉлаЛћла┬░ла┬╗лАлілалЁлАРђ╣лаРёќ ID ла┬ила┬░лАлЈлалєлаЛћлаЛЉ
            request_id = random.randint(1000, 9999)
            
            # лалјлаЛЋлАРђдлАлѓла┬░лалЁлАлЈла┬хлаЛў ламЉла┬░лалЁлалЁлАРђ╣ла┬х ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалє лАлЃла┬╗лаЛЋлалєла┬░лАлѓлАлі ламЉла┬╗лАлЈ API лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлАРђАлаЛЉлаЛћлаЛЋлалє
            import handlers.api_handlers as api_handlers
            api_handlers.pending_requests[request_id] = {
                'user_id': user_id,
                'amount': amount,  # лалјлАЛЊлаЛўлаЛўла┬░ лаЛЌлаЛЋла┬╗лАЛЊлАРђАла┬хлалЁлалЁла┬░лАлЈ лАРђАла┬хлАлѓла┬хла┬и API
                'xbet_id': withdraw_id,
                'bookmaker': bookmaker,
                'type': 'withdraw',
                'bank_code': bank_code,
                'withdraw_code': text
            }
            
            application_text = f"""
ЛђЛЪРђЮРђЮ <b>лаЛюлаЛЋлалєла┬░лАлЈ ла┬ила┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ</b>

ЛђЛЪРђў┬ц <b>лаЛЪлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлі:</b> @{message.from_user.username or 'ла┬▒ла┬хла┬и username'}
ЛђЛЪРђаРђЮ <b>ID:</b> <code>{withdraw_id}</code>
ЛђЛЪРђю┬▒ <b>лаЛъла┬хла┬╗ла┬хлАРђълаЛЋлалЁ:</b> +{withdraw_phone or 'лалЁла┬х лАЛЊлаЛћла┬░ла┬ила┬░лалЁ'}
ЛђЛЪлЈЛъ <b>лаРђўлАЛЊлаЛћлаЛўла┬хлаЛћла┬хлАлѓ:</b> {bookmakers[bookmaker]['name']}
ЛђЛЪлЈ┬д <b>лаРђўла┬░лалЁлаЛћ:</b> {bank_code.title()}
ЛђЛЪРђЎ┬░ <b>лалјлАЛЊлаЛўлаЛўла┬░:</b> {amount} лАлЃлаЛЋлаЛў
ЛђЛЪРђЮЛњ <b>лаЛЎлаЛЋламЉ лалєлАРђ╣лалєлаЛЋламЉла┬░:</b> лАлЃлаЛћлАлѓлАРђ╣лАРђџ (лАРђџлаЛЋла┬╗лАлілаЛћлаЛЋ ламЉла┬╗лАлЈ API)
ЛђЛЪРђаРђЮ <b>ID ла┬ила┬░лАлЈлалєлаЛћлаЛЉ:</b> {request_id}
"""
            
            # лалјлаЛЋла┬иламЉла┬░ла┬хлаЛў лаЛћла┬╗ла┬░лалєлаЛЉла┬░лАРђџлАЛЊлАлѓлАЛЊ лАлЃ лаЛћлалЁлаЛЋлаЛЌлаЛћла┬░лаЛўлаЛЉ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="л▓ЛџРђд лаЛЪлаЛЋламЉлАРђџлалєла┬хлАлѓламЉлаЛЉлАРђџлАлі", callback_data=f"approve_withdraw_{request_id}"),
                    InlineKeyboardButton(text="л▓Люлі лаЛЏлАРђџлаЛћла┬╗лаЛЋлалЁлаЛЉлАРђџлАлі", callback_data=f"reject_withdraw_{request_id}")
                ]
            ])
            
            # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ лАлЃ QR-лАРђълаЛЋлАРђџлаЛЋ
            await message.bot.send_photo(
                chat_id=group_id,
                photo=qr_photo_id,
                caption=application_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # лалѕлалєла┬хламЉлаЛЋлаЛўла┬╗лАлЈла┬хлаЛў лаЛЌлаЛЋла┬╗лАліла┬илаЛЋлалєла┬░лАРђџла┬хла┬╗лАлЈ
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=translations['deposit']), KeyboardButton(text=translations['withdraw'])],
                    [KeyboardButton(text=translations['referral'])],
                    [KeyboardButton(text=translations['support']), KeyboardButton(text=translations['history'])],
                    [KeyboardButton(text=translations['faq']), KeyboardButton(text=translations['language'])]
                ],
                resize_keyboard=True
            )
            
            success_message = translations['withdrawal_request_sent_simple'].format(
                amount=float(amount or 0),
                xbet_id=withdraw_id
            )
            
            await message.answer(success_message, reply_markup=keyboard, parse_mode="HTML")
            
            # лаЛЏлАРђџлаЛЌлАлѓла┬░лалєла┬╗лАлЈла┬хлаЛў ла┬ила┬░лАлЈлалєлаЛћлАЛЊ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ ла┬░ламЉлаЛўлаЛЉлалЁлАЛЊ
            await send_withdraw_request_to_group(
                bot=message.bot,
                user_id=user_id,
                amount=amount,
                bookmaker=bookmaker,
                bank_code=bank_code,
                withdraw_id=withdraw_id,
                code=text,
                photo_file_id=qr_photo_id
            )
            
            # лаЛЏлАРђАлаЛЉлАРђ░ла┬░ла┬хлаЛў лАлЃлаЛЋлАлЃлАРђџлаЛЋлАлЈлалЁлаЛЉла┬х
            db.save_user_data(user_id, 'current_state', '')
            
        except Exception as e:
            logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛћлаЛЉ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лалє лаЛќлАлѓлАЛЊлаЛЌлаЛЌлАЛЊ: {e}")
            await message.answer("л▓Люлі лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛћла┬х ла┬ила┬░лАлЈлалєлаЛћлаЛЉ. лаЛЪлаЛЋлаЛЌлАлѓлаЛЋла┬▒лАЛЊлаРёќлАРђџла┬х лаЛЌлаЛЋла┬ила┬Хла┬х.")
            
    except Exception as e:
        logger.error(f"лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬х лаЛћлаЛЋламЉла┬░ лалєлАРђ╣лалєлаЛЋламЉла┬░: {e}")
        await message.answer("лаЛЪлАлѓлаЛЋлаЛЉла┬илаЛЋлАРѓгла┬╗ла┬░ лаЛЋлАРѓглаЛЉла┬▒лаЛћла┬░")

def sync_withdraw_to_django_admin(*, user_id, username, first_name, bookmaker, amount, withdraw_id, bank_code, withdraw_code, withdraw_phone, photo_file_id, photo_file_url, status):
    """лаЛЏлАРђџлаЛЌлАлѓла┬░лалєлаЛћла┬░ ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лалЁла┬░ лАлЃла┬░лаРёќлАРђџ (Django) лАлЃ URL лАРђАла┬хлаЛћла┬░."""
    try:
        import requests
        import os
        data = {
            'user_id': user_id,
            'username': username or '',
            'first_name': first_name or '',
            'bookmaker': bookmaker,
            'amount': amount,
            'withdraw_id': withdraw_id,
            'account_id': withdraw_id,
            'bank': bank_code,
            'withdrawal_code': withdraw_code,
            'phone': withdraw_phone or '',
            'receipt_photo': photo_file_id or '',
            'receipt_photo_url': photo_file_url or '',
            'status': status,
        }
        base_url = os.getenv('DJANGO_ADMIN_URL', 'http://localhost:8081')
        endpoint = f"{base_url.rstrip('/')}/bot/api/bot/withdraw-request/"
        resp = requests.post(endpoint, json=data, timeout=8)
        if resp.status_code in (200, 201):
            logger.info("л▓ЛџРђд лаРђћла┬░лАлЈлалєлаЛћла┬░ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лАлЃлаЛЉлалЁлАРђдлАлѓлаЛЋлалЁлаЛЉла┬илаЛЉлАлѓлаЛЋлалєла┬░лалЁла┬░ лАлЃ Django ла┬░ламЉлаЛўлаЛЉлалЁлаЛћлаЛЋлаРёќ")
        else:
            logger.error(f"л▓Люлі лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лАлЃлаЛЉлалЁлАРђдлАлѓлаЛЋлалЁлаЛЉла┬ила┬░лАРђалаЛЉлаЛЉ лалєлАРђ╣лалєлаЛЋламЉла┬░: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.error(f"л▓Люлі лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЌлАлѓлаЛЉ лаЛЋлАРђџлаЛЌлАлѓла┬░лалєлаЛћла┬х ла┬ила┬░лАлЈлалєлаЛћлаЛЉ лалЁла┬░ лалєлАРђ╣лалєлаЛЋламЉ лалє Django: {e}")

def register_handlers(dp: Dispatcher, db, bookmakers, api_manager=None):
    """ла┬ала┬хлаЛќлаЛЉлАлЃлАРђџлАлѓла┬░лАРђалаЛЉлАлЈ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлАРђАлаЛЉлаЛћлаЛЋлалє"""
    
    # лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлАРђАлаЛЉлаЛћлаЛЉ лАРђџла┬хлаЛћлАлЃлАРђџлаЛЋлалєлАРђ╣лАРђд лАлЃлаЛЋлаЛЋла┬▒лАРђ░ла┬хлалЁлаЛЉлаРёќ ламЉла┬╗лАлЈ лАлЃлаЛЋлАлЃлАРђџлаЛЋлАлЈлалЁлаЛЉлаРёќ лалєлАРђ╣лалєлаЛЋламЉла┬░
    @dp.message(lambda message: message.photo and db.get_user_data(message.from_user.id, 'current_state') == 'waiting_for_receipt')
    async def handle_receipt_photo_handler(message: types.Message):
        """лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лАРђълаЛЋлАРђџлаЛЋ лАРђАла┬хлаЛћла┬░ ламЉла┬╗лАлЈ лаЛЌлаЛЋлаЛЌлаЛЋла┬╗лалЁла┬хлалЁлаЛЉлАлЈ"""
        await process_receipt_photo(message, db, bookmakers)

    # лаРђюла┬╗лаЛЋла┬▒ла┬░ла┬╗лАлілалЁлАРђ╣лаРёќ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлАРђАлаЛЉлаЛћ: лалЁла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлАРђ╣ла┬х ла┬▒ла┬░лалЁлаЛћлаЛЉ лалєлАРђ╣лалєлаЛЋламЉла┬░
    @dp.callback_query(F.data.startswith('withdraw_bank_unavailable_'))
    async def handle_unavailable(cb: types.CallbackQuery):
        try:
            await cb.answer("лаЛюла┬░ ламЉла┬░лалЁлалЁлАРђ╣лаРёќ лаЛўлаЛЋлаЛўла┬хлалЁлАРђџ лалєлАРђ╣лалєлаЛЋламЉ лалЁла┬░ лАлїлАРђџлаЛЋлАРђџ ла┬▒ла┬░лалЁлаЛћ лалЁла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌла┬хлалЁ", show_alert=True)
        except Exception:
            try:
                await cb.answer("лаЛюла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлаЛЋ", show_alert=True)
            except Exception:
                pass

    # лаЛЏла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћла┬░ лалЁла┬░ла┬Хла┬░лАРђџлаЛЉлАлЈ лалЁла┬░ лаЛЉлалЁла┬╗ла┬░лаРёќлалЁ-лаЛћлалЁлаЛЋлаЛЌлаЛћлАЛЊ лалєлАРђ╣ла┬▒лаЛЋлАлѓла┬░ ла┬▒ла┬░лалЁлаЛћла┬░ ламЉла┬╗лАлЈ лалєлАРђ╣лалєлаЛЋламЉла┬░ (ламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлАРђ╣ла┬х)
    @dp.callback_query(F.data.startswith("withdraw_bank_"))
    async def handle_withdraw_bank_callback(callback: types.CallbackQuery):
        data = callback.data or ''
        # лаРђблАлЃла┬╗лаЛЉ лАлїлАРђџлаЛЋ лалЁла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлАРђ╣лаРёќ ла┬▒ла┬░лалЁлаЛћ л▓лѓРђЮ лаЛЌлАлѓлаЛЋлАлЃлАРђџлаЛЋ ла┬░ла┬╗ла┬хлАлѓлАРђџ (лаЛЌла┬хлАлѓла┬хлАРђдлалєла┬░лАРђџлАРђ╣лалєла┬░ла┬хлАРђџлАлЃлАлЈ лалєлАРђ╣лАРѓгла┬х), лалєлАРђ╣лАРђдлаЛЋламЉлаЛЉлаЛў
        if data.startswith('withdraw_bank_unavailable_'):
            try:
                await callback.answer("лаЛюла┬хламЉлаЛЋлАлЃлАРђџлАЛЊлаЛЌлалЁлаЛЋ", show_alert=True)
            except Exception:
                pass
            return
        # ла┬цлаЛЋлАлѓлаЛўла┬░лАРђџ: withdraw_bank_<code>
        try:
            bank_code = data.split('_', 2)[-1]
        except Exception:
            bank_code = data.replace('withdraw_bank_', '')
        try:
            await handle_withdraw_bank_selection(
                user_id=callback.from_user.id,
                bank_code=bank_code,
                db=db,
                bookmakers=bookmakers,
                bot=callback.bot,
                callback_message=callback.message
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"withdraw bank callback error: {e}")
            try:
                await callback.answer("лаЛЏлАРѓглаЛЉла┬▒лаЛћла┬░ лаЛЋла┬▒лАлѓла┬░ла┬▒лаЛЋлАРђџлаЛћлаЛЉ", show_alert=True)
            except Exception:
                pass
