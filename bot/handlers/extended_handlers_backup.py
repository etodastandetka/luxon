#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤
"""
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from utils.translations import get_translation
from utils.bot_texts import get_bot_text

logger = logging.getLogger(__name__)

class ExtendedStates(StatesGroup):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    waiting_for_amount = State()
    waiting_for_withdraw_amount = State()
    waiting_for_bank = State()
    waiting_for_phone = State()
    waiting_for_name = State()
    waiting_for_id = State()
    waiting_for_qr_amount = State()
    waiting_for_receipt = State()
    waiting_for_withdraw_phone = State()
    waiting_for_withdraw_name = State()
    waiting_for_withdraw_code = State()
    waiting_for_withdraw_qr = State()
    waiting_for_withdraw_bank = State()
    waiting_for_withdraw_phone_new = State()
    waiting_for_withdraw_qr_photo = State()
    waiting_for_withdraw_id_photo = State()

def get_user_language(user_id: int, user_languages: Dict[int, str], db_manager) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_languages:
        return user_languages[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    user_data = db_manager.get_user(user_id)
    if user_data and user_data.get('language'):
        language = user_data['language']
        user_languages[user_id] = language
        return language
    
    return 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

def get_text_for_user(user_id: int, key: str, bot_name: str, user_languages: Dict[int, str], db_manager, **kwargs) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ"""
    language = get_user_language(user_id, user_languages, db_manager)
    return get_bot_text(bot_name, key, language, **kwargs)

def create_language_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="switch_lang_ru")],
            [InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞", callback_data="switch_lang_ky")],
            [InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="switch_lang_uz")]
        ]
    )
    return keyboard

def create_main_reply_keyboard(bot_name: str, user_id: int, user_languages: Dict[int, str], db_manager) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    texts = {
        'deposit': get_text_for_user(user_id, 'deposit', bot_name, user_languages, db_manager),
        'withdraw': get_text_for_user(user_id, 'withdraw', bot_name, user_languages, db_manager),
        'support': get_text_for_user(user_id, 'support', bot_name, user_languages, db_manager),
        'history': get_translation(get_user_language(user_id, user_languages, db_manager), 'history'),
        'faq': get_translation(get_user_language(user_id, user_languages, db_manager), 'faq'),
        'language': get_translation(get_user_language(user_id, user_languages, db_manager), 'language')
    }
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=texts['deposit']), KeyboardButton(text=texts['withdraw'])],
            [KeyboardButton(text=texts['support']), KeyboardButton(text=texts['history'])],
            [KeyboardButton(text=texts['faq']), KeyboardButton(text=texts['language'])]
        ],
        resize_keyboard=True
    )
    return keyboard

async def handle_start_command_extended(message: types.Message, state: FSMContext, bot_name: str, 
                                       user_languages: Dict[int, str], db_manager, last_bot_message_id: Dict[int, int]):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    if user_id in last_bot_message_id:
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å bot –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # await bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id[user_id])
            del last_bot_message_id[user_id]
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±–∏—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫ —Ä–∞–Ω–µ–µ
    user_data = db_manager.get_user(user_id)
    has_selected_language = user_data and user_data.get('language_selected', False)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª —è–∑—ã–∫ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    if not has_selected_language:
        keyboard = create_language_keyboard()
        
        welcome_text = (
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n\n"
            "üåê –ö–æ—à –∫–µ–ª–∏“£–∏–∑! –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:\n\n"
            "üåê Xush kelibsiz! Tilni tanlang:"
        )
        
        await message.answer(welcome_text, reply_markup=keyboard)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª —è–∑—ã–∫ —Ä–∞–Ω–µ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = get_text_for_user(user_id, 'welcome', bot_name, user_languages, db_manager, user_name=user_name)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await message.answer(welcome_text, reply_markup=keyboard)

async def handle_language_switch(callback: types.CallbackQuery, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    language = callback.data.split('_')[-1]  # switch_lang_ru -> ru
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫ –≤ –ë–î
    db_manager.add_user(user_id, callback.from_user.username, callback.from_user.first_name, callback.from_user.last_name)
    db_manager.update_user_language(user_id, language)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –∫—ç—à–µ
    user_languages[user_id] = language
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    user_name = callback.from_user.first_name or callback.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_text = get_text_for_user(user_id, 'welcome', bot_name, user_languages, db_manager, user_name=user_name)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()

async def handle_deposit_message(message: types.Message, state: FSMContext, bot_name: str, 
                                user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    text = get_text_for_user(user_id, 'enter_amount', bot_name, user_languages, db_manager)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=get_translation(get_user_language(user_id, user_languages, db_manager), 'cancel_button'))]],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(ExtendedStates.waiting_for_amount)

async def handle_withdraw_message(message: types.Message, state: FSMContext, bot_name: str, 
                                 user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ"""
    user_id = message.from_user.id
    
    text = get_text_for_user(user_id, 'enter_withdraw_amount', bot_name, user_languages, db_manager)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=get_translation(get_user_language(user_id, user_languages, db_manager), 'cancel_button'))]],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(ExtendedStates.waiting_for_withdraw_amount)

async def handle_amount_input(message: types.Message, state: FSMContext, bot_name: str, 
                             user_languages: Dict[int, str], db_manager, banks: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("Amount must be positive")
    except ValueError:
        error_text = get_text_for_user(user_id, 'invalid_amount', bot_name, user_languages, db_manager)
        await message.answer(error_text)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞
    text = get_text_for_user(user_id, 'select_bank', bot_name, user_languages, db_manager)
    keyboard = create_bank_keyboard(banks, bot_name, user_id, user_languages, db_manager)
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(ExtendedStates.waiting_for_bank)

def create_bank_keyboard(banks: Dict[str, str], bot_name: str, user_id: int, 
                        user_languages: Dict[int, str], db_manager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–Ω–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    for bank_code, bank_name in banks.items():
        builder.add(InlineKeyboardButton(
            text=bank_name,
            callback_data=f'bank_{bot_name}_{bank_code}'
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_text = get_translation(get_user_language(user_id, user_languages, db_manager), 'cancel_button')
    builder.add(InlineKeyboardButton(
        text=cancel_text,
        callback_data=f'cancel_{bot_name}'
    ))
    
    builder.adjust(2)
    return builder.as_markup()

async def handle_bank_selection(callback: types.CallbackQuery, state: FSMContext, bot_name: str, 
                               user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    user_id = callback.from_user.id
    bank_code = callback.data.split('_')[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get('amount', 0)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
    
    success_text = get_text_for_user(user_id, 'request_sent', bot_name, user_languages, db_manager)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await callback.message.edit_text(success_text, reply_markup=keyboard)
    await state.clear()
    await callback.answer()

async def handle_support_message(message: types.Message, bot_name: str, 
                                user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    user_id = message.from_user.id
    
    admin_contact = get_text_for_user(user_id, 'admin_contact', bot_name, user_languages, db_manager)
    text = get_text_for_user(user_id, 'support_text', bot_name, user_languages, db_manager, admin_contact=admin_contact)
    
    await message.answer(text)

async def handle_cancel_message(message: types.Message, state: FSMContext, bot_name: str, 
                               user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = message.from_user.id
    
    await state.clear()
    
    welcome_text = get_text_for_user(user_id, 'welcome', bot_name, user_languages, db_manager)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await message.answer(welcome_text, reply_markup=keyboard)

# FAQ —Ñ—É–Ω–∫—Ü–∏–∏
async def handle_faq_command(message: types.Message, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã FAQ"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db_manager.add_user(
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = get_user_language(user_id, user_languages, db_manager)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    faq_text = get_translation(language, 'faq_title')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, 'faq_deposit_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_withdraw_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_technical_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_limits_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_time_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_back_to_main'))]
        ],
        resize_keyboard=True
    )
    
    await message.answer(faq_text, reply_markup=keyboard, parse_mode="HTML")

async def handle_faq_deposit(message: types.Message, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    text = (
        f"{get_translation(language, 'faq_deposit_title')}\n\n"
        f"{get_translation(language, 'faq_deposit_steps')}\n\n"
        f"{get_translation(language, 'faq_deposit_id_how')}\n\n"
        f"{get_translation(language, 'faq_deposit_time')}"
    )
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, 'faq_deposit_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_withdraw_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_important_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_technical_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_limits_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_time_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_back_to_main'))]
        ],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def handle_faq_withdraw(message: types.Message, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    text = (
        f"{get_translation(language, 'faq_withdraw_title')}\n\n"
        f"{get_translation(language, 'faq_withdraw_steps')}\n\n"
        f"{get_translation(language, 'faq_withdraw_code_how')}\n\n"
        f"{get_translation(language, 'faq_withdraw_time')}"
    )
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, 'faq_deposit_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_withdraw_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_important_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_technical_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_limits_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_time_button'))],
            [KeyboardButton(text=get_translation(language, 'faq_back_to_main'))]
        ],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –ò—Å—Ç–æ—Ä–∏—è —Ñ—É–Ω–∫—Ü–∏–π
async def handle_history_command(message: types.Message, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db_manager.add_user(
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    await show_user_history(message, 0, bot_name, user_languages, db_manager)

async def show_user_history(message: types.Message, page: int, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transactions = db_manager.get_user_transactions(user_id, limit=5, offset=page * 5)
    
    if not transactions:
        # –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        text = get_translation(language, 'no_transactions')
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=get_translation(language, 'back_to_menu'), callback_data="history_back_to_menu")]]
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    text = f"<b>{get_translation(language, 'history_title')}</b>\n\n"
    
    for i, trans in enumerate(transactions, 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if trans.get('transaction_type') == 'deposit':
            trans_type = get_translation(language, 'transaction_type_deposit')
        else:
            trans_type = get_translation(language, 'transaction_type_withdraw')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = trans.get('status', 'pending')
        if status == 'pending':
            status_text = get_translation(language, 'transaction_status_pending')
        elif status == 'completed':
            status_text = get_translation(language, 'transaction_status_completed')
        else:
            status_text = get_translation(language, 'transaction_status_rejected')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = datetime.fromisoformat(trans['created_at'])
        date_str = created_at.strftime("%d.%m.%Y %H:%M")
        
        text += f"{i}. {trans_type}\n"
        text += f"   {get_translation(language, 'transaction_amount')} {trans['amount']:,.0f} KGS\n"
        text += f"   {get_translation(language, 'transaction_status')} {status_text}\n"
        text += f"   {get_translation(language, 'transaction_date')} {date_str}\n"
        
        if trans.get('xbet_id'):
            text += f"   {get_translation(language, 'transaction_id')} {trans['xbet_id']}\n"
        text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text=get_translation(language, 'prev_page'), callback_data=f"history_page_{page-1}"))
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # if (page + 1) * 5 < total_count:
    #     nav_buttons.append(InlineKeyboardButton(text=get_translation(language, 'next_page'), callback_data=f"history_page_{page+1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([InlineKeyboardButton(text=get_translation(language, 'back_to_menu'), callback_data="history_back_to_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def handle_history_page_callback(callback: types.CallbackQuery, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    if not callback.from_user:
        return
    
    page = int(callback.data.split('_')[-1])
    await show_user_history_callback(callback, page, bot_name, user_languages, db_manager)

async def show_user_history_callback(callback: types.CallbackQuery, page: int, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transactions = db_manager.get_user_transactions(user_id, limit=5, offset=page * 5)
    
    if not transactions:
        # –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        text = get_translation(language, 'no_transactions')
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=get_translation(language, 'back_to_menu'), callback_data="history_back_to_menu")]]
        )
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    text = f"<b>{get_translation(language, 'history_title')}</b>\n\n"
    
    for i, trans in enumerate(transactions, 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if trans.get('transaction_type') == 'deposit':
            trans_type = get_translation(language, 'transaction_type_deposit')
        else:
            trans_type = get_translation(language, 'transaction_type_withdraw')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = trans.get('status', 'pending')
        if status == 'pending':
            status_text = get_translation(language, 'transaction_status_pending')
        elif status == 'completed':
            status_text = get_translation(language, 'transaction_status_completed')
        else:
            status_text = get_translation(language, 'transaction_status_rejected')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = datetime.fromisoformat(trans['created_at'])
        date_str = created_at.strftime("%d.%m.%Y %H:%M")
        
        text += f"{i}. {trans_type}\n"
        text += f"   {get_translation(language, 'transaction_amount')} {trans['amount']:,.0f} KGS\n"
        text += f"   {get_translation(language, 'transaction_status')} {status_text}\n"
        text += f"   {get_translation(language, 'transaction_date')} {date_str}\n"
        
        if trans.get('xbet_id'):
            text += f"   {get_translation(language, 'transaction_id')} {trans['xbet_id']}\n"
        text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text=get_translation(language, 'prev_page'), callback_data=f"history_page_{page-1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([InlineKeyboardButton(text=get_translation(language, 'back_to_menu'), callback_data="history_back_to_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def handle_history_back_to_menu(callback: types.CallbackQuery, bot_name: str, user_languages: Dict[int, str], db_manager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    
    welcome_text = get_text_for_user(user_id, 'welcome', bot_name, user_languages, db_manager)
    keyboard = create_main_reply_keyboard(bot_name, user_id, user_languages, db_manager)
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()
async def handle_channel_command(message: types.Message, bot_name: str, user_languages: Dict[int, str], db_manager):
    \
\\1@01>BG8:
:><0=4K
:0=0;0\\\
    if not message.from_user:
        return
    user_id = message.from_user.id
    language = get_user_language(user_id, user_languages, db_manager)
    text = get_translation(language, 'channel_description')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=get_translation(language, 'go_to_channel_button'), url=get_translation(language, 'channel_link'))]])
    await message.answer(text, reply_markup=keyboard)
