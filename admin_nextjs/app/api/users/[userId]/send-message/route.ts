import { NextRequest, NextResponse } from 'next/server'
import { requireAuth, createApiResponse } from '@/lib/api-helpers'
import { prisma } from '@/lib/prisma'

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
export async function POST(
  request: NextRequest,
  { params }: { params: { userId: string } }
) {
  try {
    requireAuth(request)

    let userId: bigint
    try {
      userId = BigInt(params.userId)
    } catch (e) {
      return NextResponse.json(
        createApiResponse(null, 'Invalid user ID'),
        { status: 400 }
      )
    }

    const botToken = process.env.BOT_TOKEN

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    console.log('üîë BOT_TOKEN used:', botToken ? `${botToken.substring(0, 15)}...` : 'NOT SET')

    if (!botToken) {
      return NextResponse.json(
        createApiResponse(null, 'BOT_TOKEN not configured'),
        { status: 500 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∑–∞–ø—Ä–æ—Å–µ (FormData)
    const contentType = request.headers.get('content-type') || ''
    let message: string | null = null
    let file: File | null = null
    let fileType: string | null = null
    let mediaUrl: string | null = null
    let messageType = 'text'

    if (contentType.includes('multipart/form-data')) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData
      const formData = await request.formData()
      message = formData.get('message') as string | null
      file = formData.get('file') as File | null
      fileType = formData.get('fileType') as string | null

      if (!message?.trim() && !file) {
        return NextResponse.json(
          createApiResponse(null, 'Message or file is required'),
          { status: 400 }
        )
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      const body = await request.json()
      message = body.message

      if (!message || !message.trim()) {
        return NextResponse.json(
          createApiResponse(null, 'Message is required'),
          { status: 400 }
        )
      }
    }

    let telegramData: any
    let telegramMessageId: bigint

    if (file) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
      const isVideo = fileType?.startsWith('video/')
      const isPhoto = fileType?.startsWith('image/')

      if (!isPhoto && !isVideo) {
        return NextResponse.json(
          createApiResponse(null, 'File must be an image or video'),
          { status: 400 }
        )
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Blob –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const arrayBuffer = await file.arrayBuffer()
      const blob = new Blob([arrayBuffer], { type: fileType || (isPhoto ? 'image/jpeg' : 'video/mp4') })

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Telegram API
      // –í Node.js 18+ –≥–ª–æ–±–∞–ª—å–Ω—ã–π FormData –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å fetch
      const telegramFormData = new FormData()
      telegramFormData.append('chat_id', userId.toString())
      if (message?.trim()) {
        telegramFormData.append('caption', message)
      }
      telegramFormData.append(isPhoto ? 'photo' : 'video', blob, file.name)

      const apiEndpoint = isPhoto 
        ? `https://api.telegram.org/bot${botToken}/sendPhoto`
        : `https://api.telegram.org/bot${botToken}/sendVideo`

      const telegramResponse = await fetch(apiEndpoint, {
        method: 'POST',
        body: telegramFormData,
      })

      telegramData = await telegramResponse.json()

      if (!telegramData.ok) {
        return NextResponse.json(
          createApiResponse(null, telegramData.description || 'Failed to send media'),
          { status: 500 }
        )
      }

      messageType = isPhoto ? 'photo' : 'video'
      telegramMessageId = BigInt(telegramData.result.message_id)
      
      // –ü–æ–ª—É—á–∞–µ–º URL –º–µ–¥–∏–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Telegram
      const media = telegramData.result.photo?.[telegramData.result.photo.length - 1] || telegramData.result.video
      if (media?.file_id) {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        const getFileUrl = `https://api.telegram.org/bot${botToken}/getFile?file_id=${media.file_id}`
        const fileResponse = await fetch(getFileUrl)
        const fileData = await fileResponse.json()
        
        if (fileData.ok && fileData.result?.file_path) {
          mediaUrl = `https://api.telegram.org/file/bot${botToken}/${fileData.result.file_path}`
        }
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sendMessageUrl = `https://api.telegram.org/bot${botToken}/sendMessage`
      const telegramResponse = await fetch(sendMessageUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: userId.toString(),
          text: message,
          parse_mode: 'HTML'
        })
      })

      telegramData = await telegramResponse.json()

      if (!telegramData.ok) {
        return NextResponse.json(
          createApiResponse(null, telegramData.description || 'Failed to send message'),
          { status: 500 }
        )
      }

      telegramMessageId = BigInt(telegramData.result.message_id)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    await prisma.chatMessage.create({
      data: {
        userId,
        messageText: message,
        messageType,
        direction: 'out', // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        telegramMessageId,
        mediaUrl,
      },
    })

    return NextResponse.json(
      createApiResponse({
        success: true,
        messageId: Number(telegramMessageId),
        mediaUrl,
      })
    )
  } catch (error: any) {
    console.error('Send message API error:', error)
    return NextResponse.json(
      createApiResponse(null, error.message || 'Failed to send message'),
      { status: 500 }
    )
  }
}

