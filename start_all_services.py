#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ LUXON
"""

import subprocess
import time
import sys
import os
from threading import Thread

class ServiceManager:
    def __init__(self):
        self.processes = []
        
    def start_django_admin(self):
        """–ó–∞–ø—É—Å–∫ Django –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Django –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        try:
            os.chdir('django_admin')
            process = subprocess.Popen([
                sys.executable, 'manage.py', 'runserver', '8081'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(('Django Admin', process))
            print("‚úÖ Django –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8081")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")
        finally:
            os.chdir('..')
    
    def start_nextjs_app(self):
        """–ó–∞–ø—É—Å–∫ Next.js –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Next.js –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        try:
            os.chdir('bot2/mini_app_site')
            process = subprocess.Popen([
                'npm', 'run', 'dev'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(('Next.js App', process))
            print("‚úÖ Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Next.js: {e}")
        finally:
            os.chdir('../..')
    
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            os.chdir('bot')
            process = subprocess.Popen([
                sys.executable, 'main.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(('Telegram Bot', process))
            print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            os.chdir('..')
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üéØ –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í LUXON")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        threads = [
            Thread(target=self.start_django_admin),
            Thread(target=self.start_nextjs_app),
            Thread(target=self.start_telegram_bot)
        ]
        
        for thread in threads:
            thread.start()
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        time.sleep(10)
        
        print("\nüìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:")
        for name, process in self.processes:
            if process.poll() is None:
                print(f"‚úÖ {name}: –ó–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            else:
                print(f"‚ùå {name}: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("\nüåê –î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ò–°–´:")
        print("   üîß Django Admin: http://localhost:8081")
        print("   üì± Mini App: http://localhost:3000")
        print("   ü§ñ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω")
        
        print("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
            for name, process in self.processes:
                if process.poll() is None:
                    process.terminate()
                    print(f"‚úÖ {name}: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

def main():
    manager = ServiceManager()
    manager.start_all()

if __name__ == "__main__":
    main()

