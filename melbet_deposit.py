#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Melbet Cash API
–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏ —Å—É–º–º—É - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
"""

import hashlib
import json
import requests
from datetime import datetime, timezone

class MelbetDeposit:
    def __init__(self):
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Melbet API (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        self.hash_key = "fcd5fde906d55505bb5c7153a14631bb87f71ac4206d9b6f45bcdb97583fc4d7"
        self.cashierpass = "LxhE5uQ2"
        self.login = "bakhtark"
        self.cashdesk_id = "1350588"
        self.base_url = "https://partners.servcul.com/CashdeskBotAPI"
    
    def get_timestamp(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ"""
        now = datetime.now(timezone.utc)
        return now.strftime("%Y.%m.%d %H:%M:%S")
    
    def generate_signature(self, method, user_id=None, summa=None, code=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è Melbet API"""
        dt = self.get_timestamp()
        lng = "ru"              
        
        if method == "balance":
            # –î–ª—è –±–∞–ª–∞–Ω—Å–∞: SHA256(hash={0}&cashierpass={1}&dt={2})
            step1 = f"hash={self.hash_key}&cashierpass={self.cashierpass}&dt={dt}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(dt={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"dt={dt}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
        elif method == "search":
            # –î–ª—è –ø–æ–∏—Å–∫–∞: SHA256(hash={0}&userid={1}&cashdeskid={2})
            step1 = f"hash={self.hash_key}&userid={user_id}&cashdeskid={self.cashdesk_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(userid={0}&cashierpass={1}&hash={2})
            step2 = f"userid={user_id}&cashierpass={self.cashierpass}&hash={self.hash_key}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
        elif method == "deposit":
            # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: SHA256(hash={0}&lng={1}&userid={2}) - userid —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã!
            step1 = f"hash={self.hash_key}&lng={lng}&userid={user_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(summa={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"summa={summa}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
            
        elif method == "payout":
            # –î–ª—è –≤—ã–ø–ª–∞—Ç—ã: SHA256(hash={0}&lng={1}&userid={2}) - userid —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã!
            step1 = f"hash={self.hash_key}&lng={lng}&userid={user_id}"
            step1_hash = hashlib.sha256(step1.encode()).hexdigest()
            
            # MD5(code={0}&cashierpass={1}&cashdeskid={2})
            step2 = f"code={code}&cashierpass={self.cashierpass}&cashdeskid={self.cashdesk_id}"
            step2_hash = hashlib.md5(step2.encode()).hexdigest()
            
            # SHA256(step1 + step2)
            final_string = step1_hash + step2_hash
            signature = hashlib.sha256(final_string.encode()).hexdigest()
        
        return signature
    
    def generate_confirm(self, user_id, method_hash):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å confirm –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return hashlib.md5(f"{user_id}:{method_hash}".encode()).hexdigest()
    
    def generate_confirm_deposit(self, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å confirm –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)"""
        # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: confirm = MD5(userId:hash)
        return hashlib.md5(f"{user_id}:{self.hash_key}".encode()).hexdigest()
    
    def generate_confirm_payout(self, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å confirm –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)"""
        # –î–ª—è –≤—ã–ø–ª–∞—Ç—ã: confirm = MD5(userId:hash)
        return hashlib.md5(f"{user_id}:{self.hash_key}".encode()).hexdigest()
    
    def get_balance(self):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã"""
        print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã...")
        
        dt = self.get_timestamp()
        signature = self.generate_signature("balance")
        confirm = self.generate_confirm(self.cashdesk_id, self.hash_key)
        
        url = f"{self.base_url}/Cashdesk/{self.cashdesk_id}/Balance?confirm={confirm}&dt={dt}"
        headers = {'sign': signature}
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                balance = data.get('Balance', 0)
                limit = data.get('Limit', 0)
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã: {balance} KGS")
                print(f"üìä –õ–∏–º–∏—Ç –∫–∞—Å—Å—ã: {limit} KGS")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def search_user(self, user_id):
        """–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID"""
        print(f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ {user_id}...")
        
        signature = self.generate_signature("search", user_id=user_id)
        confirm = self.generate_confirm(user_id, self.hash_key)
        
        url = f"{self.base_url}/Users/{user_id}?confirm={confirm}&cashdeskId={self.cashdesk_id}"
        headers = {'sign': signature}
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                user_name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                currency_id = data.get('currencyId', 0)
                user_id_result = data.get('userId', 0)
                
                if user_id_result > 0:
                    print(f"‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: {user_name}")
                    print(f"üí± –í–∞–ª—é—Ç–∞: {currency_id}")
                    return True
                else:
                    print(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def deposit_user(self, user_id, summa):
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        print(f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ {user_id} –Ω–∞ {summa} KGS...")
        
        signature = self.generate_signature("deposit", user_id=user_id, summa=summa)
        confirm = self.generate_confirm_deposit(user_id)
        
        url = f"{self.base_url}/Deposit/{user_id}/Add"
        headers = {
            'sign': signature,
            'Content-Type': 'application/json'
        }
        
        data = {
            "cashdeskId": int(self.cashdesk_id),
            "lng": "ru",
            "summa": summa,
            "confirm": confirm
        }
        
        try:
            response = requests.post(url, json=data, headers=headers, timeout=30)
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                success = result.get('Success', False)
                message = result.get('Message', '')
                summa_result = result.get('Summa', 0)
                message_id = result.get('MessageId', 0)
                
                if success:
                    print(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üí∞ –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {summa_result} KGS")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {message}")
                    print(f"üî¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: {message_id}")
                return success
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def payout_user(self, user_id, code):
        """–í—ã–ø–ª–∞—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É"""
        print(f"üí∏ –í—ã–ø–ª–∞—Ç–∞ –∏–≥—Ä–æ–∫—É {user_id} —Å –∫–æ–¥–æ–º {code}...")
        
        signature = self.generate_signature("payout", user_id=user_id, code=code)
        confirm = self.generate_confirm_payout(user_id)
        
        url = f"{self.base_url}/Deposit/{user_id}/Payout"
        headers = {
            'sign': signature,
            'Content-Type': 'application/json'
        }
        
        data = {
            "cashdeskId": int(self.cashdesk_id),
            "lng": "ru",
            "code": code,
            "confirm": confirm
        }
        
        try:
            response = requests.post(url, json=data, headers=headers, timeout=30)
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                success = result.get('Success', False)
                message = result.get('Message', '')
                summa_result = result.get('Summa', 0)
                message_id = result.get('MessageId', 0)
                
                if success:
                    print(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")
                    print(f"üí∞ –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {summa_result} KGS")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã: {message}")
                    print(f"üî¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: {message_id}")
                return success
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*60)
        print("üéØ MELBET CASH API - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–°–°–û–ô")
        print("="*60)
        print("1. üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã")
        print("2. üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID")
        print("3. üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞")
        print("4. üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("="*60)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üéØ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í MELBET CASH API!")
        print(f"üè™ –ö–∞—Å—Å–∞: {self.cashdesk_id}")
        print(f"üë§ –õ–æ–≥–∏–Ω: {self.login}")
        
        while True:
            self.show_menu()
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                elif choice == "1":
                    self.get_balance()
                    
                elif choice == "2":
                    user_id = input("üîç –í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞: ").strip()
                    if user_id:
                        self.search_user(user_id)
                    else:
                        print("‚ùå ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                        
                elif choice == "3":
                    user_id = input("üí≥ –í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞: ").strip()
                    if not user_id:
                        print("‚ùå ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                        continue
                        
                    try:
                        summa = float(input("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ").strip())
                        if summa <= 0:
                            print("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                            continue
                        self.deposit_user(user_id, summa)
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
                        
                elif choice == "4":
                    user_id = input("üí∏ –í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞: ").strip()
                    if not user_id:
                        print("‚ùå ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                        continue
                        
                    code = input("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
                    if not code:
                        print("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –≤–≤–µ–¥–µ–Ω")
                        continue
                        
                    self.payout_user(user_id, code)
                    
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        melbet = MelbetDeposit()
        melbet.run()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()


