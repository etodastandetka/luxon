#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è LUXON
–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import aiohttp
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8372920134:AAG9VbvRvu-7Ikug_fwMtc-5OzxmevKTfSw"

# URL —Å–∞–π—Ç–∞
WEBSITE_URL = "https://luxservice.online"

# URL Django API
DJANGO_API_URL = os.getenv('DJANGO_API_URL', 'http://127.0.0.1:8081')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", web_app=WebAppInfo(url=f"{WEBSITE_URL}/deposit")),
            InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", web_app=WebAppInfo(url=f"{WEBSITE_URL}/withdraw"))
        ],
        [
            InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", web_app=WebAppInfo(url=f"{WEBSITE_URL}/history")),
            InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", web_app=WebAppInfo(url=f"{WEBSITE_URL}/referral"))
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", web_app=WebAppInfo(url=f"{WEBSITE_URL}/instruction")),
            InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app=WebAppInfo(url=f"{WEBSITE_URL}/support"))
        ],
        [
            InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBSITE_URL))
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ | –í—ã–≤–æ–¥
–∏–∑ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –∫–æ–Ω—Ç–æ—Ä!

üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 0%
üì§ –í—ã–≤–æ–¥ ‚Äî 0%
üïí –†–∞–±–æ—Ç–∞–µ–º 24/7

üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @luxon_support
üí¨ –ß–∞—Ç –¥–ª—è –≤—Å–µ—Ö: @luxkassa_chat

üîí –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –æ–±–µ—Å–ø–µ—á–µ–Ω –ª–∏—á–Ω—ã–º –æ—Ç–¥–µ–ª–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
    video_path = "luxon.mp4"
    if os.path.exists(video_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        with open(video_path, 'rb') as video_file:
            await update.message.reply_video(
                video=InputFile(video_file),
                caption=welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    else:
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def save_message_to_db(message_data: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Django –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f'{DJANGO_API_URL}/bot/api/save-chat-message/',
                json=message_data,
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ Message from user {message_data['user_id']} saved to DB")
                    return True
                else:
                    text = await response.text()
                    logger.warning(f"‚ö†Ô∏è Failed to save message: {response.status} - {text}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå Error saving message to DB: {e}")
        return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message = update.message
        user = message.from_user
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'user_id': user.id,
            'message_text': message.text or message.caption or '',
            'message_type': 'text',
            'direction': 'in',  # –≤—Ö–æ–¥—è—â–µ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'telegram_message_id': message.message_id
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.photo:
            message_data['message_type'] = 'photo'
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            message_data['media_url'] = message.photo[-1].file_id
        elif message.video:
            message_data['message_type'] = 'video'
            message_data['media_url'] = message.video.file_id
        elif message.document:
            message_data['message_type'] = 'document'
            message_data['media_url'] = message.document.file_id
        elif message.voice:
            message_data['message_type'] = 'voice'
            message_data['media_url'] = message.voice.file_id
        elif message.audio:
            message_data['message_type'] = 'audio'
            message_data['media_url'] = message.audio.file_id
        elif message.sticker:
            message_data['message_type'] = 'sticker'
            message_data['media_url'] = message.sticker.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_message_to_db(message_data)
        
    except Exception as e:
        logger.error(f"‚ùå Error handling message: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND,  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
        handle_message
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("Bot started and ready to log messages to Django")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
